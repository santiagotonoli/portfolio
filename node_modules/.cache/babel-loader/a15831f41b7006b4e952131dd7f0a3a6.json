{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { isCssVar, isObject, pick, analyzeBreakpoints } from \"@chakra-ui/utils\";\n\nvar replaceWhiteSpace = function replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n\n  return value.replace(/\\s+/g, replaceValue);\n};\n\nvar escape = value => {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  var isDecimal = !Number.isInteger(parseFloat(value.toString()));\n  return isDecimal ? valueStr.replace(\".\", \"\\\\.\") : value;\n};\n\nexport var toVarDefinition = function toVarDefinition(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return \"--\" + [prefix, escape(value)].filter(Boolean).join(\"-\");\n};\nexport var toVarReference = value => \"var(\" + escape(value) + \")\";\nexport var toNegativeVar = value => \"calc(\" + escape(value) + \" * -1)\";\nexport var tokens = [\"colors\", \"borders\", \"borderWidths\", \"borderStyles\", \"fonts\", \"fontSizes\", \"fontWeights\", \"letterSpacings\", \"lineHeights\", \"radii\", \"space\", \"shadows\", \"sizes\", \"zIndices\", \"transition\"];\n\nfunction extractTokens(theme) {\n  var _tokens = tokens;\n  return pick(theme, _tokens);\n}\n\nfunction omitVars(rawTheme) {\n  var cleanTheme = _objectWithoutPropertiesLoose(rawTheme, [\"__cssMap\", \"__cssVars\", \"__breakpoints\"]);\n\n  return cleanTheme;\n}\n/**\n * The CSS transform order following the upcoming spec from CSSWG\n * translate => rotate => scale => skew\n * @see https://drafts.csswg.org/css-transforms-2/#ctm\n * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/\n */\n\n\nvar transformTemplate = [\"rotate(var(--chakra-rotate, 0))\", \"scaleX(var(--chakra-scale-x, 1))\", \"scaleY(var(--chakra-scale-y, 1))\", \"skewX(var(--chakra-skew-x, 0))\", \"skewY(var(--chakra-skew-y, 0))\"];\nexport function getTransformTemplate() {\n  return [\"translateX(var(--chakra-translate-x, 0))\", \"translateY(var(--chakra-translate-y, 0))\", ...transformTemplate].join(\" \");\n}\nexport function getTransformGpuTemplate() {\n  return [\"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\", ...transformTemplate].join(\" \");\n}\nexport function toCSSVar(rawTheme) {\n  var _theme$config;\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n\n\n  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map\n\n  var tokens = extractTokens(theme);\n  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;\n  var {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars\n  } = toProperties(tokens, {\n    cssVarPrefix\n  });\n  var defaultCssVars = {\n    \"--chakra-ring-offset\": \"0px\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-width\": \"3px\",\n    \"--chakra-ring-inset\": \"var(--chakra-empty, /*!*/ /*!*/)\",\n    \"--chakra-ring-offset-shadow\": \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)\",\n    \"--chakra-ring-shadow\": \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)\",\n    \"--chakra-ring\": \"var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent\",\n    \"--chakra-transform-gpu\": getTransformGpuTemplate(),\n    \"--chakra-transform\": getTransformTemplate(),\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\"\n  };\n  Object.assign(theme, {\n    __cssVars: _extends({}, defaultCssVars, cssVars),\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\n  });\n  return theme;\n}\n\nfunction toProperties(target, options, initialContext, prefixes) {\n  if (prefixes === void 0) {\n    prefixes = [];\n  }\n\n  var context = {\n    cssMap: _extends({}, initialContext == null ? void 0 : initialContext.cssMap),\n    cssVars: _extends({}, initialContext == null ? void 0 : initialContext.cssVars)\n  };\n  return Object.entries(target).reduce((properties, _ref) => {\n    var [key, value] = _ref;\n\n    if (isObject(value) || Array.isArray(value)) {\n      var nested = toProperties(value, options, properties, prefixes.concat(key));\n      Object.assign(properties.cssVars, nested.cssVars);\n      Object.assign(properties.cssMap, nested.cssMap);\n    } else {\n      var _tokenHandlerMap$firs;\n\n      var finalKey = prefixes.concat(key); // firstKey will be e.g. \"space\"\n\n      var [firstKey] = finalKey;\n      var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;\n      var {\n        cssVars,\n        cssMap\n      } = handler(finalKey, value, options);\n      Object.assign(properties.cssVars, cssVars);\n      Object.assign(properties.cssMap, cssMap);\n    }\n\n    return properties;\n  }, context);\n}\n/**\n * Define transformation handlers for ThemeScale\n */\n\n\nvar tokenHandlerMap = {\n  space: (keys, value, options) => {\n    var properties = tokenHandlerMap.defaultHandler(keys, value, options);\n    var [firstKey, ...referenceKeys] = keys;\n    var negativeLookupKey = firstKey + \".-\" + referenceKeys.join(\".\");\n    var negativeVarKey = keys.join(\"-\");\n    var cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix);\n    var negativeValue = isCssVar(String(value)) ? toNegativeVar(String(value)) : \"-\" + value;\n    var varRef = toNegativeVar(toVarReference(cssVar));\n    return {\n      cssVars: properties.cssVars,\n      cssMap: _extends({}, properties.cssMap, {\n        [negativeLookupKey]: {\n          value: negativeValue,\n          var: cssVar,\n          varRef\n        }\n      })\n    };\n  },\n  defaultHandler: (keys, value, options) => {\n    var lookupKey = keys.join(\".\");\n    var varKey = keys.join(\"-\");\n    var cssVar = toVarDefinition(varKey, options.cssVarPrefix);\n    return {\n      cssVars: {\n        [cssVar]: value\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: cssVar,\n          varRef: toVarReference(cssVar)\n        }\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["isCssVar","isObject","pick","analyzeBreakpoints","replaceWhiteSpace","value","replaceValue","replace","escape","valueStr","toString","includes","isDecimal","Number","isInteger","parseFloat","toVarDefinition","prefix","filter","Boolean","join","toVarReference","toNegativeVar","tokens","extractTokens","theme","_tokens","omitVars","rawTheme","cleanTheme","transformTemplate","getTransformTemplate","getTransformGpuTemplate","toCSSVar","cssVarPrefix","config","_theme$config","cssMap","cssVars","toProperties","defaultCssVars","Object","assign","__cssVars","__cssMap","__breakpoints","breakpoints","target","options","initialContext","prefixes","context","entries","reduce","properties","key","_ref","Array","isArray","nested","concat","finalKey","firstKey","handler","tokenHandlerMap","defaultHandler","space","keys","referenceKeys","negativeLookupKey","negativeVarKey","cssVar","negativeValue","String","varRef","var","lookupKey","varKey"],"sources":["../../src/css-var.ts"],"sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  pick,\n  analyzeBreakpoints,\n} from \"@chakra-ui/utils\"\nimport type { WithCSSVar } from \"./types\"\n\nconst replaceWhiteSpace = (value: string, replaceValue = \"-\") =>\n  value.replace(/\\s+/g, replaceValue)\n\nconst escape = (value: string | number) => {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  const isDecimal = !Number.isInteger(parseFloat(value.toString()))\n  return isDecimal ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport const toVarDefinition = (value: string, prefix = \"\") =>\n  `--${[prefix, escape(value)].filter(Boolean).join(\"-\")}`\nexport const toVarReference = (value: string) => `var(${escape(value)})`\nexport const toNegativeVar = (value: string) => `calc(${escape(value)} * -1)`\n\nexport const tokens = [\n  \"colors\",\n  \"borders\",\n  \"borderWidths\",\n  \"borderStyles\",\n  \"fonts\",\n  \"fontSizes\",\n  \"fontWeights\",\n  \"letterSpacings\",\n  \"lineHeights\",\n  \"radii\",\n  \"space\",\n  \"shadows\",\n  \"sizes\",\n  \"zIndices\",\n  \"transition\",\n] as const\n\nexport type ThemeScale =\n  | typeof tokens[number]\n  | \"transition.duration\"\n  | \"transition.property\"\n  | \"transition.easing\"\n\nfunction extractTokens(theme: Dict) {\n  const _tokens = (tokens as unknown) as string[]\n  return pick(theme, _tokens)\n}\n\nfunction omitVars(rawTheme: Dict) {\n  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme\n  return cleanTheme\n}\n\n/**\n * The CSS transform order following the upcoming spec from CSSWG\n * translate => rotate => scale => skew\n * @see https://drafts.csswg.org/css-transforms-2/#ctm\n * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/\n */\nconst transformTemplate = [\n  \"rotate(var(--chakra-rotate, 0))\",\n  \"scaleX(var(--chakra-scale-x, 1))\",\n  \"scaleY(var(--chakra-scale-y, 1))\",\n  \"skewX(var(--chakra-skew-x, 0))\",\n  \"skewY(var(--chakra-skew-y, 0))\",\n]\n\nexport function getTransformTemplate() {\n  return [\n    \"translateX(var(--chakra-translate-x, 0))\",\n    \"translateY(var(--chakra-translate-y, 0))\",\n    ...transformTemplate,\n  ].join(\" \")\n}\n\nexport function getTransformGpuTemplate() {\n  return [\n    \"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\",\n    ...transformTemplate,\n  ].join(\" \")\n}\n\nexport function toCSSVar<T extends Dict>(rawTheme: T) {\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  const theme = omitVars(rawTheme)\n\n  // omit components and breakpoints from css variable map\n  const tokens = extractTokens(theme)\n\n  const cssVarPrefix = theme.config?.cssVarPrefix\n\n  const {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars,\n  } = toProperties(tokens, { cssVarPrefix })\n\n  const defaultCssVars: Dict = {\n    \"--chakra-ring-offset\": \"0px\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-width\": \"3px\",\n    \"--chakra-ring-inset\": \"var(--chakra-empty, /*!*/ /*!*/)\",\n    \"--chakra-ring-offset-shadow\":\n      \"var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset) var(--chakra-ring-offset-color, transparent)\",\n    \"--chakra-ring-shadow\":\n      \"var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset)) var(--chakra-ring-color)\",\n    \"--chakra-ring\":\n      \"var(--chakra-ring-offset-shadow), var(--chakra-ring-shadow), 0 0 transparent\",\n    \"--chakra-transform-gpu\": getTransformGpuTemplate(),\n    \"--chakra-transform\": getTransformTemplate(),\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\",\n  }\n\n  Object.assign(theme, {\n    __cssVars: { ...defaultCssVars, ...cssVars },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints),\n  })\n\n  return theme as WithCSSVar<T>\n}\n\ntype ToPropertiesOptions = { cssVarPrefix?: string }\n\nfunction toProperties(\n  target: Dict,\n  options: ToPropertiesOptions,\n  initialContext?: { cssMap?: Dict; cssVars?: Dict },\n  prefixes: string[] = [],\n) {\n  const context = {\n    cssMap: {\n      ...initialContext?.cssMap,\n    },\n    cssVars: {\n      ...initialContext?.cssVars,\n    },\n  }\n\n  return Object.entries(target).reduce((properties, [key, value]) => {\n    if (isObject(value) || Array.isArray(value)) {\n      const nested = toProperties(\n        value,\n        options,\n        properties,\n        prefixes.concat(key),\n      )\n      Object.assign(properties.cssVars, nested.cssVars)\n      Object.assign(properties.cssMap, nested.cssMap)\n    } else {\n      const finalKey = prefixes.concat(key)\n      // firstKey will be e.g. \"space\"\n      const [firstKey] = finalKey\n\n      const handler =\n        tokenHandlerMap[firstKey] ?? tokenHandlerMap.defaultHandler\n\n      const { cssVars, cssMap } = handler(finalKey, value, options)\n      Object.assign(properties.cssVars, cssVars)\n      Object.assign(properties.cssMap, cssMap)\n    }\n\n    return properties\n  }, context)\n}\n\n/**\n * Define transformation handlers for ThemeScale\n */\nconst tokenHandlerMap: Partial<\n  Record<\n    ThemeScale | \"defaultHandler\",\n    (\n      keys: string[],\n      value: unknown,\n      options: ToPropertiesOptions,\n    ) => { cssVars: Dict; cssMap: Dict }\n  >\n> = {\n  space: (keys, value, options) => {\n    const properties = tokenHandlerMap.defaultHandler!(keys, value, options)\n    const [firstKey, ...referenceKeys] = keys\n\n    const negativeLookupKey = `${firstKey}.-${referenceKeys.join(\".\")}`\n    const negativeVarKey = keys.join(\"-\")\n    const cssVar = toVarDefinition(negativeVarKey, options.cssVarPrefix)\n    const negativeValue = isCssVar(String(value))\n      ? toNegativeVar(String(value))\n      : `-${value}`\n\n    const varRef = toNegativeVar(toVarReference(cssVar))\n\n    return {\n      cssVars: properties.cssVars,\n      cssMap: {\n        ...properties.cssMap,\n        [negativeLookupKey]: {\n          value: negativeValue,\n          var: cssVar,\n          varRef,\n        },\n      },\n    }\n  },\n  defaultHandler: (keys, value, options) => {\n    const lookupKey = keys.join(\".\")\n    const varKey = keys.join(\"-\")\n\n    const cssVar = toVarDefinition(varKey, options.cssVarPrefix)\n\n    return {\n      cssVars: {\n        [cssVar]: value,\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: cssVar,\n          varRef: toVarReference(cssVar),\n        },\n      },\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}