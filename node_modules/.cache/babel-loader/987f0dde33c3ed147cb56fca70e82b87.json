{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nexport function useBreakpoint(defaultBreakpoint) {\n  var {\n    breakpoints\n  } = useTheme();\n  var mediaQueries = React.useMemo(() => createMediaQueries(_extends({\n    base: \"0px\"\n  }, breakpoints)), [breakpoints]);\n  var [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(_ref => {\n      var {\n        breakpoint\n      } = _ref;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  });\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback((query, breakpoint) => {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(() => {\n    var listeners = new Set();\n    mediaQueries.forEach(_ref2 => {\n      var {\n        query\n      } = _ref2,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n      var mediaQuery = window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = () => {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery,\n        handleChange\n      });\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(_ref3 => {\n        var {\n          mediaQuery,\n          handleChange\n        } = _ref3;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update]);\n  return current;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,iBAAvB,EAAmD;EACxD,IAAM;IAAEC;EAAF,IAAkBL,QAAQ,EAAhC;EAEA,IAAMM,YAAY,GAAGL,KAAK,CAACM,OAANN,CACnB,MAAMC,kBAAkB;IAAGM,IAAI,EAAE;EAAT,GAAmBH,WAAnB,EADLJ,EAEnB,CAACI,WAAD,CAFmBJ,CAArB;EAKA,IAAM,CAACQ,iBAAD,EAAoBC,oBAApB,IAA4CT,KAAK,CAACU,QAANV,CAAe,MAAM;IACrE,IAAI,CAACG,iBAAL,EAAwB;MACtB,OAAOQ,SAAP;IACD;;IAED,IAAMC,UAAU,GAAGP,YAAY,CAACQ,IAAbR,CACjBS;MAAA,IAAC;QAAEC;MAAF,IAADD;MAAA,OAAoBC,UAAU,KAAKZ,iBAAnC;IADiB,EAAnB;;IAIA,IAAIS,UAAJ,EAAgB;MACd,IAAkBG,UAAlB,iCAAiCH,UAAjC;;MACA,OAAOG,UAAP;IACD;;IAED,OAAOJ,SAAP;EAdgD,EAAlD;EAiBA,IAAMK,OAAO,GAAGR,iBAAH,QAAGA,GAAH,MAAGA,oBAAiB,CAAEO,UAAnC;EAEA,IAAME,MAAM,GAAGjB,KAAK,CAACkB,WAANlB,CACb,CAACmB,KAAD,EAAwBJ,UAAxB,KAAmD;IACjD,IAAII,KAAK,CAACC,OAAND,IAAiBH,OAAO,KAAKD,UAAU,CAACA,UAA5C,EAAwD;MACtDN,oBAAoB,CAACM,UAAD,CAApBN;IACD;EAJU,GAMb,CAACO,OAAD,CANahB,CAAf;EASAA,KAAK,CAACqB,SAANrB,CAAgB,MAAM;IACpB,IAAMsB,SAAS,GAAG,IAAIC,GAAJ,EAAlB;IAEAlB,YAAY,CAACmB,OAAbnB,CAAqBoB,SAA8B;MAAA,IAA7B;QAAEN;MAAF,IAA6BM;MAAA,IAAjBV,UAAiB;;MACjD,IAAMH,UAAU,GAAGc,MAAM,CAACC,UAAPD,CAAkBP,KAAlBO,CAAnB,CADiD,CAGjD;;MACAT,MAAM,CAACL,UAAD,EAAaG,UAAb,CAANE;;MAEA,IAAMW,YAAY,GAAG,MAAM;QACzBX,MAAM,CAACL,UAAD,EAAaG,UAAb,CAANE;MADF,EANiD,CAUjD;;;MACAL,UAAU,CAACiB,WAAXjB,CAAuBgB,YAAvBhB,EAXiD,CAajD;MACA;;MACAU,SAAS,CAACQ,GAAVR,CAAc;QAAEV,UAAF;QAAcgB;MAAd,CAAdN;MAEA,OAAO,MAAM;QACX;QACAV,UAAU,CAACmB,cAAXnB,CAA0BgB,YAA1BhB;MAFF;IAjBF;IAuBA,OAAO,MAAM;MACX;MACAU,SAAS,CAACE,OAAVF,CAAkBU,SAAkC;QAAA,IAAjC;UAAEpB,UAAF;UAAcgB;QAAd,IAAiCI;QAClDpB,UAAU,CAACmB,cAAXnB,CAA0BgB,YAA1BhB;MADF;MAGAU,SAAS,CAACW,KAAVX;IALF;EA1BF,GAiCG,CAACjB,YAAD,EAAeD,WAAf,EAA4Ba,MAA5B,CAjCHjB;EAmCA,OAAOgB,OAAP;AACD","names":["useTheme","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","mediaQueries","useMemo","base","currentBreakpoint","setCurrentBreakpoint","useState","undefined","mediaQuery","find","_ref","breakpoint","current","update","useCallback","query","matches","useEffect","listeners","Set","forEach","_ref2","window","matchMedia","handleChange","addListener","add","removeListener","_ref3","clear"],"sources":["../../src/use-breakpoint.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n"]},"metadata":{},"sourceType":"module"}