{"ast":null,"code":"import { memoizedGet as get } from \"@chakra-ui/utils\";\n\nvar floatTransform = (value, theme) => {\n  var map = {\n    left: \"right\",\n    right: \"left\"\n  };\n  return theme.direction === \"rtl\" ? map[value] : value;\n};\n\nvar srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\nvar srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\"\n};\n\nvar getWithPriority = (theme, key, styles) => {\n  var result = {};\n  var obj = get(theme, key, {});\n\n  for (var prop in obj) {\n    var isInStyles = prop in styles && styles[prop] != null;\n    if (!isInStyles) result[prop] = obj[prop];\n  }\n\n  return result;\n};\n\nexport var others = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    transform(value) {\n      if (value === true) return srOnly;\n      if (value === \"focusable\") return srFocusable;\n      return {};\n    }\n\n  },\n  layerStyle: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, \"layerStyles.\" + value, styles)\n  },\n  textStyle: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, \"textStyles.\" + value, styles)\n  },\n  apply: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, value, styles)\n  }\n};","map":{"version":3,"mappings":"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","names":["memoizedGet","get","floatTransform","value","theme","map","left","right","direction","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","getWithPriority","key","styles","result","obj","prop","isInStyles","others","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","float","property","transform","willChange","filter","clipPath","layerStyle","processResult","textStyle","apply"],"sources":["../../../src/config/others.ts"],"sourcesContent":["import { memoizedGet as get } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config } from \"../prop-config\"\nimport { Transform } from \"../types\"\nimport { Length, ResponsiveValue, Token } from \"../utils\"\n\nconst floatTransform: Transform = (value, theme) => {\n  const map = { left: \"right\", right: \"left\" }\n  return theme.direction === \"rtl\" ? map[value] : value\n}\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst getWithPriority = (theme: any, key: any, styles: any) => {\n  const result = {}\n  const obj = get(theme, key, {})\n  for (const prop in obj) {\n    const isInStyles = prop in styles && styles[prop] != null\n    if (!isInStyles) result[prop] = obj[prop]\n  }\n  return result\n}\n\nexport const others: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n  layerStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `layerStyles.${value}`, styles),\n  },\n  textStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `textStyles.${value}`, styles),\n  },\n  apply: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, value, styles),\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-position` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The CSS `clip-path` property.\n   *\n   * It creates a clipping region that sets what part of an element should be shown.\n   */\n  clipPath?: ResponsiveValue<CSS.Property.ClipPath>\n  /**\n   * The layer style object to apply.\n   * Note: Styles must be located in `theme.layerStyles`\n   */\n  layerStyle?: Token<string & {}, \"layerStyles\">\n  /**\n   * The text style object to apply.\n   * Note: Styles must be located in `theme.textStyles`\n   */\n  textStyle?: Token<string & {}, \"textStyles\">\n  /**\n   * Apply theme-aware style objects in `theme`\n   */\n  apply?: ResponsiveValue<string>\n}\n"]},"metadata":{},"sourceType":"module"}