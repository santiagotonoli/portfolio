{"ast":null,"code":"import { runIfFn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\nexport function useControllableProp(prop, state) {\n  var isControlled = prop !== undefined;\n  var value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\n/**\n * React hook for using controlling component state.\n * @param props\n */\n\nexport function useControllableState(props) {\n  var {\n    value: valueProp,\n    defaultValue,\n    onChange\n  } = props;\n  var handleChange = useCallbackRef(onChange);\n  var [valueState, setValue] = React.useState(defaultValue);\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(next => {\n    var nextValue = runIfFn(next, value);\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    handleChange(nextValue);\n  }, [isControlled, handleChange, value]);\n  return [value, updateValue];\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;EACpE,IAAMC,YAAY,GAAGF,IAAI,KAAKG,SAA9B;EACA,IAAMC,KAAK,GAAGF,YAAY,IAAI,OAAOF,IAAP,KAAgB,WAAhCE,GAA8CF,IAA9CE,GAAqDD,KAAnE;EACA,OAAO,CAACC,YAAD,EAAeE,KAAf,CAAP;AACD;AAqBD;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;EAC3E,IAAM;IAAEF,KAAK,EAAEG,SAAT;IAAoBC,YAApB;IAAkCC;EAAlC,IAA+CH,KAArD;EACA,IAAMI,YAAY,GAAGZ,cAAc,CAACW,QAAD,CAAnC;EAEA,IAAM,CAACE,UAAD,EAAaC,QAAb,IAAyBf,KAAK,CAACgB,QAANhB,CAAeW,YAAfX,CAA/B;EACA,IAAMK,YAAY,GAAGK,SAAS,KAAKJ,SAAnC;EAEA,IAAMC,KAAK,GAAGF,YAAY,GAAIK,SAAJ,GAAsBI,UAAhD;EAEA,IAAMG,WAAW,GAAGjB,KAAK,CAACkB,WAANlB,CACjBmB,IAAD,IAAmC;IACjC,IAAMC,SAAS,GAAGrB,OAAO,CAACoB,IAAD,EAAOZ,KAAP,CAAzB;;IACA,IAAI,CAACF,YAAL,EAAmB;MACjBU,QAAQ,CAACK,SAAD,CAARL;IACD;;IACDF,YAAY,CAACO,SAAD,CAAZP;EANgB,GAQlB,CAACR,YAAD,EAAeQ,YAAf,EAA6BN,KAA7B,CARkBP,CAApB;EAWA,OAAO,CAACO,KAAD,EAAQU,WAAR,CAAP;AACD","names":["runIfFn","React","useCallbackRef","useControllableProp","prop","state","isControlled","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","handleChange","valueState","setValue","useState","updateValue","useCallback","next","nextValue"],"sources":["../../src/use-controllable.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props\n  const handleChange = useCallbackRef(onChange)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const isControlled = valueProp !== undefined\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n      handleChange(nextValue)\n    },\n    [isControlled, handleChange, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}