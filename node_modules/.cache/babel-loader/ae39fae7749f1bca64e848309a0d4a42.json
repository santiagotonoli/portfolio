{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, dataAttr, mergeRefs, pick, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useFormControl } from \"@chakra-ui/form-control\";\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nexport function useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovering] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [isCheckedState, setChecked] = useState(Boolean(defaultChecked));\n  var [isControlled, isChecked] = useControllableProp(isCheckedProp, isCheckedState);\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  var getCheckboxProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);\n  var inputProps = useFormControl(props);\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var ownProps = pick(inputProps, [\"id\", \"disabled\", \"readOnly\", \"required\", \"aria-invalid\", \"aria-required\", \"aria-readonly\", \"aria-describedby\", \"onFocus\", \"onBlur\"]); // This is a workaround for React Concurrent Mode issue https://github.com/facebook/react/issues/18591. Remove once it's fixed.\n\n    var focus = () => {\n      if (typeof ReactDOM.flushSync === \"function\") {\n        ;\n        ReactDOM.flushSync(() => {\n          setFocused.on();\n        });\n      } else {\n        setFocused.on();\n      }\n    };\n\n    var trulyDisabled = ownProps.disabled && !isFocusable;\n    return _extends({}, props, ownProps, {\n      ref: mergeRefs(forwardedRef, ref),\n      type: \"radio\",\n      name,\n      value,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(ownProps.onBlur, props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(ownProps.onFocus, props.onFocus, focus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      style: visuallyHiddenStyle\n    });\n  }, [inputProps, isFocusable, name, value, handleChange, setFocused, onKeyDown, onKeyUp, isChecked]);\n\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["useBoolean","useControllableProp","ariaAttr","callAllHandlers","dataAttr","mergeRefs","pick","warn","visuallyHiddenStyle","useCallback","useRef","useState","ReactDOM","useFormControl","useRadio","props","defaultIsChecked","defaultChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isInvalid","name","value","htmlProps","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","isCheckedState","setChecked","Boolean","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","inputProps","getInputProps","forwardedRef","ownProps","focus","flushSync","trulyDisabled","disabled","type","onBlur","onFocus","style","getLabelProps","stop","onTouchStart","state","stopPropagation"],"sources":["../../src/use-radio.ts"],"sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  pick,\n  PropGetter,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const inputProps = useFormControl<HTMLInputElement>(props)\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const ownProps = pick(inputProps, [\n        \"id\",\n        \"disabled\",\n        \"readOnly\",\n        \"required\",\n        \"aria-invalid\",\n        \"aria-required\",\n        \"aria-readonly\",\n        \"aria-describedby\",\n        \"onFocus\",\n        \"onBlur\",\n      ])\n\n      // This is a workaround for React Concurrent Mode issue https://github.com/facebook/react/issues/18591. Remove once it's fixed.\n      const focus = () => {\n        if (typeof (ReactDOM as any).flushSync === \"function\") {\n          ;(ReactDOM as any).flushSync(() => {\n            setFocused.on()\n          })\n        } else {\n          setFocused.on()\n        }\n      }\n\n      const trulyDisabled = ownProps.disabled && !isFocusable\n\n      return {\n        ...props,\n        ...ownProps,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(ownProps.onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(ownProps.onFocus, props.onFocus, focus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      inputProps,\n      isFocusable,\n      name,\n      value,\n      handleChange,\n      setFocused,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"]},"metadata":{},"sourceType":"module"}