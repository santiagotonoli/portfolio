{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { usePopover } from \"./use-popover\";\nvar motionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    },\n    transitionEnd: {\n      visibility: \"hidden\"\n    }\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\nvar [PopoverProvider, usePopoverContext] = createContext({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n});\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = props => {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose,\n    forceUpdate: context.forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = props => {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n  var {\n    getTriggerProps\n  } = usePopoverContext();\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n\nvar Motion = chakra(motion.section);\nexport var PopoverContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    isOpen,\n    getPopoverProps,\n    onTransitionEnd,\n    getPopoverPositionerProps\n  } = usePopoverContext();\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  var popoverProps = getPopoverProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    __css: styles.popper\n  }, getPopoverPositionerProps()), /*#__PURE__*/React.createElement(Motion, _extends({}, popoverProps, {\n    onUpdate: onTransitionEnd,\n    className: cx(\"chakra-popover__content\", props.className),\n    __css: contentStyles,\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\"\n  })));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    headerId,\n    setHasHeader\n  } = usePopoverContext();\n  React.useEffect(() => {\n    setHasHeader.on();\n    return () => setHasHeader.off();\n  }, [setHasHeader]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, props, {\n    className: cx(\"chakra-popover__header\", props.className),\n    id: headerId,\n    ref: ref,\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    bodyId,\n    setHasBody\n  } = usePopoverContext();\n  React.useEffect(() => {\n    setHasBody.on();\n    return () => setHasBody.off();\n  }, [setHasBody]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    className: cx(\"chakra-popover__body\", props.className),\n    id: bodyId,\n    ref: ref,\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = props => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = props => {\n  var {\n    onClose\n  } = usePopoverContext();\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    right: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = props => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, {\n    \"data-popper-arrow\": true,\n    className: \"chakra-popover__arrow-positioner\"\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-popover__arrow\", props.className)\n  }, props, {\n    \"data-popper-arrow-inner\": true,\n    __css: styles.arrow\n  })));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":{"version":3,"mappings":"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","names":["CloseButton","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","cx","runIfFn","__DEV__","motion","React","usePopover","motionVariants","exit","opacity","scale","transition","duration","ease","transitionEnd","visibility","enter","PopoverProvider","usePopoverContext","name","errorMessage","Popover","props","styles","children","_omitThemingProps","rest","context","value","isOpen","onClose","forceUpdate","displayName","PopoverTrigger","child","Children","only","getTriggerProps","cloneElement","ref","Motion","section","PopoverContent","getPopoverProps","onTransitionEnd","getPopoverPositionerProps","contentStyles","position","display","flexDirection","content","popoverProps","div","__css","popper","onUpdate","className","variants","initial","animate","PopoverHeader","headerId","setHasHeader","useEffect","on","off","header","id","PopoverBody","bodyId","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","size","onClick","borderRadius","top","right","padding","PopoverArrow","arrow"],"sources":["../../src/popover.tsx"],"sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport { motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst motionVariants: Variants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends HTMLChakraProps<\"section\"> {}\n\nconst Motion = chakra(motion.section)\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      isOpen,\n      getPopoverProps,\n      onTransitionEnd,\n      getPopoverPositionerProps,\n    } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    const popoverProps: any = getPopoverProps(props, ref)\n\n    return (\n      <chakra.div __css={styles.popper} {...getPopoverPositionerProps()}>\n        <Motion\n          {...popoverProps}\n          onUpdate={onTransitionEnd}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n          variants={motionVariants}\n          initial={false}\n          animate={isOpen ? \"enter\" : \"exit\"}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { bodyId, setHasBody } = usePopoverContext()\n\n  React.useEffect(() => {\n    setHasBody.on()\n    return () => setHasBody.off()\n  }, [setHasBody])\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...props}\n      className={cx(\"chakra-popover__body\", props.className)}\n      id={bodyId}\n      ref={ref}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.div data-popper-arrow className=\"chakra-popover__arrow-positioner\">\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...props}\n        data-popper-arrow-inner\n        __css={styles.arrow}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"]},"metadata":{},"sourceType":"module"}