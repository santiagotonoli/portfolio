{"ast":null,"code":"import { isObject, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudos\";\nimport { systemProps as systemPropConfigs } from \"./system\";\nexport var expandResponsive = styles => theme => {\n  if (!theme.__breakpoints) return styles;\n  var {\n    isResponsive,\n    toArrayValue,\n    media: medias\n  } = theme.__breakpoints;\n  var computedStyles = {};\n\n  for (var key in styles) {\n    var value = runIfFn(styles[key], theme);\n    if (value == null) continue;\n    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;\n\n    if (!Array.isArray(value)) {\n      computedStyles[key] = value;\n      continue;\n    }\n\n    var queries = value.slice(0, medias.length).length;\n\n    for (var index = 0; index < queries; index += 1) {\n      var media = medias == null ? void 0 : medias[index];\n\n      if (!media) {\n        computedStyles[key] = value[index];\n        continue;\n      }\n\n      computedStyles[media] = computedStyles[media] || {};\n\n      if (value[index] == null) {\n        continue;\n      }\n\n      computedStyles[media][key] = value[index];\n    }\n  }\n\n  return computedStyles;\n};\nexport function getCss(options) {\n  var {\n    configs = {},\n    pseudos = {},\n    theme\n  } = options;\n\n  var css = function css(stylesOrFn, nested) {\n    if (nested === void 0) {\n      nested = false;\n    }\n\n    var _styles = runIfFn(stylesOrFn, theme);\n\n    var styles = expandResponsive(_styles)(theme);\n    var computedStyles = {};\n\n    for (var k in styles) {\n      var _config$transform, _config, _config2, _config3, _config4;\n\n      var valueOrFn = styles[k];\n      var value = runIfFn(valueOrFn, theme);\n      var key = k in pseudos ? pseudos[k] : k;\n      var config = configs[key];\n\n      if (config === true) {\n        config = {\n          property: key\n        };\n      }\n\n      if (isObject(value)) {\n        var _computedStyles$key;\n\n        computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {};\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true));\n        continue;\n      }\n\n      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme, _styles)) != null ? _config$transform : value;\n      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;\n      var configProperty = runIfFn((_config3 = config) == null ? void 0 : _config3.property, theme);\n\n      if (!nested && (_config4 = config) != null && _config4.static) {\n        var staticStyles = runIfFn(config.static, theme);\n        computedStyles = merge({}, computedStyles, staticStyles);\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (var property of configProperty) {\n          computedStyles[property] = rawValue;\n        }\n\n        continue;\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue);\n        } else {\n          computedStyles[configProperty] = rawValue;\n        }\n\n        continue;\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue);\n        continue;\n      }\n\n      computedStyles[key] = rawValue;\n    }\n\n    return computedStyles;\n  };\n\n  return css;\n}\nexport var css = styles => theme => {\n  var cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs\n  });\n  return cssFn(styles);\n};","map":{"version":3,"mappings":"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","names":["isObject","mergeWith","merge","runIfFn","pseudoSelectors","systemProps","systemPropConfigs","expandResponsive","styles","theme","__breakpoints","isResponsive","toArrayValue","media","medias","computedStyles","key","value","Array","isArray","queries","slice","length","index","getCss","options","configs","pseudos","css","stylesOrFn","nested","_styles","k","valueOrFn","config","property","rawValue","_config","transform","processResult","configProperty","_config3","_config4","static","staticStyles","cssFn"],"sources":["../../src/css.ts"],"sourcesContent":["import { Dict, isObject, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config, PropConfig } from \"./prop-config\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { CssTheme, StyleObjectOrFn } from \"./types\"\n\nexport const expandResponsive = (styles: Dict) => (theme: Dict) => {\n  if (!theme.__breakpoints) return styles\n  const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints\n\n  const computedStyles: Dict = {}\n\n  for (const key in styles) {\n    let value = runIfFn(styles[key], theme)\n\n    if (value == null) continue\n\n    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value\n\n    if (!Array.isArray(value)) {\n      computedStyles[key] = value\n      continue\n    }\n\n    const queries = value.slice(0, medias.length).length\n\n    for (let index = 0; index < queries; index += 1) {\n      const media = medias?.[index]\n\n      if (!media) {\n        computedStyles[key] = value[index]\n        continue\n      }\n\n      computedStyles[media] = computedStyles[media] || {}\n\n      if (value[index] == null) {\n        continue\n      }\n\n      computedStyles[media][key] = value[index]\n    }\n  }\n\n  return computedStyles\n}\n\ninterface Options {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: Options) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (const k in styles) {\n      const valueOrFn = styles[k]\n      const value = runIfFn(valueOrFn, theme)\n      const key = k in pseudos ? pseudos[k] : k\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = computedStyles[key] ?? {}\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true))\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme, _styles) ?? value\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      const configProperty = runIfFn(config?.property, theme)\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (const property of configProperty) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[configProperty as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"]},"metadata":{},"sourceType":"module"}