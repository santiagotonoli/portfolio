{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { isNumber } from \"@chakra-ui/utils\";\nimport { createTransform, px as pxTransform } from \"../create-transform\";\nimport { logical, toConfig } from \"../prop-config\";\nexport * from \"./types\";\n\nfunction fractionalValue(value) {\n  return !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n}\n\nexport var t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", pxTransform),\n  space: toConfig(\"space\", pxTransform),\n  spaceT: toConfig(\"space\", pxTransform),\n  prop: (property, scale, transform) => _extends({\n    property,\n    scale\n  }, scale && {\n    transform: createTransform({\n      scale,\n      transform\n    })\n  }),\n  sizes: toConfig(\"sizes\", pxTransform),\n  sizesT: toConfig(\"sizes\", fractionalValue),\n  shadows: toConfig(\"shadows\"),\n  logical\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,eAAT,EAA0BC,EAAE,IAAIC,WAAhC,QAAmD,qBAAnD;AAEA,SAASC,OAAT,EAA8BC,QAA9B,QAA8C,gBAA9C;AAEA,cAAc,SAAd;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAqC;EACnC,OAAO,CAACP,QAAQ,CAACO,KAAD,CAAT,IAAoBA,KAAK,GAAG,CAA5B,GAAgCA,KAAhC,GAA2CA,KAAK,GAAG,GAARA,GAA3C,GAAP;AACD;;AAED,OAAO,IAAMC,CAAC,GAAG;EACfC,YAAY,EAAEJ,QAAQ,CAAC,cAAD,CADP;EAEfK,YAAY,EAAEL,QAAQ,CAAC,cAAD,CAFP;EAGfM,MAAM,EAAEN,QAAQ,CAAC,QAAD,CAHD;EAIfO,OAAO,EAAEP,QAAQ,CAAC,SAAD,CAJF;EAKfQ,KAAK,EAAER,QAAQ,CAAC,OAAD,EAAUF,WAAV,CALA;EAMfW,KAAK,EAAET,QAAQ,CAAC,OAAD,EAAUF,WAAV,CANA;EAOfY,MAAM,EAAEV,QAAQ,CAAC,OAAD,EAAUF,WAAV,CAPD;EAQfa,IAAI,EAAE,CACJC,QADI,EAEJC,KAFI,EAGJC,SAHI;IAKJF,QALI;IAMJC;EANI,GAOAA,KAAK,IAAI;IACXC,SAAS,EAAElB,eAAe,CAAC;MACzBiB,KADyB;MAEzBC;IAFyB,CAAD;EADf,CAPT,CARS;EAsBfC,KAAK,EAAEf,QAAQ,CAAC,OAAD,EAAUF,WAAV,CAtBA;EAuBfkB,MAAM,EAAEhB,QAAQ,CAAC,OAAD,EAAUC,eAAV,CAvBD;EAwBfgB,OAAO,EAAEjB,QAAQ,CAAC,SAAD,CAxBF;EAyBfD;AAzBe,CAAV","names":["isNumber","createTransform","px","pxTransform","logical","toConfig","fractionalValue","value","t","borderWidths","borderStyles","colors","borders","radii","space","spaceT","prop","property","scale","transform","sizes","sizesT","shadows"],"sources":["../../../src/utils/index.ts"],"sourcesContent":["import { isNumber } from \"@chakra-ui/utils\"\nimport { createTransform, px as pxTransform } from \"../create-transform\"\nimport type { ThemeScale } from \"../css-var\"\nimport { logical, PropConfig, toConfig } from \"../prop-config\"\n\nexport * from \"./types\"\n\nfunction fractionalValue(value: any) {\n  return !isNumber(value) || value > 1 ? value : `${value * 100}%`\n}\n\nexport const t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", pxTransform),\n  space: toConfig(\"space\", pxTransform),\n  spaceT: toConfig(\"space\", pxTransform),\n  prop: (\n    property: PropConfig[\"property\"],\n    scale?: ThemeScale,\n    transform?: PropConfig[\"transform\"],\n  ) => ({\n    property,\n    scale,\n    ...(scale && {\n      transform: createTransform({\n        scale,\n        transform,\n      }),\n    }),\n  }),\n  sizes: toConfig(\"sizes\", pxTransform),\n  sizesT: toConfig(\"sizes\", fractionalValue),\n  shadows: toConfig(\"shadows\"),\n  logical,\n}\n"]},"metadata":{},"sourceType":"module"}