{"ast":null,"code":"import * as React from \"react\";\nimport ReactFocusLock from \"react-focus-lock\";\nimport { __DEV__, getAllFocusable, focus } from \"@chakra-ui/utils\";\nexport var FocusLock = props => {\n  var {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames\n  } = props;\n  var onActivation = React.useCallback(() => {\n    if (initialFocusRef != null && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef != null && contentRef.current) {\n      var focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        focus(contentRef.current, {\n          nextTick: true\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  var onDeactivation = React.useCallback(() => {\n    var _finalFocusRef$curren;\n\n    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();\n  }, [finalFocusRef]);\n  var returnFocus = restoreFocus && !finalFocusRef;\n  return /*#__PURE__*/React.createElement(ReactFocusLock, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus: persistentFocus,\n    autoFocus: autoFocus,\n    disabled: isDisabled,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation,\n    returnFocus: returnFocus\n  }, children);\n};\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\";\n}\n\nexport default FocusLock;","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACEC,OADF,EAEEC,eAFF,EAGEC,KAHF,QAKO,kBALP;AAoDA,OAAO,IAAMC,SAAmC,GAAIC,KAAD,IAAW;EAC5D,IAAM;IACJC,eADI;IAEJC,aAFI;IAGJC,UAHI;IAIJC,YAJI;IAKJC,QALI;IAMJC,UANI;IAOJC,SAPI;IAQJC,eARI;IASJC;EATI,IAUFT,KAVJ;EAYA,IAAMU,YAAY,GAAGhB,KAAK,CAACiB,WAANjB,CAAkB,MAAM;IAC3C,IAAIO,eAAJ,QAAIA,mBAAe,CAAEW,OAArB,EAA8B;MAC5BX,eAAe,CAACW,OAAhBX,CAAwBH,KAAxBG;IADF,OAEO,IAAIE,UAAJ,QAAIA,cAAU,CAAES,OAAhB,EAAyB;MAC9B,IAAMC,UAAU,GAAGhB,eAAe,CAACM,UAAU,CAACS,OAAZ,CAAlC;;MACA,IAAIC,UAAU,CAACC,MAAXD,KAAsB,CAA1B,EAA6B;QAC3Bf,KAAK,CAACK,UAAU,CAACS,OAAZ,EAAqB;UAAEG,QAAQ,EAAE;QAAZ,CAArB,CAALjB;MACD;IACF;EARkB,GASlB,CAACG,eAAD,EAAkBE,UAAlB,CATkBT,CAArB;EAWA,IAAMsB,cAAc,GAAGtB,KAAK,CAACiB,WAANjB,CAAkB,MAAM;IAAA;;IAC7CQ,aAAa,QAAbA,kDAAa,CAAEU,OAAf,2CAAwBd,KAAxB;EADqB,GAEpB,CAACI,aAAD,CAFoBR,CAAvB;EAIA,IAAMuB,WAAW,GAAGb,YAAY,IAAI,CAACF,aAArC;EAEA,oBACER,oBAACC,cAAD;IACEuB,UAAU,EAAET,qBADd;IAEED,eAAe,EAAEA,eAFnB;IAGED,SAAS,EAAEA,SAHb;IAIEY,QAAQ,EAAEb,UAJZ;IAKEI,YAAY,EAAEA,YALhB;IAMEM,cAAc,EAAEA,cANlB;IAOEC,WAAW,EAAEA;EAPf,GASGZ,QATH,CADF;AA9BK;;AA6CP,IAAIT,OAAJ,EAAa;EACXG,SAAS,CAACqB,WAAVrB,GAAwB,WAAxBA;AACD;;AAED,eAAeA,SAAf","names":["React","ReactFocusLock","__DEV__","getAllFocusable","focus","FocusLock","props","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","lockFocusAcrossFrames","onActivation","useCallback","current","focusables","length","nextTick","onDeactivation","returnFocus","crossFrame","disabled","displayName"],"sources":["../../src/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport ReactFocusLock from \"react-focus-lock\"\nimport {\n  __DEV__,\n  getAllFocusable,\n  focus,\n  FocusableElement,\n} from \"@chakra-ui/utils\"\n\nexport interface FocusLockProps {\n  /**\n   * `ref` of the element to receive focus initially\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock`\n   * unmounts\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that\n   * triggered the `FocusLock` once it unmounts\n   */\n  restoreFocus?: boolean\n  /**\n   * The component to render\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, focus trapping will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focuable element within the `children`\n   * will ne auto-focused once `FocusLock` mounts\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock.\n   * @default `false`\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active\n   * - If `false`:  allows focus to move outside of iframe\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\nexport const FocusLock: React.FC<FocusLockProps> = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames,\n  } = props\n\n  const onActivation = React.useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n      if (focusables.length === 0) {\n        focus(contentRef.current, { nextTick: true })\n      }\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = React.useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <ReactFocusLock\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </ReactFocusLock>\n  )\n}\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\"\n}\n\nexport default FocusLock\n"]},"metadata":{},"sourceType":"module"}