{"ast":null,"code":"import * as React from \"react\";\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n * @deprecated `useLatestRef` will be removed in a future version.\n */\n\nexport function useLatestRef(value) {\n  var ref = React.useRef(value);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAyBC,KAAzB,EAAmC;EACxC,IAAMC,GAAG,GAAGH,KAAK,CAACI,MAANJ,CAAaE,KAAbF,CAAZ;EAEAA,KAAK,CAACK,SAANL,CAAgB,MAAM;IACpBG,GAAG,CAACG,OAAJH,GAAcD,KAAdC;EADF,GAEG,CAACD,KAAD,CAFHF;EAIA,OAAOG,GAAP;AACD","names":["React","useLatestRef","value","ref","useRef","useEffect","current"],"sources":["../../src/use-latest-ref.ts"],"sourcesContent":["import * as React from \"react\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n * @deprecated `useLatestRef` will be removed in a future version.\n */\nexport function useLatestRef<T>(value: T) {\n  const ref = React.useRef(value)\n\n  React.useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n"]},"metadata":{},"sourceType":"module"}