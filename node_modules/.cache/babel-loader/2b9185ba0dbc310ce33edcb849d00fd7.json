{"ast":null,"code":"export var HTTPMethod;\n\n(function (HTTPMethod) {\n  HTTPMethod[\"DELETE\"] = \"DELETE\";\n  HTTPMethod[\"GET\"] = \"GET\";\n  HTTPMethod[\"HEAD\"] = \"HEAD\";\n  HTTPMethod[\"OPTIONS\"] = \"OPTIONS\";\n  HTTPMethod[\"PATCH\"] = \"PATCH\";\n  HTTPMethod[\"POST\"] = \"POST\";\n  HTTPMethod[\"PUT\"] = \"PUT\";\n  HTTPMethod[\"CONNECT\"] = \"CONNECT\";\n  HTTPMethod[\"TRACE\"] = \"TRACE\";\n})(HTTPMethod || (HTTPMethod = {})); // https://www.apollographql.com/docs/react/api/react/hoc/#optionsfetchpolicy\n\n\nexport var CachePolicies;\n\n(function (CachePolicies) {\n  /**\n   * This is the default value where we always try reading data\n   * from your cache first. If all the data needed to fulfill\n   * your query is in the cache then that data will be returned.\n   * useFetch will only fetch from the network if a cached result\n   * is not available. This fetch policy aims to minimize the number\n   * of network requests sent when rendering your component.\n   */\n  CachePolicies[\"CACHE_FIRST\"] = \"cache-first\";\n  /**\n   * This fetch policy will have useFetch first trying to read data\n   * from your cache. If all the data needed to fulfill your query\n   * is in the cache then that data will be returned. However,\n   * regardless of whether or not the full data is in your cache\n   * this fetchPolicy will always execute query with the network\n   * interface unlike cache-first which will only execute your query\n   * if the query data is not in your cache. This fetch policy optimizes\n   * for users getting a quick response while also trying to keep\n   * cached data consistent with your server data at the cost of extra\n   * network requests.\n   */\n\n  CachePolicies[\"CACHE_AND_NETWORK\"] = \"cache-and-network\";\n  /**\n   * This fetch policy will never return your initial data from the\n   * cache. Instead it will always make a request using your network\n   * interface to the server. This fetch policy optimizes for data\n   * consistency with the server, but at the cost of an instant response\n   * to the user when one is available.\n   */\n\n  CachePolicies[\"NETWORK_ONLY\"] = \"network-only\";\n  /**\n   * This fetch policy will never execute a query using your network\n   * interface. Instead it will always try reading from the cache. If the\n   * data for your query does not exist in the cache then an error will be\n   * thrown. This fetch policy allows you to only interact with data in\n   * your local client cache without making any network requests which\n   * keeps your component fast, but means your local data might not be\n   * consistent with what is on the server.\n   */\n\n  CachePolicies[\"CACHE_ONLY\"] = \"cache-only\";\n  /**\n   * This fetch policy will never return your initial data from the cache.\n   * Instead it will always make a request using your network interface to\n   * the server. Unlike the network-only policy, it also will not write\n   * any data to the cache after the query completes.\n   */\n\n  CachePolicies[\"NO_CACHE\"] = \"no-cache\";\n  CachePolicies[\"EXACT_CACHE_AND_NETWORK\"] = \"exact-cache-and-network\";\n})(CachePolicies || (CachePolicies = {}));","map":{"version":3,"names":["HTTPMethod","CachePolicies"],"sources":["/Users/santiagotonoli/Desktop/portfolio/React-TypeScript-Portfolio/node_modules/use-http/dist/esm/types.js"],"sourcesContent":["export var HTTPMethod;\n(function (HTTPMethod) {\n    HTTPMethod[\"DELETE\"] = \"DELETE\";\n    HTTPMethod[\"GET\"] = \"GET\";\n    HTTPMethod[\"HEAD\"] = \"HEAD\";\n    HTTPMethod[\"OPTIONS\"] = \"OPTIONS\";\n    HTTPMethod[\"PATCH\"] = \"PATCH\";\n    HTTPMethod[\"POST\"] = \"POST\";\n    HTTPMethod[\"PUT\"] = \"PUT\";\n    HTTPMethod[\"CONNECT\"] = \"CONNECT\";\n    HTTPMethod[\"TRACE\"] = \"TRACE\";\n})(HTTPMethod || (HTTPMethod = {}));\n// https://www.apollographql.com/docs/react/api/react/hoc/#optionsfetchpolicy\nexport var CachePolicies;\n(function (CachePolicies) {\n    /**\n     * This is the default value where we always try reading data\n     * from your cache first. If all the data needed to fulfill\n     * your query is in the cache then that data will be returned.\n     * useFetch will only fetch from the network if a cached result\n     * is not available. This fetch policy aims to minimize the number\n     * of network requests sent when rendering your component.\n     */\n    CachePolicies[\"CACHE_FIRST\"] = \"cache-first\";\n    /**\n     * This fetch policy will have useFetch first trying to read data\n     * from your cache. If all the data needed to fulfill your query\n     * is in the cache then that data will be returned. However,\n     * regardless of whether or not the full data is in your cache\n     * this fetchPolicy will always execute query with the network\n     * interface unlike cache-first which will only execute your query\n     * if the query data is not in your cache. This fetch policy optimizes\n     * for users getting a quick response while also trying to keep\n     * cached data consistent with your server data at the cost of extra\n     * network requests.\n     */\n    CachePolicies[\"CACHE_AND_NETWORK\"] = \"cache-and-network\";\n    /**\n     * This fetch policy will never return your initial data from the\n     * cache. Instead it will always make a request using your network\n     * interface to the server. This fetch policy optimizes for data\n     * consistency with the server, but at the cost of an instant response\n     * to the user when one is available.\n     */\n    CachePolicies[\"NETWORK_ONLY\"] = \"network-only\";\n    /**\n     * This fetch policy will never execute a query using your network\n     * interface. Instead it will always try reading from the cache. If the\n     * data for your query does not exist in the cache then an error will be\n     * thrown. This fetch policy allows you to only interact with data in\n     * your local client cache without making any network requests which\n     * keeps your component fast, but means your local data might not be\n     * consistent with what is on the server.\n     */\n    CachePolicies[\"CACHE_ONLY\"] = \"cache-only\";\n    /**\n     * This fetch policy will never return your initial data from the cache.\n     * Instead it will always make a request using your network interface to\n     * the server. Unlike the network-only policy, it also will not write\n     * any data to the cache after the query completes.\n     */\n    CachePolicies[\"NO_CACHE\"] = \"no-cache\";\n    CachePolicies[\"EXACT_CACHE_AND_NETWORK\"] = \"exact-cache-and-network\";\n})(CachePolicies || (CachePolicies = {}));\n"],"mappings":"AAAA,OAAO,IAAIA,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;EACnBA,UAAU,CAAC,QAAD,CAAV,GAAuB,QAAvB;EACAA,UAAU,CAAC,KAAD,CAAV,GAAoB,KAApB;EACAA,UAAU,CAAC,MAAD,CAAV,GAAqB,MAArB;EACAA,UAAU,CAAC,SAAD,CAAV,GAAwB,SAAxB;EACAA,UAAU,CAAC,OAAD,CAAV,GAAsB,OAAtB;EACAA,UAAU,CAAC,MAAD,CAAV,GAAqB,MAArB;EACAA,UAAU,CAAC,KAAD,CAAV,GAAoB,KAApB;EACAA,UAAU,CAAC,SAAD,CAAV,GAAwB,SAAxB;EACAA,UAAU,CAAC,OAAD,CAAV,GAAsB,OAAtB;AACH,CAVD,EAUGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAVb,E,CAWA;;;AACA,OAAO,IAAIC,aAAJ;;AACP,CAAC,UAAUA,aAAV,EAAyB;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,aAAa,CAAC,aAAD,CAAb,GAA+B,aAA/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,aAAa,CAAC,mBAAD,CAAb,GAAqC,mBAArC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIA,aAAa,CAAC,cAAD,CAAb,GAAgC,cAAhC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,aAAa,CAAC,YAAD,CAAb,GAA8B,YAA9B;EACA;AACJ;AACA;AACA;AACA;AACA;;EACIA,aAAa,CAAC,UAAD,CAAb,GAA4B,UAA5B;EACAA,aAAa,CAAC,yBAAD,CAAb,GAA2C,yBAA3C;AACH,CAjDD,EAiDGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAjDhB"},"metadata":{},"sourceType":"module"}