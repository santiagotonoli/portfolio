{"ast":null,"code":"/**\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\nimport { addDomEvent, isBrowser } from \"./dom\";\nexport function isMouseEvent(event) {\n  // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n  if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n    return !!(event.pointerType === \"mouse\");\n  }\n\n  return event instanceof MouseEvent;\n}\nexport function isTouchEvent(event) {\n  var hasTouches = !!event.touches;\n  return hasTouches;\n}\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\n\nfunction filterPrimaryPointer(eventHandler) {\n  return event => {\n    var isMouseEvent = event instanceof MouseEvent;\n    var isPrimaryPointer = !isMouseEvent || isMouseEvent && event.button === 0;\n\n    if (isPrimaryPointer) {\n      eventHandler(event);\n    }\n  };\n}\n\nvar defaultPagePoint = {\n  pageX: 0,\n  pageY: 0\n};\n\nfunction pointFromTouch(e, pointType) {\n  if (pointType === void 0) {\n    pointType = \"page\";\n  }\n\n  var primaryTouch = e.touches[0] || e.changedTouches[0];\n  var point = primaryTouch || defaultPagePoint;\n  return {\n    x: point[pointType + \"X\"],\n    y: point[pointType + \"Y\"]\n  };\n}\n\nfunction pointFromMouse(point, pointType) {\n  if (pointType === void 0) {\n    pointType = \"page\";\n  }\n\n  return {\n    x: point[pointType + \"X\"],\n    y: point[pointType + \"Y\"]\n  };\n}\n\nexport function extractEventInfo(event, pointType) {\n  if (pointType === void 0) {\n    pointType = \"page\";\n  }\n\n  return {\n    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)\n  };\n}\nexport function getViewportPointFromEvent(event) {\n  return extractEventInfo(event, \"client\");\n}\nexport var wrapPointerEventHandler = function wrapPointerEventHandler(handler, shouldFilterPrimaryPointer) {\n  if (shouldFilterPrimaryPointer === void 0) {\n    shouldFilterPrimaryPointer = false;\n  }\n\n  var listener = event => handler(event, extractEventInfo(event));\n\n  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;\n}; // We check for event support via functions in case they've been mocked by a testing suite.\n\nvar supportsPointerEvents = () => isBrowser && window.onpointerdown === null;\n\nvar supportsTouchEvents = () => isBrowser && window.ontouchstart === null;\n\nvar supportsMouseEvents = () => isBrowser && window.onmousedown === null;\n\nvar mouseEventNames = {\n  pointerdown: \"mousedown\",\n  pointermove: \"mousemove\",\n  pointerup: \"mouseup\",\n  pointercancel: \"mousecancel\",\n  pointerover: \"mouseover\",\n  pointerout: \"mouseout\",\n  pointerenter: \"mouseenter\",\n  pointerleave: \"mouseleave\"\n};\nvar touchEventNames = {\n  pointerdown: \"touchstart\",\n  pointermove: \"touchmove\",\n  pointerup: \"touchend\",\n  pointercancel: \"touchcancel\"\n};\nexport function getPointerEventName(name) {\n  if (supportsPointerEvents()) {\n    return name;\n  }\n\n  if (supportsTouchEvents()) {\n    return touchEventNames[name];\n  }\n\n  if (supportsMouseEvents()) {\n    return mouseEventNames[name];\n  }\n\n  return name;\n}\nexport function addPointerEvent(target, eventName, handler, options) {\n  return addDomEvent(target, getPointerEventName(eventName), wrapPointerEventHandler(handler, eventName === \"pointerdown\"), options);\n}\nexport function isMultiTouchEvent(event) {\n  return isTouchEvent(event) && event.touches.length > 1;\n}","map":{"version":3,"mappings":"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","names":["addDomEvent","isBrowser","isMouseEvent","event","PointerEvent","pointerType","MouseEvent","isTouchEvent","hasTouches","touches","filterPrimaryPointer","eventHandler","isPrimaryPointer","button","defaultPagePoint","pageX","pageY","pointFromTouch","e","pointType","primaryTouch","changedTouches","point","x","y","pointFromMouse","extractEventInfo","getViewportPointFromEvent","wrapPointerEventHandler","handler","shouldFilterPrimaryPointer","listener","supportsPointerEvents","window","onpointerdown","supportsTouchEvents","ontouchstart","supportsMouseEvents","onmousedown","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","getPointerEventName","name","addPointerEvent","target","eventName","options","isMultiTouchEvent","length"],"sources":["../../src/pointer-event.ts"],"sourcesContent":["/**\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport { addDomEvent, isBrowser } from \"./dom\"\n\ntype EventType = MouseEvent | TouchEvent | PointerEvent\ntype PointType = \"page\" | \"client\"\n\nexport function isMouseEvent(event: EventType): event is MouseEvent {\n  // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n  if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n    return !!(event.pointerType === \"mouse\")\n  }\n\n  return event instanceof MouseEvent\n}\n\nexport function isTouchEvent(event: EventType): event is TouchEvent {\n  const hasTouches = !!(event as TouchEvent).touches\n  return hasTouches\n}\n\nexport interface Point2D {\n  x: number\n  y: number\n}\n\nexport interface EventInfo {\n  point: Point2D\n}\n\nexport type EventHandler = (event: EventType, info: EventInfo) => void\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler: EventListener): EventListener {\n  return (event: Event) => {\n    const isMouseEvent = event instanceof MouseEvent\n    const isPrimaryPointer =\n      !isMouseEvent || (isMouseEvent && (event as MouseEvent).button === 0)\n    if (isPrimaryPointer) {\n      eventHandler(event)\n    }\n  }\n}\n\nexport type EventListenerWithPointInfo = (e: EventType, info: EventInfo) => void\n\nconst defaultPagePoint = { pageX: 0, pageY: 0 }\n\nfunction pointFromTouch(e: TouchEvent, pointType: PointType = \"page\") {\n  const primaryTouch = e.touches[0] || e.changedTouches[0]\n  const point = primaryTouch || defaultPagePoint\n\n  return {\n    x: point[`${pointType}X`],\n    y: point[`${pointType}Y`],\n  }\n}\n\nfunction pointFromMouse(\n  point: MouseEvent | PointerEvent,\n  pointType: PointType = \"page\",\n) {\n  return {\n    x: point[`${pointType}X`],\n    y: point[`${pointType}Y`],\n  }\n}\n\nexport function extractEventInfo(\n  event: EventType,\n  pointType: PointType = \"page\",\n): EventInfo {\n  return {\n    point: isTouchEvent(event)\n      ? pointFromTouch(event, pointType)\n      : pointFromMouse(event, pointType),\n  }\n}\n\nexport function getViewportPointFromEvent(event: EventType) {\n  return extractEventInfo(event, \"client\")\n}\n\nexport const wrapPointerEventHandler = (\n  handler: EventListenerWithPointInfo,\n  shouldFilterPrimaryPointer = false,\n): EventListener => {\n  const listener: EventListener = (event: any) =>\n    handler(event, extractEventInfo(event))\n\n  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener\n}\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nconst supportsPointerEvents = () => isBrowser && window.onpointerdown === null\nconst supportsTouchEvents = () => isBrowser && window.ontouchstart === null\nconst supportsMouseEvents = () => isBrowser && window.onmousedown === null\n\ninterface PointerNameMap {\n  pointerdown: string\n  pointermove: string\n  pointerup: string\n  pointercancel: string\n  pointerover?: string\n  pointerout?: string\n  pointerenter?: string\n  pointerleave?: string\n}\n\nconst mouseEventNames: PointerNameMap = {\n  pointerdown: \"mousedown\",\n  pointermove: \"mousemove\",\n  pointerup: \"mouseup\",\n  pointercancel: \"mousecancel\",\n  pointerover: \"mouseover\",\n  pointerout: \"mouseout\",\n  pointerenter: \"mouseenter\",\n  pointerleave: \"mouseleave\",\n}\n\nconst touchEventNames: PointerNameMap = {\n  pointerdown: \"touchstart\",\n  pointermove: \"touchmove\",\n  pointerup: \"touchend\",\n  pointercancel: \"touchcancel\",\n}\n\nexport function getPointerEventName(name: string): string {\n  if (supportsPointerEvents()) {\n    return name\n  }\n  if (supportsTouchEvents()) {\n    return touchEventNames[name]\n  }\n  if (supportsMouseEvents()) {\n    return mouseEventNames[name]\n  }\n\n  return name\n}\n\nexport function addPointerEvent(\n  target: EventTarget,\n  eventName: string,\n  handler: EventListenerWithPointInfo,\n  options?: AddEventListenerOptions,\n) {\n  return addDomEvent(\n    target,\n    getPointerEventName(eventName),\n    wrapPointerEventHandler(handler, eventName === \"pointerdown\"),\n    options,\n  )\n}\n\nexport function isMultiTouchEvent(event: EventType) {\n  return isTouchEvent(event) && event.touches.length > 1\n}\n"]},"metadata":{},"sourceType":"module"}