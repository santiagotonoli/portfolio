{"ast":null,"code":"import { isFunction, __DEV__ } from \"./assertion\";\nexport function runIfFn(valueOrFn) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;\n}\nexport function callAllHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function func(event) {\n    fns.some(fn => {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\nexport function callAll() {\n  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    fns[_key3] = arguments[_key3];\n  }\n\n  return function mergedFn(arg) {\n    fns.forEach(fn => {\n      fn == null ? void 0 : fn(arg);\n    });\n  };\n}\nexport var compose = function compose(fn1) {\n  for (var _len4 = arguments.length, fns = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    fns[_key4 - 1] = arguments[_key4];\n  }\n\n  return fns.reduce((f1, f2) => function () {\n    return f1(f2(...arguments));\n  }, fn1);\n};\nexport function once(fn) {\n  var result;\n  return function func() {\n    if (fn) {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      result = fn.apply(this, args);\n      fn = null;\n    }\n\n    return result;\n  };\n}\nexport var noop = () => {};\nexport var warn = once(options => {\n  var {\n    condition,\n    message\n  } = options;\n\n  if (condition && __DEV__) {\n    console.warn(message);\n  }\n});\nexport var error = once(options => {\n  var {\n    condition,\n    message\n  } = options;\n\n  if (condition && __DEV__) {\n    console.error(message);\n  }\n});","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,aAApC;AAGA,OAAO,SAASC,OAAT,CACLC,SADK,EAGF;EAAA,kCADAC,IACA;IADAA,IACA,UADAA,GACAC,eADAD;EACA;;EACH,OAAOJ,UAAU,CAACG,SAAD,CAAVH,GAAwBG,SAAS,CAAC,GAAGC,IAAJ,CAAjCJ,GAA6CG,SAApD;AACD;AAED,OAAO,SAASG,eAAT,GAEL;EAAA,mCADGC,GACH;IADGA,GACH,OADGA,GACHF,gBADGE;EACH;;EACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAA8C;IACnDF,GAAG,CAACG,IAAJH,CAAUI,EAAD,IAAQ;MACfA,EAAE,QAAFA,cAAE,CAAGF,KAAH,CAAFE;MACA,OAAOF,KAAP,QAAOA,GAAP,MAAOA,QAAK,CAAEG,gBAAd;IAFF;EADF;AAMD;AAED,OAAO,SAASC,OAAT,GAAmE;EAAA,mCAAxBN,GAAwB;IAAxBA,GAAwB,OAAxBA,GAAwBF,gBAAxBE;EAAwB;;EACxE,OAAO,SAASO,QAAT,CAAkBC,GAAlB,EAAgD;IACrDR,GAAG,CAACS,OAAJT,CAAaI,EAAD,IAAQ;MAClBA,EAAE,QAAFA,cAAE,CAAGI,GAAH,CAAFJ;IADF;EADF;AAKD;AAED,OAAO,IAAMM,OAAO,GAAG,SAAVA,OAAU,CACrBC,GADqB;EAAA,mCAElBX,GAFkB;IAElBA,GAFkB,WAElBA,GAFkBF,gBAElBE;EAFkB;;EAAA,OAGlBA,GAAG,CAACY,MAAJZ,CAAW,CAACa,EAAD,EAAKC,EAAL,KAAY;IAAA,OAAaD,EAAE,CAACC,EAAE,CAAC,YAAD,CAAH,CAAf;EAAvB,GAAqDH,GAArDX,CAHkB;AAAhB;AAKP,OAAO,SAASe,IAAT,CAAcX,EAAd,EAAoC;EACzC,IAAIY,MAAJ;EAEA,OAAO,SAASf,IAAT,GAAyC;IAC9C,IAAIG,EAAJ,EAAQ;MAAA,mCADyBP,IACzB;QADyBA,IACzB,OADyBA,GACzBC,gBADyBD;MACzB;;MACNmB,MAAM,GAAGZ,EAAE,CAACa,KAAHb,CAAS,IAATA,EAAeP,IAAfO,CAATY;MACAZ,EAAE,GAAG,IAALA;IACD;;IAED,OAAOY,MAAP;EANF;AAQD;AAED,OAAO,IAAME,IAAI,GAAG,MAAM,CAAnB;AAOP,OAAO,IAAMC,IAAI,GAAGJ,IAAI,CAAEK,OAAD,IAA6B;EACpD,IAAM;IAAEC,SAAF;IAAaC;EAAb,IAAyBF,OAA/B;;EACA,IAAIC,SAAS,IAAI3B,OAAjB,EAA0B;IACxB6B,OAAO,CAACJ,IAARI,CAAaD,OAAbC;EACD;AAJqB,EAAjB;AAOP,OAAO,IAAMC,KAAK,GAAGT,IAAI,CAAEK,OAAD,IAA6B;EACrD,IAAM;IAAEC,SAAF;IAAaC;EAAb,IAAyBF,OAA/B;;EACA,IAAIC,SAAS,IAAI3B,OAAjB,EAA0B;IACxB6B,OAAO,CAACC,KAARD,CAAcD,OAAdC;EACD;AAJsB,EAAlB","names":["isFunction","__DEV__","runIfFn","valueOrFn","args","arguments","callAllHandlers","fns","func","event","some","fn","defaultPrevented","callAll","mergedFn","arg","forEach","compose","fn1","reduce","f1","f2","once","result","apply","noop","warn","options","condition","message","console","error"],"sources":["../../src/function.ts"],"sourcesContent":["import { isFunction, __DEV__ } from \"./assertion\"\nimport { AnyFunction, FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...fnArgs: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function func(event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn?.(event)\n      return event?.defaultPrevented\n    })\n  }\n}\n\nexport function callAll<T extends AnyFunction>(...fns: (T | undefined)[]) {\n  return function mergedFn(arg: FunctionArguments<T>[0]) {\n    fns.forEach((fn) => {\n      fn?.(arg)\n    })\n  }\n}\n\nexport const compose = <T>(\n  fn1: (...args: T[]) => T,\n  ...fns: Array<(...args: T[]) => T>\n) => fns.reduce((f1, f2) => (...args) => f1(f2(...args)), fn1)\n\nexport function once(fn?: Function | null) {\n  let result: any\n\n  return function func(this: any, ...args: any[]) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n"]},"metadata":{},"sourceType":"module"}