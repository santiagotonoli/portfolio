{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useTheme } from \"./providers\";\nimport { omitThemingProps } from \"./system.utils\";\nexport function useChakra() {\n  var colorModeResult = useColorMode();\n  var theme = useTheme();\n  return _extends({}, colorModeResult, {\n    theme\n  });\n}\nexport function useToken(scale, token, fallback) {\n  var theme = useTheme();\n\n  if (Array.isArray(token)) {\n    var fallbackArr = [];\n\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n\n    return token.map((token, index) => {\n      var _fallbackArr$index;\n\n      var path = scale + \".\" + token;\n      return get(theme, path, (_fallbackArr$index = fallbackArr[index]) != null ? _fallbackArr$index : token);\n    });\n  }\n\n  var path = scale + \".\" + token;\n  return get(theme, path, fallback != null ? fallback : token);\n}\nexport function useProps(themeKey, props) {\n  var _theme$components, _styleConfig$defaultP;\n\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var styleConfig = props.styleConfig || ((_theme$components = theme.components) == null ? void 0 : _theme$components[themeKey]);\n  var defaultProps = (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {};\n\n  var propsWithDefault = _extends({}, defaultProps, filterUndefined(props));\n\n  var stylesRef = useRef({});\n  var mergedProps = mergeWith({}, propsWithDefault, {\n    theme,\n    colorMode\n  });\n  var memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes, _styleConfig$sizes2;\n\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes = (_styleConfig$sizes2 = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes2[mergedProps.size]) != null ? _styleConfig$sizes : {}, mergedProps);\n      var styles = mergeWith(baseStyles, sizes, variants);\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n\n    return stylesRef.current;\n  }, [styleConfig, mergedProps]);\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault)\n  };\n}","map":{"version":3,"mappings":"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","names":["useColorMode","filterUndefined","memoizedGet","get","mergeWith","runIfFn","useMemo","useRef","isEqual","useTheme","omitThemingProps","useChakra","colorModeResult","theme","useToken","scale","token","fallback","Array","isArray","fallbackArr","map","index","path","useProps","themeKey","props","colorMode","styleConfig","components","_theme$components","defaultProps","propsWithDefault","stylesRef","mergedProps","memoizedStyles","baseStyles","baseStyle","variants","_styleConfig$variants2","variant","sizes","_styleConfig$sizes2","size","styles","parts","forEach","part","isStyleEqual","current"],"sources":["../../src/hooks.ts"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nexport function useToken<T extends StringOrNumber>(\n  scale: string,\n  token: T | T[],\n  fallback?: T | T[],\n) {\n  const theme = useTheme()\n\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = []\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback]\n    }\n\n    return token.map((token, index) => {\n      const path = `${scale}.${token}`\n      return get(theme, path, fallbackArr[index] ?? token)\n    })\n  }\n\n  const path = `${scale}.${token}`\n  return get(theme, path, fallback ?? token)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = mergeWith({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}