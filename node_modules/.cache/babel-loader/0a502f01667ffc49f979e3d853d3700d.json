{"ast":null,"code":"import { useRef, useMemo, createElement, useEffect, cloneElement } from 'react';\nimport { render } from 'react-dom';\nimport { VisuallyHidden } from '@reach/visually-hidden';\nimport { forwardRefWithAs, useForkedRef, usePrevious, getOwnerDocument } from '@reach/utils';\nimport PropTypes from 'prop-types';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/*\r\n * Singleton state is fine because you don't server render\r\n * an alert (SRs don't read them on first load anyway)\r\n */\n\n\nvar keys = {\n  polite: -1,\n  assertive: -1\n};\nvar elements = {\n  polite: {},\n  assertive: {}\n};\nvar liveRegions = {\n  polite: null,\n  assertive: null\n};\nvar renderTimer; ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Alert\r\n *\r\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\r\n * messages when network events or other things happen. Users with assistive\r\n * technologies may not know about the message unless you develop for it.\r\n *\r\n * @see Docs https://reach.tech/alert\r\n */\n\nvar Alert = /*#__PURE__*/forwardRefWithAs(function Alert(_ref, forwardedRef) {\n  var _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"div\" : _ref$as,\n      children = _ref.children,\n      _ref$type = _ref.type,\n      regionType = _ref$type === void 0 ? \"polite\" : _ref$type,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"children\", \"type\"]);\n\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef);\n  var child = useMemo(function () {\n    return createElement(Comp, Object.assign({}, props, {\n      ref: ref,\n      \"data-reach-alert\": true\n    }), children);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [children, props]);\n  useMirrorEffects(regionType, child, ownRef);\n  return child;\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: /*#__PURE__*/PropTypes.oneOf([\"assertive\", \"polite\"])\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nfunction createMirror(type, doc) {\n  var key = ++keys[type];\n\n  var mount = function mount(element) {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      var node = doc.createElement(\"div\");\n      node.setAttribute(\"data-reach-live-\" + type, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]);\n      mount(element);\n    }\n  };\n\n  var update = function update(element) {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  var unmount = function unmount() {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount\n  };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n\n  renderTimer = window.setTimeout(function () {\n    Object.keys(elements).forEach(function (elementType) {\n      var regionType = elementType;\n      var container = liveRegions[regionType];\n\n      if (container) {\n        render(createElement(VisuallyHidden, {\n          as: \"div\"\n        }, createElement(\"div\", {\n          // The status role is a type of live region and a container whose\n          // content is advisory information for the user that is not\n          // important enough to justify an alert, and is often presented as\n          // a status bar. When the role is added to an element, the browser\n          // will send out an accessible status event to assistive\n          // technology products which can then notify the user about it.\n          // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n          role: regionType === \"assertive\" ? \"alert\" : \"status\",\n          \"aria-live\": regionType\n        }, Object.keys(elements[regionType]).map(function (key) {\n          return cloneElement(elements[regionType][key], {\n            key: key,\n            ref: null\n          });\n        }))), liveRegions[regionType]);\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(regionType, element, ref) {\n  var prevType = usePrevious(regionType);\n  var mirror = useRef(null);\n  var mounted = useRef(false);\n  useEffect(function () {\n    var ownerDocument = getOwnerDocument(ref.current);\n\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== regionType) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n  }, [element, regionType, prevType, ref]);\n  useEffect(function () {\n    return function () {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\nexport default Alert;\nexport { Alert };","map":{"version":3,"mappings":"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","names":["keys","polite","assertive","elements","liveRegions","renderTimer","Alert","forwardRefWithAs","forwardedRef","as","Comp","_ref$as","children","type","regionType","_ref$type","props","ownRef","React","ref","useForkedRef","child","useMirrorEffects","displayName","propTypes","PropTypes","node","oneOf","createMirror","doc","key","mount","element","renderAlerts","createElement","setAttribute","body","appendChild","update","unmount","window","clearTimeout","setTimeout","Object","forEach","elementType","container","ReactDOM","VisuallyHidden","role","map","prevType","usePrevious","mirror","mounted","ownerDocument","getOwnerDocument","current"],"sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert!\n *\n * An alert is an element that displays a brief, important message in a way that\n * attracts the user's attention without interrupting the user's task.\n * Dynamically rendered alerts are automatically announced by most screen\n * readers, and in some operating systems, they may trigger an alert sound.\n *\n * The approach here is to allow developers to render a visual <Alert> and then\n * we mirror that to a couple of aria-live regions behind the scenes. This way,\n * most of the time, developers don't have to think about visual vs. aria\n * alerts.\n *\n * Limitations: Developers can't read from context inside of an Alert because\n * we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n * brand new React roots. We could use createPortal but then apps would need to\n * render the entire app tree in an <AlertProvider>, or maybe there's a way\n * with default context to do it, but we haven't explored that yet. So, we'll\n * see how this goes. If it becomes a problem we can introduce a portal later.\n *\n * @see Docs     https://reach.tech/alert\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/alert\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { VisuallyHidden } from \"@reach/visually-hidden\";\nimport {\n  forwardRefWithAs,\n  getOwnerDocument,\n  usePrevious,\n  useForkedRef,\n} from \"@reach/utils\";\nimport PropTypes from \"prop-types\";\n\n/*\n * Singleton state is fine because you don't server render\n * an alert (SRs don't read them on first load anyway)\n */\nlet keys: RegionKeys = {\n  polite: -1,\n  assertive: -1,\n};\n\nlet elements: ElementTypes = {\n  polite: {},\n  assertive: {},\n};\n\nlet liveRegions: RegionElements = {\n  polite: null,\n  assertive: null,\n};\n\nlet renderTimer: number | null;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Alert\n *\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\n * messages when network events or other things happen. Users with assistive\n * technologies may not know about the message unless you develop for it.\n *\n * @see Docs https://reach.tech/alert\n */\nconst Alert = forwardRefWithAs<AlertProps, \"div\">(function Alert(\n  { as: Comp = \"div\", children, type: regionType = \"polite\", ...props },\n  forwardedRef\n) {\n  const ownRef = React.useRef<HTMLDivElement>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const child = React.useMemo(\n    () => (\n      <Comp {...props} ref={ref} data-reach-alert>\n        {children}\n      </Comp>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [children, props]\n  );\n  useMirrorEffects(regionType, child, ownRef);\n\n  return child;\n});\n\n/**\n * @see Docs https://reach.tech/alert#alert-props\n */\ntype AlertProps = {\n  /**\n   * Controls whether the assistive technology should read immediately\n   * (\"assertive\") or wait until the user is idle (\"polite\").\n   *\n   * @see Docs https://reach.tech/alert#alert-type\n   */\n  type?: \"assertive\" | \"polite\";\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: PropTypes.oneOf([\"assertive\", \"polite\"]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createMirror(type: \"polite\" | \"assertive\", doc: Document): Mirror {\n  let key = ++keys[type];\n\n  let mount = (element: JSX.Element) => {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      let node = doc.createElement(\"div\");\n      node.setAttribute(`data-reach-live-${type}`, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]!);\n      mount(element);\n    }\n  };\n\n  let update = (element: JSX.Element) => {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  let unmount = () => {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return { mount, update, unmount };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n  renderTimer = window.setTimeout(() => {\n    Object.keys(elements).forEach((elementType) => {\n      let regionType: RegionTypes = elementType as RegionTypes;\n      let container = liveRegions[regionType]!;\n      if (container) {\n        ReactDOM.render(\n          <VisuallyHidden as=\"div\">\n            <div\n              // The status role is a type of live region and a container whose\n              // content is advisory information for the user that is not\n              // important enough to justify an alert, and is often presented as\n              // a status bar. When the role is added to an element, the browser\n              // will send out an accessible status event to assistive\n              // technology products which can then notify the user about it.\n              // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n              role={regionType === \"assertive\" ? \"alert\" : \"status\"}\n              aria-live={regionType}\n            >\n              {Object.keys(elements[regionType]).map((key) =>\n                React.cloneElement(elements[regionType][key], {\n                  key,\n                  ref: null,\n                })\n              )}\n            </div>\n          </VisuallyHidden>,\n          liveRegions[regionType]\n        );\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(\n  regionType: RegionTypes,\n  element: JSX.Element,\n  ref: React.RefObject<Element>\n) {\n  const prevType = usePrevious<RegionTypes>(regionType);\n  const mirror = React.useRef<Mirror | null>(null);\n  const mounted = React.useRef(false);\n  React.useEffect(() => {\n    const ownerDocument = getOwnerDocument(ref.current)!;\n\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== regionType) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n  }, [element, regionType, prevType, ref]);\n\n  React.useEffect(() => {\n    return () => {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype Mirror = {\n  mount: (element: JSX.Element) => void;\n  update: (element: JSX.Element) => void;\n  unmount: () => void;\n};\n\ntype RegionTypes = \"polite\" | \"assertive\";\n\ntype ElementTypes = {\n  [key in RegionTypes]: {\n    [key: string]: JSX.Element;\n  };\n};\n\ntype RegionElements<T extends HTMLElement = HTMLDivElement> = {\n  [key in RegionTypes]: T | null;\n};\n\ntype RegionKeys = {\n  [key in RegionTypes]: number;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { AlertProps };\nexport { Alert };\nexport default Alert;\n"]},"metadata":{},"sourceType":"module"}