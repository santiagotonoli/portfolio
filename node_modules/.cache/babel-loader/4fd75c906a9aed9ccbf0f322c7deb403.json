{"ast":null,"code":"import * as React from \"react\";\nimport { isFunction } from \"./assertion\";\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\n\nexport function createContext(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name\n  } = options;\n  var Context = /*#__PURE__*/React.createContext(undefined);\n  Context.displayName = name;\n\n  function useContext() {\n    var context = React.useContext(Context);\n\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\n\nexport function getValidChildren(children) {\n  return React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child));\n}\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\n\nexport function assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\n\nexport function mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return value => {\n    refs.forEach(ref => assignRef(ref, value));\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAoBA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAoCC,OAApC,EAAwE;EAAA,IAApCA,OAAoC;IAApCA,OAAoC,GAAJ,EAAhCA;EAAoC;;EAC7E,IAAM;IACJC,MAAM,GAAG,IADL;IAEJC,YAAY,GAAG,4FAFX;IAGJC;EAHI,IAIFH,OAJJ;EAMA,IAAMI,OAAO,gBAAGP,KAAK,CAACE,aAANF,CAA6CQ,SAA7CR,CAAhB;EAEAO,OAAO,CAACE,WAARF,GAAsBD,IAAtBC;;EAEA,SAASG,UAAT,GAAsB;IACpB,IAAMC,OAAO,GAAGX,KAAK,CAACU,UAANV,CAAiBO,OAAjBP,CAAhB;;IAEA,IAAI,CAACW,OAAD,IAAYP,MAAhB,EAAwB;MACtB,MAAM,IAAIQ,KAAJ,CAAUP,YAAV,CAAN;IACD;;IAED,OAAOM,OAAP;EACD;;EAED,OAAO,CACLJ,OAAO,CAACM,QADH,EAELH,UAFK,EAGLH,OAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,gBAAT,CAA0BC,QAA1B,EAAqD;EAC1D,OAAOf,KAAK,CAACgB,QAANhB,CAAeiB,OAAfjB,CAAuBe,QAAvBf,EAAiCkB,MAAjClB,CAAyCmB,KAAD,iBAC7CnB,KAAK,CAACoB,cAANpB,CAAqBmB,KAArBnB,CADKA,CAAP;AAGD;AAID;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqB,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;EACzE,IAAID,GAAG,IAAI,IAAX,EAAiB;;EAEjB,IAAIrB,UAAU,CAACqB,GAAD,CAAd,EAAqB;IACnBA,GAAG,CAACC,KAAD,CAAHD;IACA;EACD;;EAED,IAAI;IACF;IACAA,GAAG,CAACE,OAAJF,GAAcC,KAAdD;EAFF,EAGE,OAAOG,KAAP,EAAc;IACd,MAAM,IAAIb,KAAJ,2BAAkCW,KAAlC,kBAAoDD,GAApD,OAAN;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,SAAT,GAA4D;EAAA,kCAAnCC,IAAmC;IAAnCA,IAAmC,MAAnCA,GAAmCC,eAAnCD;EAAmC;;EACjE,OAAQJ,KAAD,IAAc;IACnBI,IAAI,CAACE,OAALF,CAAcL,GAAD,IAASD,SAAS,CAACC,GAAD,EAAMC,KAAN,CAA/BI;EADF;AAGD","names":["React","isFunction","createContext","options","strict","errorMessage","name","Context","undefined","displayName","useContext","context","Error","Provider","getValidChildren","children","Children","toArray","filter","child","isValidElement","assignRef","ref","value","current","error","mergeRefs","refs","arguments","forEach"],"sources":["../../src/react-helpers.ts"],"sourcesContent":["import * as React from \"react\"\nimport { isFunction } from \"./assertion\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      throw new Error(errorMessage)\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (value: T) => {\n    refs.forEach((ref) => assignRef(ref, value))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}