{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, dataAttr, mergeRefs, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\n\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovered] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [checkedState, setCheckedState] = useState(!!defaultChecked);\n  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChange]);\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    var notInSync = ref.current.checked !== isChecked;\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked);\n    }\n  }, [ref.current]);\n\n  var getCheckboxProps = function getCheckboxProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = event => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    } // This is a workaround for React Concurrent Mode issue https://github.com/facebook/react/issues/18591. Remove once it's fixed.\n\n\n    var focus = () => {\n      if (typeof ReactDOM.flushSync === \"function\") {\n        ;\n        ReactDOM.flushSync(() => {\n          setFocused.on();\n        });\n      } else {\n        setFocused.on();\n      }\n    };\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, focus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  };\n\n  var getLabelProps = function getLabelProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["useBoolean","useControllableProp","useSafeLayoutEffect","callAllHandlers","dataAttr","mergeRefs","warn","visuallyHiddenStyle","useCallback","useRef","useState","ReactDOM","useCheckbox","props","defaultIsChecked","defaultChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovered","isActive","setActive","ref","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","focus","flushSync","type","onBlur","onFocus","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"sources":["../../src/use-checkbox.ts"],"sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const notInSync = ref.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(ref.current.checked)\n    }\n  }, [ref.current])\n\n  const getCheckboxProps: PropGetter = (props = {}, forwardedRef = null) => {\n    const onPressDown = (event: React.MouseEvent) => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault()\n      setActive.on()\n    }\n\n    return {\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n    }\n  }\n\n  const getInputProps: PropGetter = (props = {}, forwardedRef = null) => {\n    // This is a workaround for React Concurrent Mode issue https://github.com/facebook/react/issues/18591. Remove once it's fixed.\n    const focus = () => {\n      if (typeof (ReactDOM as any).flushSync === \"function\") {\n        ;(ReactDOM as any).flushSync(() => {\n          setFocused.on()\n        })\n      } else {\n        setFocused.on()\n      }\n    }\n\n    return {\n      ...props,\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, focus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle,\n    }\n  }\n\n  const getLabelProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: forwardedRef,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"]},"metadata":{},"sourceType":"module"}