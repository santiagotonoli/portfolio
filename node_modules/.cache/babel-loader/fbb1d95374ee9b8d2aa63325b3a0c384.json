{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__, dataAttr } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar StyledControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar StyledContainer = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\n\nexport var Checkbox = /*#__PURE__*/forwardRef((props, ref) => {\n  var group = useCheckboxGroupContext();\n\n  var mergedProps = _extends({}, group, props);\n\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n\n  var {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon: Icon = /*#__PURE__*/React.createElement(CheckboxIcon, null),\n    isChecked: isCheckedProp,\n    onChange: onChangeProp\n  } = ownProps,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"onChange\"]);\n\n  var isChecked = isCheckedProp;\n\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  var onChange = onChangeProp;\n\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps\n  } = useCheckbox(_extends({}, rest, {\n    isChecked,\n    onChange\n  }));\n\n  var _className = cx(\"chakra-checkbox\", className);\n\n  var inputProps = getInputProps({}, ref);\n  var labelProps = getLabelProps();\n  var checkboxProps = getCheckboxProps();\n\n  var iconStyles = _extends({\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    fontSize: iconSize,\n    color: iconColor\n  }, styles.icon);\n\n  var clonedIcon = /*#__PURE__*/React.cloneElement(Icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(StyledContainer, _extends({\n    __css: styles.container,\n    \"data-disabled\": dataAttr(state.isDisabled),\n    className: _className\n  }, htmlProps), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(StyledControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, checkboxProps), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-checkbox__label\"\n  }, labelProps, {\n    __css: _extends({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","dataAttr","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","StyledControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","StyledContainer","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","Icon","isChecked","isCheckedProp","onChange","onChangeProp","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","htmlProps","_className","inputProps","labelProps","checkboxProps","iconStyles","opacity","isIndeterminate","transform","transition","fontSize","color","clonedIcon","cloneElement","__css","container","isDisabled","control","span","marginStart","label","displayName"],"sources":["../../src/checkbox.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__, dataAttr } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst StyledControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst StyledContainer = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype Omitted =\n  | \"size\"\n  | \"checked\"\n  | \"defaultChecked\"\n  | \"onChange\"\n  | \"onBlur\"\n  | \"value\"\n\ntype StyledControlProps = Omit<HTMLChakraProps<\"div\">, Omitted>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends StyledControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon: Icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useCheckbox({\n    ...rest,\n    isChecked,\n    onChange,\n  })\n\n  const _className = cx(\"chakra-checkbox\", className)\n\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n  const checkboxProps = getCheckboxProps()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform:\n      state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon,\n  }\n\n  const clonedIcon = React.cloneElement(Icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <StyledContainer\n      __css={styles.container}\n      data-disabled={dataAttr(state.isDisabled)}\n      className={_className}\n      {...htmlProps}\n    >\n      <input className=\"chakra-checkbox__input\" {...inputProps} />\n      <StyledControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...checkboxProps}\n      >\n        {clonedIcon}\n      </StyledControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...labelProps}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </StyledContainer>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"]},"metadata":{},"sourceType":"module"}