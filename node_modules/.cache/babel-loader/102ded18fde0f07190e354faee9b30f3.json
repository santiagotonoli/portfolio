{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlContext } from \"./form-control\";\nexport function useFieldLabel(props) {\n  var _props$id, _props$htmlFor;\n\n  var field = useFormControlContext();\n  return _extends({}, props, {\n    \"data-focus\": dataAttr(field == null ? void 0 : field.isFocused),\n    \"data-disabled\": dataAttr(field == null ? void 0 : field.isDisabled),\n    \"data-invalid\": dataAttr(field == null ? void 0 : field.isInvalid),\n    \"data-readonly\": dataAttr(field == null ? void 0 : field.isReadOnly),\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.labelId,\n    htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : field == null ? void 0 : field.id\n  });\n}\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\n\nexport var FormLabel = /*#__PURE__*/forwardRef((passedProps, ref) => {\n  var styles = useStyleConfig(\"FormLabel\", passedProps);\n  var props = omitThemingProps(passedProps);\n\n  var {\n    children,\n    requiredIndicator = /*#__PURE__*/React.createElement(RequiredIndicator, null)\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"requiredIndicator\"]);\n\n  var ownProps = useFieldLabel(rest);\n  var field = useFormControlContext();\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    ref: ref,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"start\"\n    }, styles)\n  }, ownProps), children, field != null && field.isRequired ? requiredIndicator : null);\n});\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\n\n\nexport var RequiredIndicator = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field != null && field.isRequired)) return null;\n\n  var _className = cx(\"chakra-form__required-indicator\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    ref: ref\n  }, rest, {\n    __css: styles.requiredIndicator,\n    className: _className\n  }), children || \"*\");\n});\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","useStyles","cx","dataAttr","__DEV__","React","useFormControlContext","useFieldLabel","props","field","isFocused","isDisabled","isInvalid","isReadOnly","id","labelId","htmlFor","FormLabel","passedProps","ref","styles","children","requiredIndicator","RequiredIndicator","rest","ownProps","label","className","__css","display","textAlign","isRequired","displayName","_className","span","role"],"sources":["../../src/form-label.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, Dict, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport function useFieldLabel(props: Dict) {\n  const field = useFormControlContext()\n  return {\n    ...props,\n    \"data-focus\": dataAttr(field?.isFocused),\n    \"data-disabled\": dataAttr(field?.isDisabled),\n    \"data-invalid\": dataAttr(field?.isInvalid),\n    \"data-readonly\": dataAttr(field?.isReadOnly),\n    id: props.id ?? field?.labelId,\n    htmlFor: props.htmlFor ?? field?.id,\n  }\n}\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(\n  (passedProps, ref) => {\n    const styles = useStyleConfig(\"FormLabel\", passedProps)\n    const props = omitThemingProps(passedProps)\n\n    const {\n      className,\n      children,\n      requiredIndicator = <RequiredIndicator />,\n      ...rest\n    } = props\n\n    const ownProps = useFieldLabel(rest)\n    const field = useFormControlContext()\n\n    return (\n      <chakra.label\n        ref={ref}\n        className={cx(\"chakra-form__label\", props.className)}\n        __css={{\n          display: \"block\",\n          textAlign: \"start\",\n          ...styles,\n        }}\n        {...ownProps}\n      >\n        {children}\n        {field?.isRequired ? requiredIndicator : null}\n      </chakra.label>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  (props, ref) => {\n    const { children, className, ...rest } = props\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const _className = cx(\"chakra-form__required-indicator\", className)\n\n    return (\n      <chakra.span\n        role=\"presentation\"\n        aria-hidden\n        ref={ref}\n        {...rest}\n        __css={styles.requiredIndicator}\n        className={_className}\n      >\n        {children || \"*\"}\n      </chakra.span>\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n"]},"metadata":{},"sourceType":"module"}