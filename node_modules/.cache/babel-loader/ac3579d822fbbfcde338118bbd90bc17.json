{"ast":null,"code":"import { getValueAsType, getDefaultValueType } from '../../dom/utils/value-types.js';\nimport { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\n\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate) {\n  var _a;\n\n  var style = state.style,\n      vars = state.vars,\n      transform = state.transform,\n      transformKeys = state.transformKeys,\n      transformOrigin = state.transformOrigin; // Empty the transformKeys array. As we're throwing out refs to its items\n  // this might not be as cheap as suspected. Maybe using the array as a buffer\n  // with a manual incrementation would be better.\n\n  transformKeys.length = 0; // Track whether we encounter any transform or transformOrigin values.\n\n  var hasTransform = false;\n  var hasTransformOrigin = false; // Does the calculated transform essentially equal \"none\"?\n\n  var transformIsNone = true;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept seperately for further processing.\n   */\n\n  for (var key in latestValues) {\n    var value = latestValues[key];\n    /**\n     * If this is a CSS variable we don't do any further processing.\n     */\n\n    if (isCSSVariable(key)) {\n      vars[key] = value;\n      continue;\n    } // Convert the value to its default value type, ie 0 -> \"0px\"\n\n\n    var valueType = getDefaultValueType(key);\n    var valueAsType = getValueAsType(value, valueType);\n\n    if (isTransformProp(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key); // If we already know we have a non-default transform, early return\n\n      if (!transformIsNone) continue; // Otherwise check to see if this is a default transform\n\n      if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;\n    } else if (isTransformOriginProp(key)) {\n      transformOrigin[key] = valueAsType; // If this is a transform origin, flag and enable further transform-origin processing\n\n      hasTransformOrigin = true;\n    } else {\n      /**\n       * If layout projection is on, and we need to perform scale correction for this\n       * value type, perform it.\n       */\n      if (layoutState && projection && layoutState.isHydrated && valueScaleCorrection[key]) {\n        var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n        /**\n         * Scale-correctable values can define a number of other values to break\n         * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\n         */\n\n        var applyTo = valueScaleCorrection[key].applyTo;\n\n        if (applyTo) {\n          var num = applyTo.length;\n\n          for (var i = 0; i < num; i++) {\n            style[applyTo[i]] = correctedValue;\n          }\n        } else {\n          style[key] = correctedValue;\n        }\n      } else {\n        style[key] = valueAsType;\n      }\n    }\n  }\n\n  if (layoutState && projection && projection.isEnabled && layoutState.isHydrated) {\n    style.transform = buildLayoutProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n\n    if (transformTemplate) {\n      style.transform = transformTemplate(transform, style.transform);\n    }\n\n    style.transformOrigin = buildLayoutProjectionTransformOrigin(layoutState);\n  } else {\n    if (hasTransform) {\n      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    }\n\n    if (hasTransformOrigin) {\n      style.transformOrigin = buildTransformOrigin(transformOrigin);\n    }\n  }\n}\n\nexport { buildHTMLStyles };","map":{"version":3,"names":["getValueAsType","getDefaultValueType","valueScaleCorrection","isTransformProp","isTransformOriginProp","buildLayoutProjectionTransform","buildLayoutProjectionTransformOrigin","buildTransform","buildTransformOrigin","isCSSVariable","buildHTMLStyles","state","latestValues","projection","layoutState","options","transformTemplate","_a","style","vars","transform","transformKeys","transformOrigin","length","hasTransform","hasTransformOrigin","transformIsNone","key","value","valueType","valueAsType","push","default","isHydrated","correctedValue","process","applyTo","num","i","isEnabled","deltaFinal","treeScale","undefined"],"sources":["/Users/santiagotonoli/Desktop/Portfolio/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js"],"sourcesContent":["import { getValueAsType, getDefaultValueType } from '../../dom/utils/value-types.js';\nimport { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\n\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate) {\n    var _a;\n    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;\n    // Empty the transformKeys array. As we're throwing out refs to its items\n    // this might not be as cheap as suspected. Maybe using the array as a buffer\n    // with a manual incrementation would be better.\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    var hasTransform = false;\n    var hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    var transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (var key in latestValues) {\n        var value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        var valueType = getDefaultValueType(key);\n        var valueAsType = getValueAsType(value, valueType);\n        if (isTransformProp(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))\n                transformIsNone = false;\n        }\n        else if (isTransformOriginProp(key)) {\n            transformOrigin[key] = valueAsType;\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n        }\n        else {\n            /**\n             * If layout projection is on, and we need to perform scale correction for this\n             * value type, perform it.\n             */\n            if (layoutState &&\n                projection &&\n                layoutState.isHydrated &&\n                valueScaleCorrection[key]) {\n                var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n                /**\n                 * Scale-correctable values can define a number of other values to break\n                 * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\n                 */\n                var applyTo = valueScaleCorrection[key].applyTo;\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        style[applyTo[i]] = correctedValue;\n                    }\n                }\n                else {\n                    style[key] = correctedValue;\n                }\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (layoutState &&\n        projection &&\n        projection.isEnabled &&\n        layoutState.isHydrated) {\n        style.transform = buildLayoutProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n        if (transformTemplate) {\n            style.transform = transformTemplate(transform, style.transform);\n        }\n        style.transformOrigin = buildLayoutProjectionTransformOrigin(layoutState);\n    }\n    else {\n        if (hasTransform) {\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n        }\n        if (hasTransformOrigin) {\n            style.transformOrigin = buildTransformOrigin(transformOrigin);\n        }\n    }\n}\n\nexport { buildHTMLStyles };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}