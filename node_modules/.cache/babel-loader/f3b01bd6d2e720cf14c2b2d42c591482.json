{"ast":null,"code":"import { useControllableProp } from \"@chakra-ui/hooks\";\nimport { countDecimalPlaces, clampValue, maxSafeInteger, minSafeInteger, toPrecision } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nexport function useCounter(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true\n  } = props;\n  var [valueState, setValue] = useState(() => {\n    if (defaultValue == null) return \"\";\n    return cast(defaultValue, stepProp, precisionProp);\n  });\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  var precision = precisionProp != null ? precisionProp : decimalPlaces;\n  var update = useCallback(next => {\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n\n    onChange == null ? void 0 : onChange(next.toString(), parse(next));\n  }, [onChange, isControlled]); // Function to clamp the value and round it to the precision\n\n  var clamp = useCallback(value => {\n    var nextValue = value;\n\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    var next;\n    /**\n     * Let's follow the native browser behavior for\n     * scenarios where the input starts empty (\"\")\n     */\n\n    if (value === \"\") {\n      /**\n       * If `min` is set, native input, starts at the `min`.\n       * Else, it starts at `step`\n       */\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    var next; // Same thing here. We'll follow native implementation\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var reset = useCallback(() => {\n    var next;\n\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp);\n    }\n\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update]);\n  var castValue = useCallback(value => {\n    update(cast(value, stepProp, precision));\n  }, [precision, stepProp, update]);\n  var valueAsNumber = parse(value);\n  /**\n   * Common range checks\n   */\n\n  var isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  var isAtMax = valueAsNumber === max;\n  var isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue\n  };\n}\n\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\n\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\n\nfunction cast(value, step, precision) {\n  var decimalPlaces = getDecimalPlaces(parse(value), step);\n  return toPrecision(parse(value), precision != null ? precision : decimalPlaces);\n}","map":{"version":3,"mappings":"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","names":["useControllableProp","countDecimalPlaces","clampValue","maxSafeInteger","minSafeInteger","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","max","keepWithinRange","valueState","setValue","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math"],"sources":["../../src/use-counter.ts"],"sourcesContent":["import { useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  countDecimalPlaces,\n  clampValue,\n  maxSafeInteger,\n  minSafeInteger,\n  toPrecision,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: StringOrNumber\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default -Infinity\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Infinity\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true,\n  } = props\n\n  const [valueState, setValue] = useState<StringOrNumber>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp)\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: StringOrNumber) => {\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChange?.(next.toString(), parse(next))\n    },\n    [onChange, isControlled],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: StringOrNumber\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp)\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update])\n\n  const castValue = useCallback(\n    (value: StringOrNumber) => {\n      update(cast(value, stepProp, precision))\n    },\n    [precision, stepProp, update],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: StringOrNumber) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: StringOrNumber, step: number, precision?: number) {\n  const decimalPlaces = getDecimalPlaces(parse(value), step)\n  return toPrecision(parse(value), precision ?? decimalPlaces)\n}\n"]},"metadata":{},"sourceType":"module"}