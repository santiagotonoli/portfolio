{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { isInputEvent, mergeRefs } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * React hook to manage a group of radio inputs\n */\n\nexport function useRadioGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"value\", \"defaultValue\", \"name\", \"isNative\"]);\n\n  var [valueState, setValue] = React.useState(defaultValue || \"\");\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var ref = React.useRef(null);\n  var focus = React.useCallback(() => {\n    var rootNode = ref.current;\n    if (!rootNode) return;\n    var query = \"input:not(:disabled):checked\";\n    var firstEnabledAndCheckedInput = rootNode.querySelector(query);\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n\n    query = \"input:not(:disabled)\";\n    var firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  /**\n   * All radio options must use the same name\n   */\n\n  var fallbackName = useId(undefined, \"radio\");\n  var name = nameProp || fallbackName;\n  var onChange = React.useCallback(eventOrValue => {\n    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  var getRootProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    });\n  }, []);\n  var getRadioProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, {\n      ref,\n      name,\n      [checkedKey]: value != null ? props.value === value : undefined,\n      onChange\n    });\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps\n  };\n}","map":{"version":3,"mappings":"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","names":["useControllableProp","useId","isInputEvent","mergeRefs","React","useRadioGroup","props","onChange","onChangeProp","value","valueProp","defaultValue","name","nameProp","isNative","htmlProps","valueState","setValue","useState","isControlled","ref","useRef","focus","useCallback","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","fallbackName","undefined","eventOrValue","nextValue","target","String","getRootProps","forwardedRef","role","getRadioProps","checkedKey"],"sources":["../../src/use-radio-group.ts"],"sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport {\n  isInputEvent,\n  mergeRefs,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\ntype RadioPropGetter = PropGetter<\n  HTMLInputElement,\n  { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"size\" | \"value\"\n  >\n>\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = React.useState<StringOrNumber>(\n    defaultValue || \"\",\n  )\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = React.useRef<any>(null)\n\n  const focus = React.useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = React.useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: RadioPropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"]},"metadata":{},"sourceType":"module"}