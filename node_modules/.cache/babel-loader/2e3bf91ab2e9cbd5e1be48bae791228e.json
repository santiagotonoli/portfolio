{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\";\nimport { useNumberInput } from \"./use-number-input\";\n/**\n * React context used to communicate between components\n */\n\nvar [NumberInputProvider, useNumberInputContext] = createContext({\n  name: \"NumberInputContext\",\n  errorMessage: \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\"\n});\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\n\nexport var NumberInput = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"NumberInput\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useNumberInput = useNumberInput(ownProps),\n      {\n    htmlProps\n  } = _useNumberInput,\n      context = _objectWithoutPropertiesLoose(_useNumberInput, [\"htmlProps\"]);\n\n  var ctx = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(NumberInputProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    __css: _extends({\n      position: \"relative\",\n      zIndex: 0\n    }, styles.root)\n  }))));\n});\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\";\n}\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\n\n\nexport var NumberInputStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    \"aria-hidden\": true,\n    ref: ref\n  }, props, {\n    __css: _extends({\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"absolute\",\n      top: \"0\",\n      insetEnd: \"0px\",\n      margin: \"1px\",\n      height: \"calc(100% - 2px)\",\n      zIndex: 1\n    }, styles.stepperGroup)\n  }));\n});\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\";\n}\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\n\n\nexport var NumberInputField = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInputProps\n  } = useNumberInputContext();\n  var input = getInputProps(props, ref);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {\n    __css: _extends({\n      width: \"100%\"\n    }, styles.field)\n  }));\n});\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\";\n}\n\nexport var StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\"\n  }\n});\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\n\nexport var NumberDecrementStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$children;\n\n  var styles = useStyles();\n  var {\n    getDecrementButtonProps\n  } = useNumberInputContext();\n  var decrement = getDecrementButtonProps(props, ref);\n  return /*#__PURE__*/React.createElement(StyledStepper, _extends({}, decrement, {\n    __css: styles.stepper\n  }), (_props$children = props.children) != null ? _props$children : /*#__PURE__*/React.createElement(TriangleDownIcon, null));\n});\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\";\n}\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\n\n\nexport var NumberIncrementStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$children2;\n\n  var {\n    getIncrementButtonProps\n  } = useNumberInputContext();\n  var increment = getIncrementButtonProps(props, ref);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledStepper, _extends({}, increment, {\n    __css: styles.stepper\n  }), (_props$children2 = props.children) != null ? _props$children2 : /*#__PURE__*/React.createElement(TriangleUpIcon, null));\n});\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","__DEV__","React","TriangleDownIcon","TriangleUpIcon","useNumberInput","NumberInputProvider","useNumberInputContext","name","errorMessage","NumberInput","props","ref","styles","ownProps","htmlProps","_useNumberInput","context","ctx","useMemo","value","div","__css","position","zIndex","root","displayName","NumberInputStepper","display","flexDirection","top","insetEnd","margin","height","stepperGroup","NumberInputField","getInputProps","input","width","field","StyledStepper","baseStyle","justifyContent","alignItems","flex","transition","userSelect","cursor","lineHeight","NumberDecrementStepper","getDecrementButtonProps","decrement","stepper","children","NumberIncrementStepper","getIncrementButtonProps","increment"],"sources":["../../src/number-input.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [\n  NumberInputProvider,\n  useNumberInputContext,\n] = createContext<NumberInputContext>({\n  name: \"NumberInputContext\",\n  errorMessage:\n    \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n})\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps<\"NumberInput\">,\n    InputOptions,\n    Omit<HTMLChakraProps<\"div\">, keyof UseNumberInputProps> {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"NumberInput\", props)\n  const ownProps = omitThemingProps(props)\n\n  const { htmlProps, ...context } = useNumberInput(ownProps)\n  const ctx = React.useMemo(() => context, [context])\n\n  return (\n    <NumberInputProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          __css={{\n            position: \"relative\",\n            zIndex: 0,\n            ...styles.root,\n          }}\n        />\n      </StylesProvider>\n    </NumberInputProvider>\n  )\n})\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\"\n}\n\nexport interface NumberInputStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          insetEnd: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\"\n}\n\nexport interface NumberInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\"\n}\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const styles = useStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n}\n\nexport interface NumberIncrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n}\n"]},"metadata":{},"sourceType":"module"}