{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nexport { useFormControlContext };\n\nfunction useFormControlProvider(props) {\n  var {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isReadOnly\"]); // Generate all the required ids\n\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  var [hasFeedbackText, setHasFeedbackText] = useBoolean();\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  var [hasHelpText, setHasHelpText] = useBoolean(); // Track whether the form element (e.g, `input`) has focus.\n\n  var [isFocused, setFocus] = useBoolean();\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps\n  };\n  return context;\n}\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\n\n\nexport var FormControl = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n      {\n    htmlProps\n  } = _useFormControlProvid,\n      context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"htmlProps\"]);\n\n  var _className = cx(\"chakra-form-control\", props.className);\n\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"group\",\n    ref: ref\n  }, htmlProps, {\n    className: _className,\n    __css: {\n      width: \"100%\",\n      position: \"relative\"\n    }\n  }))));\n});\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\n\n\nexport var FormHelperText = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$id;\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  /**\n   * Notify the field context when the help text is rendered on screen,\n   * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n   */\n\n  useSafeLayoutEffect(() => {\n    field == null ? void 0 : field.setHasHelpText.on();\n    return () => field == null ? void 0 : field.setHasHelpText.off();\n  }, []);\n\n  var _className = cx(\"chakra-form__helper-text\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles.helperText\n  }, props, {\n    className: _className,\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.helpTextId\n  }));\n});\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}","map":{"version":3,"mappings":"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","names":["useBoolean","useId","useSafeLayoutEffect","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","cx","__DEV__","React","FormControlProvider","useFormControlContext","strict","name","useFormControlProvider","props","id","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","context","onFocus","on","onBlur","off","FormControl","ref","styles","ownProps","_useFormControlProvid","_className","className","value","div","role","__css","width","position","displayName","FormHelperText","field","helperText"],"sources":["../../src/form-control.tsx"],"sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useBoolean()\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n  const _className = cx(\"chakra-form-control\", props.className)\n\n  return (\n    <FormControlProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"group\"\n          ref={ref}\n          {...htmlProps}\n          className={_className}\n          __css={{\n            width: \"100%\",\n            position: \"relative\",\n          }}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n\n  /**\n   * Notify the field context when the help text is rendered on screen,\n   * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n   */\n  useSafeLayoutEffect(() => {\n    field?.setHasHelpText.on()\n    return () => field?.setHasHelpText.off()\n  }, [])\n\n  const _className = cx(\"chakra-form__helper-text\", props.className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={styles.helperText}\n      {...props}\n      className={_className}\n      id={props.id ?? field?.helpTextId}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"]},"metadata":{},"sourceType":"module"}