{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var Switch = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n  var ownProps = omitThemingProps(props);\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    htmlProps\n  } = useCheckbox(ownProps);\n  var inputProps = getInputProps({}, ref);\n  var checkboxProps = getCheckboxProps();\n  var labelStyles = {\n    display: \"inline-block\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\"\n  };\n\n  var trackStyles = _extends({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, htmlProps, {\n    className: cx(\"chakra-switch\", props.className),\n    __css: labelStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-switch__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(chakra.span, _extends({}, checkboxProps, {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })));\n});\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,QAA8C,qBAA9C;AACA,SACEC,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAMEC,mBANF,QAQO,mBARP;AASA,SAASC,EAAT,EAAaC,QAAb,EAAuBC,OAAvB,QAAsC,kBAAtC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AASA,OAAO,IAAMC,MAAM,gBAAGP,UAAU,CAAuB,CAACQ,KAAD,EAAQC,GAAR,KAAgB;EACrE,IAAMC,MAAM,GAAGR,mBAAmB,CAAC,QAAD,EAAWM,KAAX,CAAlC;EAEA,IAAMG,QAAQ,GAAGV,gBAAgB,CAACO,KAAD,CAAjC;EACA,IAAM;IAAEI,KAAF;IAASC,aAAT;IAAwBC,gBAAxB;IAA0CC;EAA1C,IAAwDjB,WAAW,CACvEa,QADuE,CAAzE;EAIA,IAAMK,UAAU,GAAGH,aAAa,CAAC,EAAD,EAAKJ,GAAL,CAAhC;EACA,IAAMQ,aAAa,GAAGH,gBAAgB,EAAtC;EAEA,IAAMI,WAA8B,GAAG;IACrCC,OAAO,EAAE,cAD4B;IAErCC,aAAa,EAAE,QAFsB;IAGrCC,UAAU,EAAE;EAHyB,CAAvC;;EAMA,IAAMC,WAA8B;IAClCH,OAAO,EAAE,aADyB;IAElCI,UAAU,EAAE,CAFsB;IAGlCC,cAAc,EAAE,YAHkB;IAIlCC,SAAS,EAAE,aAJuB;IAKlCC,MAAM,EAAE;EAL0B,GAM/BhB,MAAM,CAACiB,KANwB,CAApC;;EASA,oBACErB,oBAACP,MAAD,CAAQ6B,KAAR,eACMb,SADN;IAEEc,SAAS,EAAE1B,EAAE,CAAC,eAAD,EAAkBK,KAAK,CAACqB,SAAxB,CAFf;IAGEC,KAAK,EAAEZ;EAHT,iBAKEZ;IAAOuB,SAAS,EAAC;EAAjB,GAA4Cb,UAA5C,EALF,eAMEV,oBAACP,MAAD,CAAQgC,IAAR,eACMd,aADN;IAEEY,SAAS,EAAC,sBAFZ;IAGEC,KAAK,EAAER;EAHT,iBAKEhB,oBAACP,MAAD,CAAQgC,IAAR;IACED,KAAK,EAAEpB,MAAM,CAACsB,KADhB;IAEEH,SAAS,EAAC,sBAFZ;IAGE,gBAAczB,QAAQ,CAACQ,KAAK,CAACqB,SAAP,CAHxB;IAIE,cAAY7B,QAAQ,CAACQ,KAAK,CAACsB,SAAP;EAJtB,EALF,CANF,CADF;AA1B8B,EAAzB;;AAiDP,IAAI7B,OAAJ,EAAa;EACXE,MAAM,CAAC4B,WAAP5B,GAAqB,QAArBA;AACD","names":["useCheckbox","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","dataAttr","__DEV__","React","Switch","props","ref","styles","ownProps","state","getInputProps","getCheckboxProps","htmlProps","inputProps","checkboxProps","labelStyles","display","verticalAlign","lineHeight","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","label","className","__css","span","thumb","isChecked","isHovered","displayName"],"sources":["../../src/switch.tsx"],"sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"defaultChecked\" | \"checked\" | \"onChange\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, Omitted>,\n    ThemingProps<\"Switch\"> {}\n\nexport const Switch = forwardRef<SwitchProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { state, getInputProps, getCheckboxProps, htmlProps } = useCheckbox(\n    ownProps,\n  )\n\n  const inputProps = getInputProps({}, ref)\n  const checkboxProps = getCheckboxProps()\n\n  const labelStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\",\n  }\n\n  const trackStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.label\n      {...htmlProps}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={labelStyles}\n    >\n      <input className=\"chakra-switch__input\" {...inputProps} />\n      <chakra.span\n        {...checkboxProps}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          data-checked={dataAttr(state.isChecked)}\n          data-hover={dataAttr(state.isHovered)}\n        />\n      </chakra.span>\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\"\n}\n"]},"metadata":{},"sourceType":"module"}