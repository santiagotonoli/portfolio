{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { addItem, callAllHandlers, createContext, dataAttr, focus, getNextIndex, getNextItemFromSearch, getPrevIndex, getValidChildren, isArray, isString, mergeRefs, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\nexport { MenuProvider, useMenuContext };\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\n\nexport function useMenu(props) {\n  var {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    placement = \"bottom-start\"\n  } = props;\n  var {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure(props);\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    ref: menuRef,\n    handler: event => {\n      var _buttonRef$current;\n\n      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({\n    placement\n  }, props));\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  /**\n   * Context to register all menu item nodes\n   */\n\n  var domContext = useDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var [buttonId, menuId] = useIds(id, \"menu-button\", \"menu-list\");\n  var openAndFocusMenu = React.useCallback(() => {\n    onOpen();\n    focus(menuRef.current, {\n      nextTick: true\n    });\n  }, [onOpen, menuRef]);\n  var openAndFocusFirstItem = React.useCallback(() => {\n    onOpen();\n    setFocusedIndex(0);\n  }, [onOpen, setFocusedIndex]);\n  var openAndFocusLastItem = React.useCallback(() => {\n    onOpen();\n    setFocusedIndex(domContext.descendants.length - 1);\n  }, [onOpen, setFocusedIndex, domContext.descendants]);\n  var refocus = React.useCallback(() => {\n    var _menuRef$current, _domContext$descendan;\n\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(document.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var el = (_domContext$descendan = domContext.descendants[focusedIndex]) == null ? void 0 : _domContext$descendan.element;\n    el == null ? void 0 : el.focus({\n      preventScroll: true\n    });\n  }, [isOpen, focusedIndex, domContext.descendants]);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy\n  };\n}\nexport function useMenuButton(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu\n  } = menu;\n  var onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n\n  var buttonProps = _extends({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return buttonProps;\n}\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuList(props, ref) {\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n\n  var {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    domContext: {\n      descendants\n    },\n    isLazy\n  } = menu;\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var onCharacterPress = useShortcut({\n    preventDefault: event => event.key !== \" \"\n  });\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: event => {\n        event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: () => {\n        var nextIndex = getNextIndex(focusedIndex, descendants.length);\n        setFocusedIndex(nextIndex);\n      },\n      ArrowUp: () => {\n        var prevIndex = getPrevIndex(focusedIndex, descendants.length);\n        setFocusedIndex(prevIndex);\n      }\n    };\n    var fn = keyMap[eventKey];\n\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n\n    var characterHandler = onCharacterPress(character => {\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      var nextItem = getNextItemFromSearch(descendants, character, node => {\n        var _node$element;\n\n        return ((_node$element = node.element) == null ? void 0 : _node$element.textContent) || \"\";\n      }, descendants[focusedIndex]);\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem);\n        setFocusedIndex(index);\n      }\n    });\n    characterHandler(event);\n  }, [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex]);\n  return _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return _extends({}, props, {\n    ref: popper.popperRef,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }\n  });\n}\nexport function useMenuItem(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\"]);\n\n  var menu = useMenuContext();\n  var {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef,\n    isOpen\n  } = menu;\n  var ref = React.useRef(null);\n  var id = \"menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var onMouseEnter = React.useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n\n    if (document.activeElement !== ref.current) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    /**\n     * Close menu and parent menu's if `closeOnSelect` is set to `true`\n     */\n\n    if (closeOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true\n      });\n    } else if (document.activeElement !== menuRef.current) {\n      var _menuRef$current2;\n\n      (_menuRef$current2 = menuRef.current) == null ? void 0 : _menuRef$current2.focus();\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return _extends({}, htmlProps, tabbable, {\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nexport function useMenuOption(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"onClick\", \"isDisabled\", \"isFocusable\", \"type\", \"isChecked\"]);\n\n  var hookProps = {\n    isDisabled,\n    isFocusable,\n    onClick\n  };\n  var optionsProps = useMenuItem(hookProps, externalRef);\n  return _extends({}, rest, optionsProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\nexport function useMenuOptionGroup(props) {\n  var {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  var onChange = React.useCallback(selectedValue => {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(child => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = event => {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}","map":{"version":3,"mappings":"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","names":["useClickable","useDescendant","useDescendants","useControllableState","useDisclosure","useFocusOnHide","useId","useIds","useOutsideClick","useShortcut","useUpdateEffect","usePopper","addItem","callAllHandlers","createContext","dataAttr","focus","getNextIndex","getNextItemFromSearch","getPrevIndex","getValidChildren","isArray","isString","mergeRefs","normalizeEventKey","removeItem","React","MenuProvider","useMenuContext","strict","name","useMenu","props","id","closeOnSelect","closeOnBlur","autoSelect","isLazy","placement","isOpen","onOpen","onClose","onToggle","menuRef","useRef","buttonRef","ref","handler","event","current","_buttonRef$current","contains","target","popper","focusedIndex","setFocusedIndex","useState","domContext","focusRef","visible","shouldFocus","buttonId","menuId","openAndFocusMenu","useCallback","nextTick","openAndFocusFirstItem","openAndFocusLastItem","descendants","length","refocus","hasFocusWithin","_menuRef$current","document","activeElement","shouldRefocus","el","_domContext$descendan","element","preventScroll","onTransitionEnd","forceUpdate","orientation","useMenuButton","externalRef","menu","onClick","action","onKeyDown","eventKey","keyMap","Enter","ArrowDown","ArrowUp","preventDefault","stopPropagation","buttonProps","referenceRef","useMenuList","Error","onCharacterPress","key","Tab","Escape","nextIndex","prevIndex","fn","characterHandler","character","nextItem","node","textContent","index","indexOf","children","tabIndex","role","style","transformOrigin","useMenuPositioner","popperRef","visibility","useMenuItem","onMouseEnter","onMouseEnterProp","onMouseMove","onMouseMoveProp","onMouseLeave","onMouseLeaveProp","onClickProp","isDisabled","isFocusable","htmlProps","context","disabled","focusable","isFocused","trulyDisabled","tabbable","useMenuOption","type","isChecked","rest","hookProps","optionsProps","useMenuOptionGroup","value","valueProp","defaultValue","onChange","onChangeProp","isRadio","fallback","setValue","selectedValue","nextValue","includes","validChildren","clones","map","child","cloneElement","useMenuState"],"sources":["../../src/use-menu.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  UseDisclosureProps,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  dataAttr,\n  EventKeyMap,\n  focus,\n  getNextIndex,\n  getNextItemFromSearch,\n  getPrevIndex,\n  getValidChildren,\n  isArray,\n  isString,\n  mergeRefs,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst [MenuProvider, useMenuContext] = createContext<UseMenuReturn>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\nexport { MenuProvider, useMenuContext }\n\nexport interface UseMenuProps extends UsePopperProps, UseDisclosureProps {\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    placement = \"bottom-start\",\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure(props)\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    ref: menuRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        closeOnBlur &&\n        !buttonRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    placement,\n    ...props,\n  })\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const domContext = useDescendants<HTMLDivElement, {}>()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = React.useCallback(() => {\n    onOpen()\n    focus(menuRef.current, { nextTick: true })\n  }, [onOpen, menuRef])\n\n  const openAndFocusFirstItem = React.useCallback(() => {\n    onOpen()\n    setFocusedIndex(0)\n  }, [onOpen, setFocusedIndex])\n\n  const openAndFocusLastItem = React.useCallback(() => {\n    onOpen()\n    setFocusedIndex(domContext.descendants.length - 1)\n  }, [onOpen, setFocusedIndex, domContext.descendants])\n\n  const refocus = React.useCallback(() => {\n    const hasFocusWithin = menuRef.current?.contains(document.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const el = domContext.descendants[focusedIndex]?.element\n    el?.focus({ preventScroll: true })\n  }, [isOpen, focusedIndex, domContext.descendants])\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuButton(\n  props: UseMenuButtonProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  const buttonProps = {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return buttonProps\n}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuList(\n  props: UseMenuListProps,\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    domContext: { descendants },\n    isLazy,\n  } = menu\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const onCharacterPress = useShortcut({\n    preventDefault: (event) => event.key !== \" \",\n  })\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => {\n          event.preventDefault()\n        },\n        Escape: onClose,\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(focusedIndex, descendants.length)\n          setFocusedIndex(nextIndex)\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(focusedIndex, descendants.length)\n          setFocusedIndex(prevIndex)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      const characterHandler = onCharacterPress((character) => {\n        /**\n         * Typeahead: Based on current character pressed,\n         * find the next item to be selected\n         */\n        const nextItem = getNextItemFromSearch(\n          descendants,\n          character,\n          (node) => node.element?.textContent || \"\",\n          descendants[focusedIndex],\n        )\n\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem)\n          setFocusedIndex(index)\n        }\n      })\n\n      characterHandler(event)\n    },\n    [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return {\n    ...props,\n    ref: popper.popperRef,\n    style: { visibility: isOpen ? \"visible\" : \"hidden\" },\n  }\n}\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {\n  isDisabled?: boolean\n  isFocusable?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n  } = menu\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const id = `menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const onMouseEnter = React.useCallback(\n    (event) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = React.useCallback(\n    (event) => {\n      onMouseMoveProp?.(event)\n      if (document.activeElement !== ref.current) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = React.useCallback(\n    (event) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      /**\n       * Close menu and parent menu's if `closeOnSelect` is set to `true`\n       */\n      if (closeOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, { nextTick: true })\n    } else if (document.activeElement !== menuRef.current) {\n      menuRef.current?.focus()\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...tabbable,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props\n\n  const hookProps = { isDisabled, isFocusable, onClick }\n  const optionsProps = useMenuItem(hookProps, externalRef)\n\n  return {\n    ...rest,\n    ...optionsProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = React.useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}