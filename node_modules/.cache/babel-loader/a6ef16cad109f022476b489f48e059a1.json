{"ast":null,"code":"import { __assign, __spread } from 'tslib';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { pipe } from 'popmotion';\nimport sync, { cancelSync } from 'framesync';\nimport { copyAxisBox } from '../utils/geometry/index.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-transform.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\n\nvar visualElement = function (_a) {\n  var _b = _a.treeType,\n      treeType = _b === void 0 ? \"\" : _b,\n      build = _a.build,\n      getBaseTarget = _a.getBaseTarget,\n      makeTargetAnimatable = _a.makeTargetAnimatable,\n      measureViewportBox = _a.measureViewportBox,\n      renderInstance = _a.render,\n      readValueFromInstance = _a.readValueFromInstance,\n      resetTransform = _a.resetTransform,\n      restoreTransform = _a.restoreTransform,\n      removeValueFromRenderState = _a.removeValueFromRenderState,\n      sortNodePosition = _a.sortNodePosition,\n      scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n  return function (_a, options) {\n    var parent = _a.parent,\n        props = _a.props,\n        presenceId = _a.presenceId,\n        blockInitialAnimation = _a.blockInitialAnimation,\n        visualState = _a.visualState;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n    var instance;\n    /**\n     * A set of all children of this visual element. We use this to traverse\n     * the tree when updating layout projections.\n     */\n\n    var children = new Set();\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender and onViewportBoxUpdate.\n     */\n\n    var lifecycles = createLifecycles();\n    /**\n     *\n     */\n\n    var projection = createProjectionState();\n    /**\n     * This is a reference to the visual state of the \"lead\" visual element.\n     * Usually, this will be this visual element. But if it shares a layoutId\n     * with other visual elements, only one of them will be designated lead by\n     * AnimateSharedLayout. All the other visual elements will take on the visual\n     * appearance of the lead while they crossfade to it.\n     */\n\n    var leadProjection = projection;\n    var leadLatestValues = latestValues;\n    var unsubscribeFromLeadVisualElement;\n    /**\n     * The latest layout measurements and calculated projections. This\n     * is seperate from the target projection data in visualState as\n     * many visual elements might point to the same piece of visualState as\n     * a target, whereas they might each have different layouts and thus\n     * projection calculations needed to project into the same viewport box.\n     */\n\n    var layoutState = createLayoutState();\n    /**\n     *\n     */\n\n    var crossfader;\n    /**\n     * Keep track of whether the viewport box has been updated since the\n     * last time the layout projection was re-calculated.\n     */\n\n    var hasViewportBoxUpdated = false;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    var values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    var valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    var prevMotionValues = {};\n    /**\n     * x/y motion values that track the progress of initiated layout\n     * animations.\n     *\n     * TODO: Target for removal\n     */\n\n    var projectionTargetProgress;\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    var baseTarget = __assign({}, latestValues); // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n\n    var removeFromMotionTree;\n    var removeFromVariantTree;\n    /**\n     *\n     */\n\n    function isProjecting() {\n      return projection.isEnabled && layoutState.isHydrated;\n    }\n    /**\n     *\n     */\n\n\n    function render() {\n      if (!instance) return;\n\n      if (isProjecting()) {\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its actual layout\n         * into the desired bounding box.\n         */\n\n        updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n      }\n\n      triggerBuild();\n      renderInstance(instance, renderState);\n    }\n\n    function triggerBuild() {\n      var valuesToRender = latestValues;\n\n      if (crossfader && crossfader.isActive()) {\n        var crossfadedValues = crossfader.getCrossfadeState(element);\n        if (crossfadedValues) valuesToRender = crossfadedValues;\n      }\n\n      build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n\n    function updateLayoutProjection() {\n      var delta = layoutState.delta,\n          treeScale = layoutState.treeScale;\n      var prevTreeScaleX = treeScale.x;\n      var prevTreeScaleY = treeScale.x;\n      var prevDeltaTransform = layoutState.deltaTransform;\n      updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n      hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta);\n      hasViewportBoxUpdated = false;\n      var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n\n      if (deltaTransform !== prevDeltaTransform || // Also compare calculated treeScale, for values that rely on this only for scale correction\n      prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {\n        element.scheduleRender();\n      }\n\n      layoutState.deltaTransform = deltaTransform;\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    var initialMotionValues = scrapeMotionValuesFromProps(props);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    var isControllingVariants = checkIfControllingVariants(props);\n    var isVariantNode = checkIfVariantNode(props);\n\n    var element = __assign(__assign({\n      treeType: treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n\n      /**\n       * An ancestor path back to the root visual element. This is used\n       * by layout projection to quickly recurse back up the tree.\n       */\n      path: parent ? __spread(parent.path, [parent]) : [],\n\n      /**\n       *\n       */\n      presenceId: presenceId,\n      projection: projection,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by AnimateSharedLayout, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation: blockInitialAnimation,\n\n      /**\n       * A boolean that can be used to determine whether to respect hover events.\n       * For layout measurements we often have to reposition the instance by\n       * removing its transform. This can trigger hover events, which is\n       * undesired.\n       */\n      isHoverEventsEnabled: true,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: function () {\n        return Boolean(instance);\n      },\n      mount: function (newInstance) {\n        instance = element.current = newInstance;\n        element.pointTo(element);\n        removeFromMotionTree = parent === null || parent === void 0 ? void 0 : parent.addChild(element);\n\n        if (isVariantNode && parent && !isControllingVariants) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n      },\n\n      /**\n       *\n       */\n      unmount: function () {\n        cancelSync.update(update);\n        cancelSync.render(render);\n        cancelSync.preRender(element.updateLayoutProjection);\n        valueSubscriptions.forEach(function (remove) {\n          return remove();\n        });\n        element.stopLayoutAnimation();\n        removeFromMotionTree === null || removeFromMotionTree === void 0 ? void 0 : removeFromMotionTree();\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        lifecycles.clearAllListeners();\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addChild: function (child) {\n        children.add(child);\n        return function () {\n          return children.delete(child);\n        };\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild: function (child) {\n        var _a;\n\n        var closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function (other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: function () {\n        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n\n      /**\n       * A method that schedules an update to layout projections throughout\n       * the tree. We inherit from the parent so there's only ever one\n       * job scheduled on the next frame - that of the root visual element.\n       */\n      scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function () {\n        return sync.preRender(element.updateLayoutProjection, false, true);\n      },\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: function () {\n        return props.layoutId;\n      },\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: function () {\n        return instance;\n      },\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: function (key) {\n        return latestValues[key];\n      },\n      setStaticValue: function (key, value) {\n        return latestValues[key] = value;\n      },\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: function () {\n        return latestValues;\n      },\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility: function (visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable: function (target, canMutate) {\n        if (canMutate === void 0) {\n          canMutate = true;\n        }\n\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\n       * Temporarily suspend hover events while we remove transforms in order to measure the layout.\n       *\n       * This seems like an odd bit of scheduling but what we're doing is saying after\n       * the next render, wait 10 milliseconds before reenabling hover events. Waiting until\n       * the next frame results in missed, valid hover events. But triggering on the postRender\n       * frame is too soon to avoid triggering events with layout measurements.\n       *\n       * Note: If we figure out a way of measuring layout while transforms remain applied, this can be removed.\n       */\n      suspendHoverEvents: function () {\n        element.isHoverEventsEnabled = false;\n        sync.postRender(function () {\n          return setTimeout(function () {\n            return element.isHoverEventsEnabled = true;\n          }, 10);\n        });\n      },\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue: function (key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue: function (key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: function (key) {\n        return values.has(key);\n      },\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue: function (key, defaultValue) {\n        var value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: function (callback) {\n        return values.forEach(callback);\n      },\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: function (key) {\n        var _a;\n\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget: function (key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget: function (key) {\n        if (getBaseTarget) {\n          var target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      }\n    }, lifecycles), {\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build: function () {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender: function () {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps: function (newProps) {\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function () {\n        return props;\n      },\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: function (name) {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: function () {\n        return props.transition;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext: function (startAtParent) {\n        if (startAtParent === void 0) {\n          startAtParent = false;\n        }\n\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants) {\n          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context_1.initial = props.initial;\n          }\n\n          return context_1;\n        }\n\n        var context = {};\n\n        for (var i = 0; i < numVariantProps; i++) {\n          var name_1 = variantProps[i];\n          var prop = props[name_1];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name_1] = prop;\n          }\n        }\n\n        return context;\n      },\n      // Layout projection ==============================\n\n      /**\n       * Enable layout projection for this visual element. Won't actually\n       * occur until we also have hydrated layout measurements.\n       */\n      enableLayoutProjection: function () {\n        projection.isEnabled = true;\n      },\n\n      /**\n       * Lock the projection target, for instance when dragging, so\n       * nothing else can try and animate it.\n       */\n      lockProjectionTarget: function () {\n        projection.isTargetLocked = true;\n      },\n      unlockProjectionTarget: function () {\n        element.stopLayoutAnimation();\n        projection.isTargetLocked = false;\n      },\n\n      /**\n       * Record the viewport box as it was before an expected mutation/re-render\n       */\n      snapshotViewportBox: function () {\n        // TODO: Store this snapshot in LayoutState\n        element.prevViewportBox = element.measureViewportBox(false);\n        /**\n         * Update targetBox to match the prevViewportBox. This is just to ensure\n         * that targetBox is affected by scroll in the same way as the measured box\n         */\n\n        element.rebaseProjectionTarget(false, element.prevViewportBox);\n      },\n      getLayoutState: function () {\n        return layoutState;\n      },\n      setCrossfader: function (newCrossfader) {\n        crossfader = newCrossfader;\n      },\n\n      /**\n       * Start a layout animation on a given axis.\n       * TODO: This could be better.\n       */\n      startLayoutAnimation: function (axis, transition) {\n        var progress = element.getProjectionAnimationProgress()[axis];\n        var _a = projection.target[axis],\n            min = _a.min,\n            max = _a.max;\n        var length = max - min;\n        progress.clearListeners();\n        progress.set(min);\n        progress.set(min); // Set twice to hard-reset velocity\n\n        progress.onChange(function (v) {\n          return element.setProjectionTargetAxis(axis, v, v + length);\n        });\n        return element.animateMotionValue(axis, progress, 0, transition);\n      },\n\n      /**\n       * Stop layout animations.\n       */\n      stopLayoutAnimation: function () {\n        eachAxis(function (axis) {\n          return element.getProjectionAnimationProgress()[axis].stop();\n        });\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox: function (withTransform) {\n        if (withTransform === void 0) {\n          withTransform = true;\n        }\n\n        var viewportBox = measureViewportBox(instance, options);\n        if (!withTransform) removeBoxTransforms(viewportBox, latestValues);\n        return viewportBox;\n      },\n\n      /**\n       * Update the layoutState by measuring the DOM layout. This\n       * should be called after resetting any layout-affecting transforms.\n       */\n      updateLayoutMeasurement: function () {\n        element.notifyBeforeLayoutMeasure(layoutState.layout);\n        layoutState.isHydrated = true;\n        layoutState.layout = element.measureViewportBox();\n        layoutState.layoutCorrected = copyAxisBox(layoutState.layout);\n        element.notifyLayoutMeasure(layoutState.layout, element.prevViewportBox || layoutState.layout);\n        sync.update(function () {\n          return element.rebaseProjectionTarget();\n        });\n      },\n\n      /**\n       * Get the motion values tracking the layout animations on each\n       * axis. Lazy init if not already created.\n       */\n      getProjectionAnimationProgress: function () {\n        projectionTargetProgress || (projectionTargetProgress = {\n          x: motionValue(0),\n          y: motionValue(0)\n        });\n        return projectionTargetProgress;\n      },\n\n      /**\n       * Update the projection of a single axis. Schedule an update to\n       * the tree layout projection.\n       */\n      setProjectionTargetAxis: function (axis, min, max) {\n        var target = projection.target[axis];\n        target.min = min;\n        target.max = max; // Flag that we want to fire the onViewportBoxUpdate event handler\n\n        hasViewportBoxUpdated = true;\n        lifecycles.notifySetAxisTarget();\n      },\n\n      /**\n       * Rebase the projection target on top of the provided viewport box\n       * or the measured layout. This ensures that non-animating elements\n       * don't fall out of sync differences in measurements vs projections\n       * after a page scroll or other relayout.\n       */\n      rebaseProjectionTarget: function (force, box) {\n        if (box === void 0) {\n          box = layoutState.layout;\n        }\n\n        var _a = element.getProjectionAnimationProgress(),\n            x = _a.x,\n            y = _a.y;\n\n        var shouldRebase = !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();\n\n        if (force || shouldRebase) {\n          eachAxis(function (axis) {\n            var _a = box[axis],\n                min = _a.min,\n                max = _a.max;\n            element.setProjectionTargetAxis(axis, min, max);\n          });\n        }\n      },\n\n      /**\n       * Notify the visual element that its layout is up-to-date.\n       * Currently Animate.tsx uses this to check whether a layout animation\n       * needs to be performed.\n       */\n      notifyLayoutReady: function (config) {\n        element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n      },\n\n      /**\n       * Temporarily reset the transform of the instance.\n       */\n      resetTransform: function () {\n        return resetTransform(element, instance, props);\n      },\n\n      /**\n       * Perform the callback after temporarily unapplying the transform\n       * upwards through the tree.\n       */\n      withoutTransform: function (callback) {\n        var isEnabled = projection.isEnabled;\n        isEnabled && element.resetTransform();\n        parent ? parent.withoutTransform(callback) : callback();\n        isEnabled && restoreTransform(instance, renderState);\n      },\n      updateLayoutProjection: function () {\n        isProjecting() && updateLayoutProjection();\n        children.forEach(fireUpdateLayoutProjection);\n      },\n\n      /**\n       *\n       */\n      pointTo: function (newLead) {\n        leadProjection = newLead.projection;\n        leadLatestValues = newLead.getLatestValues();\n        /**\n         * Subscribe to lead component's layout animations\n         */\n\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n          var _a;\n\n          if (element.isPresent) {\n            element.presence = Presence.Present;\n          } else {\n            (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n          }\n        }));\n      },\n      // TODO: Clean this up\n      isPresent: true,\n      presence: Presence.Entering\n    });\n\n    return element;\n  };\n};\n\nfunction fireUpdateLayoutProjection(child) {\n  child.updateLayoutProjection();\n}\n\nvar variantProps = __spread([\"initial\"], variantPriorityOrder);\n\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["__assign","__spread","Presence","checkIfControllingVariants","checkIfVariantNode","isVariantLabel","pipe","sync","cancelSync","copyAxisBox","eachAxis","updateBoxDelta","motionValue","variantPriorityOrder","isMotionValue","createLayoutState","createProjectionState","buildLayoutProjectionTransform","removeBoxTransforms","applyBoxTransforms","createLifecycles","updateMotionValuesFromProps","updateLayoutDeltas","visualElement","_a","_b","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","resetTransform","restoreTransform","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","options","parent","props","presenceId","blockInitialAnimation","visualState","latestValues","renderState","instance","children","Set","lifecycles","projection","leadProjection","leadLatestValues","unsubscribeFromLeadVisualElement","layoutState","crossfader","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","projectionTargetProgress","baseTarget","removeFromMotionTree","removeFromVariantTree","isProjecting","isEnabled","isHydrated","targetFinal","target","deltaFinal","layoutCorrected","triggerBuild","valuesToRender","isActive","crossfadedValues","getCrossfadeState","element","update","notifyUpdate","updateLayoutProjection","delta","treeScale","prevTreeScaleX","x","prevTreeScaleY","prevDeltaTransform","deltaTransform","path","notifyViewportBoxUpdate","y","scheduleRender","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","set","initialMotionValues","undefined","isControllingVariants","isVariantNode","current","depth","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","isMounted","isHoverEventsEnabled","mount","newInstance","pointTo","addChild","addVariantChild","unmount","preRender","forEach","remove","stopLayoutAnimation","clearAllListeners","child","add","delete","closestVariantNode","getClosestVariantNode","other","getInstance","scheduleUpdateLayoutProjection","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","setVisibility","visibility","canMutate","suspendHoverEvents","postRender","setTimeout","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","setProps","newProps","updatePropListeners","getProps","getVariant","name","variants","getDefaultTransition","transition","getVariantContext","startAtParent","context_1","initial","context","i","numVariantProps","name_1","variantProps","prop","enableLayoutProjection","lockProjectionTarget","isTargetLocked","unlockProjectionTarget","snapshotViewportBox","prevViewportBox","rebaseProjectionTarget","getLayoutState","setCrossfader","newCrossfader","startLayoutAnimation","axis","progress","getProjectionAnimationProgress","min","max","length","clearListeners","v","setProjectionTargetAxis","animateMotionValue","stop","withTransform","viewportBox","updateLayoutMeasurement","notifyBeforeLayoutMeasure","layout","notifyLayoutMeasure","notifySetAxisTarget","force","box","shouldRebase","isAnimating","notifyLayoutReady","config","notifyLayoutUpdate","withoutTransform","fireUpdateLayoutProjection","newLead","onSetAxisTarget","onLayoutAnimationComplete","isPresent","presence","Present","layoutSafeToRemove","call","Entering"],"sources":["/Users/santiagotonoli/Desktop/Portfolio/node_modules/framer-motion/dist/es/render/index.js"],"sourcesContent":["import { __assign, __spread } from 'tslib';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { pipe } from 'popmotion';\nimport sync, { cancelSync } from 'framesync';\nimport { copyAxisBox } from '../utils/geometry/index.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-transform.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * A set of all children of this visual element. We use this to traverse\n         * the tree when updating layout projections.\n         */\n        var children = new Set();\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromMotionTree;\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function isProjecting() {\n            return projection.isEnabled && layoutState.isHydrated;\n        }\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (isProjecting()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.x;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spread(parent.path, [parent]) : [], \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * A boolean that can be used to determine whether to respect hover events.\n             * For layout measurements we often have to reposition the instance by\n             * removing its transform. This can trigger hover events, which is\n             * undesired.\n             */\n            isHoverEventsEnabled: true, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                removeFromMotionTree = parent === null || parent === void 0 ? void 0 : parent.addChild(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                removeFromMotionTree === null || removeFromMotionTree === void 0 ? void 0 : removeFromMotionTree();\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addChild: function (child) {\n                children.add(child);\n                return function () { return children.delete(child); };\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () { return sync.preRender(element.updateLayoutProjection, false, true); }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            /**\n             * Temporarily suspend hover events while we remove transforms in order to measure the layout.\n             *\n             * This seems like an odd bit of scheduling but what we're doing is saying after\n             * the next render, wait 10 milliseconds before reenabling hover events. Waiting until\n             * the next frame results in missed, valid hover events. But triggering on the postRender\n             * frame is too soon to avoid triggering events with layout measurements.\n             *\n             * Note: If we figure out a way of measuring layout while transforms remain applied, this can be removed.\n             */\n            suspendHoverEvents: function () {\n                element.isHoverEventsEnabled = false;\n                sync.postRender(function () {\n                    return setTimeout(function () { return (element.isHoverEventsEnabled = true); }, 10);\n                });\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            },\n            /**\n             * Record the viewport box as it was before an expected mutation/re-render\n             */\n            snapshotViewportBox: function () {\n                // TODO: Store this snapshot in LayoutState\n                element.prevViewportBox = element.measureViewportBox(false);\n                /**\n                 * Update targetBox to match the prevViewportBox. This is just to ensure\n                 * that targetBox is affected by scroll in the same way as the measured box\n                 */\n                element.rebaseProjectionTarget(false, element.prevViewportBox);\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            },\n            /**\n             * Start a layout animation on a given axis.\n             * TODO: This could be better.\n             */\n            startLayoutAnimation: function (axis, transition) {\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    return element.setProjectionTargetAxis(axis, v, v + length);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Update the layoutState by measuring the DOM layout. This\n             * should be called after resetting any layout-affecting transforms.\n             */\n            updateLayoutMeasurement: function () {\n                element.notifyBeforeLayoutMeasure(layoutState.layout);\n                layoutState.isHydrated = true;\n                layoutState.layout = element.measureViewportBox();\n                layoutState.layoutCorrected = copyAxisBox(layoutState.layout);\n                element.notifyLayoutMeasure(layoutState.layout, element.prevViewportBox || layoutState.layout);\n                sync.update(function () { return element.rebaseProjectionTarget(); });\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max) {\n                var target = projection.target[axis];\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, \n            /**\n             * Perform the callback after temporarily unapplying the transform\n             * upwards through the tree.\n             */\n            withoutTransform: function (callback) {\n                var isEnabled = projection.isEnabled;\n                isEnabled && element.resetTransform();\n                parent ? parent.withoutTransform(callback) : callback();\n                isEnabled && restoreTransform(instance, renderState);\n            },\n            updateLayoutProjection: function () {\n                isProjecting() && updateLayoutProjection();\n                children.forEach(fireUpdateLayoutProjection);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spread([\"initial\"], variantPriorityOrder);\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}