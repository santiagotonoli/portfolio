{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\";\nimport { usePopper, popperCSSVars } from \"@chakra-ui/popper\";\nimport { callAllHandlers, mergeRefs, px } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport function useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"arrowShadowColor\", \"arrowPadding\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\"]);\n\n  var {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  var popper = usePopper({\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset\n  });\n  var tooltipId = useId(id, \"tooltip\");\n  var ref = React.useRef(null);\n  var enterTimeout = React.useRef();\n  var exitTimeout = React.useRef();\n  var openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay);\n    }\n  }, [isDisabled, onOpen, openDelay]);\n  var closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n\n    exitTimeout.current = window.setTimeout(onClose, closeDelay);\n  }, [closeDelay, onClose]);\n  var onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay]);\n  var onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay();\n    }\n  }, [closeOnMouseDown, closeWithDelay]);\n\n  var onKeyDown = event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  };\n\n  useEventListener(\"keydown\", onKeyDown);\n  React.useEffect(() => () => {\n    clearTimeout(enterTimeout.current);\n    clearTimeout(exitTimeout.current);\n  }, []);\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current);\n  var getTriggerProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(ref, _ref, popper.referenceRef),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined\n    });\n\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onMouseDown, isOpen, tooltipId, onClick, popper]);\n  var getTooltipPositionerProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    return _extends({}, props, {\n      style: _extends({}, props.style, {\n        [popperCSSVars.arrowSize.var]: px(arrowSize),\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      }),\n      ref: mergeRefs(_ref, popper.popperRef)\n    });\n  }, [popper, arrowSize, arrowShadowColor]);\n  var getTooltipProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var tooltipProps = _extends({\n      ref: _ref\n    }, htmlProps, props, {\n      id: tooltipId,\n      role: \"tooltip\",\n      style: _extends({}, props.style, {\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      })\n    });\n\n    return tooltipProps;\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,gBAAxB,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SAEEC,SAFF,EAIEC,aAJF,QAKO,mBALP;AAMA,SAASC,eAAT,EAA0BC,SAA1B,EAAiDC,EAAjD,QAA2D,kBAA3D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAuDA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAAiD;EAAA,IAA7BA,KAA6B;IAA7BA,KAA6B,GAAJ,EAAzBA;EAA6B;;EACtD,IAAM;IACJC,SAAS,GAAG,CADR;IAEJC,UAAU,GAAG,CAFT;IAGJC,YAAY,GAAG,IAHX;IAIJC,gBAJI;IAKJC,MAAM,EAAEC,UALJ;IAMJC,OAAO,EAAEC,WANL;IAOJC,SAPI;IAQJC,EARI;IASJC,MAAM,EAAEC,UATJ;IAUJC,aAVI;IAWJC,SAAS,GAAG,EAXR;IAYJC,gBAZI;IAaJC,YAbI;IAcJC,SAdI;IAeJC,UAfI;IAgBJC,MAhBI;IAiBJC;EAjBI,IAmBFpB,KAnBJ;EAAA,IAkBKqB,SAlBL,iCAmBIrB,KAnBJ;;EAqBA,IAAM;IAAEW,MAAF;IAAUN,MAAV;IAAkBE;EAAlB,IAA8BjB,aAAa,CAAC;IAChDqB,MAAM,EAAEC,UADwC;IAEhDC,aAFgD;IAGhDR,MAAM,EAAEC,UAHwC;IAIhDC,OAAO,EAAEC;EAJuC,CAAD,CAAjD;EAOA,IAAMc,MAAM,GAAG7B,SAAS,CAAC;IACvBgB,SADuB;IAEvBO,YAFuB;IAGvBC,SAHuB;IAIvBE,MAJuB;IAKvBC;EALuB,CAAD,CAAxB;EAQA,IAAMG,SAAS,GAAG/B,KAAK,CAACkB,EAAD,EAAK,SAAL,CAAvB;EAEA,IAAMc,GAAG,GAAG1B,KAAK,CAAC2B,MAAN3B,CAAkB,IAAlBA,CAAZ;EAEA,IAAM4B,YAAY,GAAG5B,KAAK,CAAC2B,MAAN3B,EAArB;EACA,IAAM6B,WAAW,GAAG7B,KAAK,CAAC2B,MAAN3B,EAApB;EAEA,IAAM8B,aAAa,GAAG9B,KAAK,CAAC+B,WAAN/B,CAAkB,MAAM;IAC5C,IAAI,CAACoB,UAAL,EAAiB;MACfQ,YAAY,CAACI,OAAbJ,GAAuBK,MAAM,CAACC,UAAPD,CAAkB1B,MAAlB0B,EAA0B9B,SAA1B8B,CAAvBL;IACD;EAHmB,GAInB,CAACR,UAAD,EAAab,MAAb,EAAqBJ,SAArB,CAJmBH,CAAtB;EAMA,IAAMmC,cAAc,GAAGnC,KAAK,CAAC+B,WAAN/B,CAAkB,MAAM;IAC7C,IAAI4B,YAAY,CAACI,OAAjB,EAA0B;MACxBI,YAAY,CAACR,YAAY,CAACI,OAAd,CAAZI;IACD;;IACDP,WAAW,CAACG,OAAZH,GAAsBI,MAAM,CAACC,UAAPD,CAAkBxB,OAAlBwB,EAA2B7B,UAA3B6B,CAAtBJ;EAJqB,GAKpB,CAACzB,UAAD,EAAaK,OAAb,CALoBT,CAAvB;EAOA,IAAMqC,OAAO,GAAGrC,KAAK,CAAC+B,WAAN/B,CAAkB,MAAM;IACtC,IAAIK,YAAJ,EAAkB;MAChB8B,cAAc;IACf;EAHa,GAIb,CAAC9B,YAAD,EAAe8B,cAAf,CAJanC,CAAhB;EAMA,IAAMsC,WAAW,GAAGtC,KAAK,CAAC+B,WAAN/B,CAAkB,MAAM;IAC1C,IAAIM,gBAAJ,EAAsB;MACpB6B,cAAc;IACf;EAHiB,GAIjB,CAAC7B,gBAAD,EAAmB6B,cAAnB,CAJiBnC,CAApB;;EAMA,IAAMuC,SAAS,GAAIC,KAAD,IAA0B;IAC1C,IAAI3B,MAAM,IAAI2B,KAAK,CAACC,GAAND,KAAc,QAA5B,EAAsC;MACpCL,cAAc;IACf;EAHH;;EAMA1C,gBAAgB,CAAC,SAAD,EAAY8C,SAAZ,CAAhB9C;EAEAO,KAAK,CAAC0C,SAAN1C,CACE,MAAM,MAAM;IACVoC,YAAY,CAACR,YAAY,CAACI,OAAd,CAAZI;IACAA,YAAY,CAACP,WAAW,CAACG,OAAb,CAAZI;EAHJ,GAKE,EALFpC;EAQA;AACF;AACA;AACA;AACA;AACA;;EACEP,gBAAgB,CAAC,YAAD,EAAe0C,cAAf,EAA+BT,GAAG,CAACM,OAAnC,CAAhBvC;EAEA,IAAMkD,eAA2B,GAAG3C,KAAK,CAAC+B,WAAN/B,CAClC,UAACE,KAAD,EAAa0C,IAAb,EAA6B;IAAA,IAA5B1C,KAA4B;MAA5BA,KAA4B,GAApB,EAARA;IAA4B;;IAAA,IAAhB0C,IAAgB;MAAhBA,IAAgB,GAAT,IAAPA;IAAgB;;IAC3B,IAAMC,YAAY,gBACb3C,KADa;MAEhBwB,GAAG,EAAE5B,SAAS,CAAC4B,GAAD,EAAMkB,IAAN,EAAYpB,MAAM,CAACsB,YAAnB,CAFE;MAGhBC,YAAY,EAAElD,eAAe,CAACK,KAAK,CAAC6C,YAAP,EAAqBjB,aAArB,CAHb;MAIhBO,OAAO,EAAExC,eAAe,CAACK,KAAK,CAACmC,OAAP,EAAgBA,OAAhB,CAJR;MAKhBC,WAAW,EAAEzC,eAAe,CAACK,KAAK,CAACoC,WAAP,EAAoBA,WAApB,CALZ;MAMhBU,OAAO,EAAEnD,eAAe,CAACK,KAAK,CAAC8C,OAAP,EAAgBlB,aAAhB,CANR;MAOhBmB,MAAM,EAAEpD,eAAe,CAACK,KAAK,CAAC+C,MAAP,EAAed,cAAf,CAPP;MAQhB,oBAAoBtB,MAAM,GAAGY,SAAH,GAAeyB;IARzB,EAAlB;;IAWA,OAAOL,YAAP;EAbgC,GAelC,CACEf,aADF,EAEEK,cAFF,EAGEG,WAHF,EAIEzB,MAJF,EAKEY,SALF,EAMEY,OANF,EAOEb,MAPF,CAfkCxB,CAApC;EA0BA,IAAMmD,yBAAqC,GAAGnD,KAAK,CAAC+B,WAAN/B,CAC5C,UAACE,KAAD,EAAa0C,IAAb,EAA6B;IAAA,IAA5B1C,KAA4B;MAA5BA,KAA4B,GAApB,EAARA;IAA4B;;IAAA,IAAhB0C,IAAgB;MAAhBA,IAAgB,GAAT,IAAPA;IAAgB;;IAC3B,oBACK1C,KADL;MAEEkD,KAAK,eACAlD,KAAK,CAACkD,KADN;QAEH,CAACxD,aAAa,CAACoB,SAAdpB,CAAwByD,GAAzB,GAA+BtD,EAAE,CAACiB,SAAD,CAF9B;QAGH,CAACpB,aAAa,CAACqB,gBAAdrB,CAA+ByD,GAAhC,GAAsCpC;MAHnC,EAFP;MAOES,GAAG,EAAE5B,SAAS,CAAC8C,IAAD,EAAOpB,MAAM,CAAC8B,SAAd;IAPhB;EAF0C,GAY5C,CAAC9B,MAAD,EAASR,SAAT,EAAoBC,gBAApB,CAZ4CjB,CAA9C;EAeA,IAAMuD,eAAe,GAAGvD,KAAK,CAAC+B,WAAN/B,CACtB,UAACE,KAAD,EAAa0C,IAAb,EAA6B;IAAA,IAA5B1C,KAA4B;MAA5BA,KAA4B,GAApB,EAARA;IAA4B;;IAAA,IAAhB0C,IAAgB;MAAhBA,IAAgB,GAAT,IAAPA;IAAgB;;IAC3B,IAAMY,YAAY;MAChB9B,GAAG,EAAEkB;IADW,GAEbrB,SAFa,EAGbrB,KAHa;MAIhBU,EAAE,EAAEa,SAJY;MAKhBgC,IAAI,EAAE,SALU;MAMhBL,KAAK,eACAlD,KAAK,CAACkD,KADN;QAEHM,QAAQ,EAAE,UAFP;QAGHC,eAAe,EAAE/D,aAAa,CAAC+D,eAAd/D,CAA8BgE;MAH5C;IANW,EAAlB;;IAaA,OAAOJ,YAAP;EAfoB,GAiBtB,CAACjC,SAAD,EAAYE,SAAZ,CAjBsBzB,CAAxB;EAoBA,OAAO;IACLa,MADK;IAELgD,IAAI,EAAE/B,aAFD;IAGLgC,IAAI,EAAE3B,cAHD;IAILQ,eAJK;IAKLY,eALK;IAMLJ;EANK,CAAP;AAQD","names":["useDisclosure","useEventListener","useId","usePopper","popperCSSVars","callAllHandlers","mergeRefs","px","React","useTooltip","props","openDelay","closeDelay","closeOnClick","closeOnMouseDown","onOpen","onOpenProp","onClose","onCloseProp","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","htmlProps","popper","tooltipId","ref","useRef","enterTimeout","exitTimeout","openWithDelay","useCallback","current","window","setTimeout","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","key","useEffect","getTriggerProps","_ref","triggerProps","referenceRef","onMouseEnter","onFocus","onBlur","undefined","getTooltipPositionerProps","style","var","popperRef","getTooltipProps","tooltipProps","role","position","transformOrigin","varRef","show","hide"],"sources":["../../src/use-tooltip.ts"],"sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport {\n  Placement,\n  usePopper,\n  UsePopperProps,\n  popperCSSVars,\n} from \"@chakra-ui/popper\"\nimport { callAllHandlers, mergeRefs, PropGetter, px } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    \"modifiers\" | \"gutter\" | \"offset\" | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const popper = usePopper({\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = React.useRef<any>(null)\n\n  const enterTimeout = React.useRef<number>()\n  const exitTimeout = React.useRef<number>()\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    },\n    [],\n  )\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current)\n\n  const getTriggerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, popper.referenceRef),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onMouseDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      popper,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      return {\n        ...props,\n        style: {\n          ...props.style,\n          [popperCSSVars.arrowSize.var]: px(arrowSize),\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(_ref, popper.popperRef),\n      }\n    },\n    [popper, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps = React.useCallback(\n    (props = {}, _ref = null) => {\n      const tooltipProps = {\n        ref: _ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: {\n          ...props.style,\n          position: \"relative\",\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n      }\n\n      return tooltipProps\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"]},"metadata":{},"sourceType":"module"}