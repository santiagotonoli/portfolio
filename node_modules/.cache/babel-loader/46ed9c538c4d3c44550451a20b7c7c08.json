{"ast":null,"code":"// Number assertions\nexport function isNumber(value) {\n  return typeof value === \"number\";\n}\nexport var isNotNumber = value => typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value);\nexport function isNumeric(value) {\n  return value != null && value - parseFloat(value) + 1 >= 0;\n} // Array assertions\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}\nexport var isEmptyArray = value => isArray(value) && value.length === 0; // Function assertions\n\nexport function isFunction(value) {\n  return typeof value === \"function\";\n} // Generic assertions\n\nexport var isDefined = value => typeof value !== \"undefined\" && value !== undefined;\nexport var isUndefined = value => typeof value === \"undefined\" || value === undefined; // Object assertions\n\nexport var isObject = value => {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !isArray(value);\n};\nexport var isEmptyObject = value => isObject(value) && Object.keys(value).length === 0;\nexport function isNotEmptyObject(value) {\n  return value && !isEmptyObject(value);\n}\nexport var isNull = value => value == null; // String assertions\n\nexport function isString(value) {\n  return Object.prototype.toString.call(value) === \"[object String]\";\n}\nexport function isCssVar(value) {\n  return /^var\\(--.+\\)$/.test(value);\n} // Event assertions\n\nexport function isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n} // Empty assertions\n\nexport var isEmpty = value => {\n  if (isArray(value)) return isEmptyArray(value);\n  if (isObject(value)) return isEmptyObject(value);\n  if (value == null || value === \"\") return true;\n  return false;\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport var __DEV__ = process.env.NODE_ENV !== \"production\";\nexport var isRefObject = val => \"current\" in val;","map":{"version":3,"mappings":"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","names":["isNumber","value","isNotNumber","Number","isNaN","isFinite","isNumeric","parseFloat","isArray","Array","isEmptyArray","length","isFunction","isDefined","undefined","isUndefined","isObject","type","isEmptyObject","Object","keys","isNotEmptyObject","isNull","isString","prototype","toString","call","isCssVar","test","isInputEvent","target","isEmpty","__DEV__","process","env","NODE_ENV","isRefObject","val"],"sources":["../../src/assertion.ts"],"sourcesContent":["import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\nexport function isCssVar(value: string) {\n  return /^var\\(--.+\\)$/.test(value)\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n\nexport const isRefObject = (val: any): val is { current: any } =>\n  \"current\" in val\n"]},"metadata":{},"sourceType":"module"}