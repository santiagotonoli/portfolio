{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useRadioGroup } from \"./use-radio-group\";\nvar [RadioGroupProvider, useRadioGroupContext] = createContext({\n  name: \"RadioGroupContext\",\n  strict: false\n});\nexport { useRadioGroupContext };\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\n\nexport var RadioGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    colorScheme,\n    size,\n    variant,\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"colorScheme\", \"size\", \"variant\", \"children\", \"className\"]);\n\n  var {\n    value,\n    onChange,\n    getRootProps,\n    name,\n    htmlProps\n  } = useRadioGroup(rest);\n  var group = React.useMemo(() => ({\n    name,\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant\n  }), [size, name, onChange, colorScheme, value, variant]);\n  var groupProps = getRootProps(htmlProps, ref);\n\n  var _className = cx(\"chakra-radio-group\", className);\n\n  return /*#__PURE__*/React.createElement(RadioGroupProvider, {\n    value: group\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, groupProps, {\n    className: _className\n  }), children));\n});\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,aAAT,EAAwBC,EAAxB,EAA4BC,OAA5B,QAA2C,kBAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAIO,mBAJP;AAUA,IAAM,CACJC,kBADI,EAEJC,oBAFI,IAGFN,aAAa,CAAoB;EACnCO,IAAI,EAAE,mBAD6B;EAEnCC,MAAM,EAAE;AAF2B,CAApB,CAHjB;AAQA,SAASF,oBAAT;AAeA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,UAAU,gBAAGV,UAAU,CAAyB,CAACW,KAAD,EAAQC,GAAR,KAAgB;EAC3E,IAAM;IAAEC,WAAF;IAAeC,IAAf;IAAqBC,OAArB;IAA8BC,QAA9B;IAAwCC;EAAxC,IAA+DN,KAArE;EAAA,IAA4DO,IAA5D,iCAAqEP,KAArE;;EAEA,IAAM;IAAEQ,KAAF;IAASC,QAAT;IAAmBC,YAAnB;IAAiCb,IAAjC;IAAuCc;EAAvC,IAAqDjB,aAAa,CAACa,IAAD,CAAxE;EAEA,IAAMK,KAAK,GAAGnB,KAAK,CAACoB,OAANpB,CACZ,OAAO;IACLI,IADK;IAELM,IAFK;IAGLM,QAHK;IAILP,WAJK;IAKLM,KALK;IAMLJ;EANK,CAAP,CADYX,EASZ,CAACU,IAAD,EAAON,IAAP,EAAaY,QAAb,EAAuBP,WAAvB,EAAoCM,KAApC,EAA2CJ,OAA3C,CATYX,CAAd;EAYA,IAAMqB,UAAU,GAAGJ,YAAY,CAACC,SAAD,EAAYV,GAAZ,CAA/B;;EACA,IAAMc,UAAU,GAAGxB,EAAE,CAAC,oBAAD,EAAuBe,SAAvB,CAArB;;EAEA,oBACEb,oBAACE,kBAAD;IAAoBa,KAAK,EAAEI;EAA3B,gBACEnB,oBAACL,MAAD,CAAQ4B,GAAR,eAAgBF,UAAhB;IAA4BR,SAAS,EAAES;EAAvC,IACGV,QADH,CADF,CADF;AApBkC,EAA7B;;AA6BP,IAAIb,OAAJ,EAAa;EACXO,UAAU,CAACkB,WAAXlB,GAAyB,YAAzBA;AACD","names":["chakra","forwardRef","createContext","cx","__DEV__","React","useRadioGroup","RadioGroupProvider","useRadioGroupContext","name","strict","RadioGroup","props","ref","colorScheme","size","variant","children","className","rest","value","onChange","getRootProps","htmlProps","group","useMemo","groupProps","_className","div","displayName"],"sources":["../../src/radio-group.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\n\nexport interface RadioGroupContext\n  extends Pick<UseRadioGroupReturn, \"onChange\" | \"value\" | \"name\">,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {}\n\nconst [\n  RadioGroupProvider,\n  useRadioGroupContext,\n] = createContext<RadioGroupContext>({\n  name: \"RadioGroupContext\",\n  strict: false,\n})\n\nexport { useRadioGroupContext }\n\ntype Omitted =\n  | \"onChange\"\n  | \"value\"\n  | \"defaultValue\"\n  | \"defaultChecked\"\n  | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">((props, ref) => {\n  const { colorScheme, size, variant, children, className, ...rest } = props\n\n  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest)\n\n  const group = React.useMemo(\n    () => ({\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n    }),\n    [size, name, onChange, colorScheme, value, variant],\n  )\n\n  const groupProps = getRootProps(htmlProps, ref)\n  const _className = cx(\"chakra-radio-group\", className)\n\n  return (\n    <RadioGroupProvider value={group}>\n      <chakra.div {...groupProps} className={_className}>\n        {children}\n      </chakra.div>\n    </RadioGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}