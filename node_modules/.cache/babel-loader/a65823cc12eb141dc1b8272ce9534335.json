{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { Collapse } from \"@chakra-ui/transition\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { AccordionProvider, useAccordion, useAccordionContext, useAccordionItem } from \"./use-accordion\";\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/docs/components/accordion\n */\n\nexport var Accordion = /*#__PURE__*/forwardRef((_ref, ref) => {\n  var {\n    children,\n    reduceMotion\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"reduceMotion\"]);\n\n  var styles = useMultiStyleConfig(\"Accordion\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useAccordion = useAccordion(ownProps),\n      {\n    htmlProps\n  } = _useAccordion,\n      context = _objectWithoutPropertiesLoose(_useAccordion, [\"htmlProps\"]);\n\n  var ctx = React.useMemo(() => _extends({}, context, {\n    reduceMotion: !!reduceMotion\n  }), [context, reduceMotion]);\n  return /*#__PURE__*/React.createElement(AccordionProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion\", props.className)\n  }), children)));\n});\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\";\n}\n\nvar [AccordionItemProvider, useAccordionItemContext] = createContext({\n  name: \"AccordionItemContext\",\n  errorMessage: \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \"\n});\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\n\nexport var AccordionItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    children,\n    className\n  } = props;\n\n  var _useAccordionItem = useAccordionItem(props),\n      {\n    htmlProps\n  } = _useAccordionItem,\n      context = _objectWithoutPropertiesLoose(_useAccordionItem, [\"htmlProps\"]);\n\n  var styles = useStyles();\n\n  var containerStyles = _extends({}, styles.container, {\n    overflowAnchor: \"none\"\n  });\n\n  var _context = React.useMemo(() => context, [context]);\n\n  return /*#__PURE__*/React.createElement(AccordionItemProvider, {\n    value: _context\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion__item\", className),\n    __css: containerStyles\n  }), runIfFn(children, {\n    isExpanded: !!context.isOpen,\n    isDisabled: !!context.isDisabled\n  })));\n});\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\";\n}\n/**\n * React hook to get the state and actions of an accordion item\n */\n\n\nexport function useAccordionItemState() {\n  var {\n    isOpen,\n    isDisabled,\n    onClose,\n    onOpen\n  } = useAccordionItemContext();\n  return {\n    isOpen,\n    onClose,\n    isDisabled,\n    onOpen\n  };\n}\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\n\nexport var AccordionButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getButtonProps\n  } = useAccordionItemContext();\n  var buttonProps = getButtonProps(props, ref);\n  var styles = useStyles();\n\n  var buttonStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    transition: \"all 0.2s\",\n    outline: 0\n  }, styles.button);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, buttonProps, {\n    className: cx(\"chakra-accordion__button\", props.className),\n    __css: buttonStyles\n  }));\n});\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\";\n}\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\n\n\nexport var AccordionPanel = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    reduceMotion\n  } = useAccordionContext();\n  var {\n    getPanelProps,\n    isOpen\n  } = useAccordionItemContext(); // remove `hidden` prop, 'coz we're using height animation\n\n  var panelProps = getPanelProps(props, ref);\n\n  var _className = cx(\"chakra-accordion__panel\", props.className);\n\n  var styles = useStyles();\n\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n\n  var child = /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelProps, {\n    __css: styles.panel,\n    className: _className\n  }));\n\n  if (!reduceMotion) {\n    return /*#__PURE__*/React.createElement(Collapse, {\n      in: isOpen\n    }, child);\n  }\n\n  return child;\n});\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\";\n}\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\n\n\nexport var AccordionIcon = props => {\n  var {\n    isOpen,\n    isDisabled\n  } = useAccordionItemContext();\n  var {\n    reduceMotion\n  } = useAccordionContext();\n\n  var _className = cx(\"chakra-accordion__icon\", props.className);\n\n  var styles = useStyles();\n\n  var iconStyles = _extends({\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\"\n  }, styles.icon);\n\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": true,\n    className: _className,\n    __css: iconStyles\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }));\n};\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\";\n}","map":{"version":3,"mappings":"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","names":["Icon","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","Collapse","createContext","cx","runIfFn","__DEV__","React","AccordionProvider","useAccordion","useAccordionContext","useAccordionItem","Accordion","ref","children","reduceMotion","_ref","props","styles","ownProps","htmlProps","_useAccordion","context","ctx","useMemo","value","div","className","displayName","AccordionItemProvider","useAccordionItemContext","name","errorMessage","AccordionItem","_useAccordionItem","containerStyles","container","overflowAnchor","_context","__css","isExpanded","isOpen","isDisabled","useAccordionItemState","onClose","onOpen","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","transition","outline","button","AccordionPanel","getPanelProps","panelProps","_className","hidden","child","panel","in","AccordionIcon","iconStyles","opacity","transform","undefined","transformOrigin","icon","viewBox","fill","d"],"sources":["../../src/accordion.tsx"],"sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Collapse } from \"@chakra-ui/transition\"\nimport {\n  createContext,\n  cx,\n  Omit,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n} from \"./use-accordion\"\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<HTMLChakraProps<\"div\">, keyof UseAccordionProps>,\n    ThemingProps<\"Accordion\"> {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/docs/components/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(\n  ({ children, reduceMotion, ...props }, ref) => {\n    const styles = useMultiStyleConfig(\"Accordion\", props)\n    const ownProps = omitThemingProps(props)\n\n    const { htmlProps, ...context } = useAccordion(ownProps)\n\n    const ctx = React.useMemo(\n      () => ({ ...context, reduceMotion: !!reduceMotion }),\n      [context, reduceMotion],\n    )\n\n    return (\n      <AccordionProvider value={ctx}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            ref={ref}\n            {...htmlProps}\n            className={cx(\"chakra-accordion\", props.className)}\n          >\n            {children}\n          </chakra.div>\n        </StylesProvider>\n      </AccordionProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [\n  AccordionItemProvider,\n  useAccordionItemContext,\n] = createContext<AccordionItemContext>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: MaybeRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  (props, ref) => {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const containerStyles: SystemStyleObject = {\n      ...styles.container,\n      overflowAnchor: \"none\",\n    }\n\n    const _context = React.useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={_context}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={containerStyles}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\nexport interface AccordionButtonProps extends HTMLChakraProps<\"button\"> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  (props, ref) => {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      transition: \"all 0.2s\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\nexport interface AccordionPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  (props, ref) => {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(props, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div {...panelProps} __css={styles.panel} className={_className} />\n    )\n\n    if (!reduceMotion) {\n      return <Collapse in={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const _className = cx(\"chakra-accordion__icon\", props.className)\n  const styles = useStyles()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon,\n  }\n\n  return (\n    <Icon\n      viewBox=\"0 0 24 24\"\n      aria-hidden\n      className={_className}\n      __css={iconStyles}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}