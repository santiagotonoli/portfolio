{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Button } from \"./button\";\nexport var IconButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    icon,\n    children,\n    isRound,\n    \"aria-label\": ariaLabel\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"icon\", \"children\", \"isRound\", \"aria-label\"]);\n  /**\n   * Passing the icon as prop or children should work\n   */\n\n\n  var element = icon || children;\n\n  var _children = /*#__PURE__*/React.isValidElement(element) ? /*#__PURE__*/React.cloneElement(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : \"md\",\n    ref: ref,\n    \"aria-label\": ariaLabel\n  }, rest), _children);\n});\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAoC,UAApC;AA2BA,OAAO,IAAMC,UAAU,gBAAGJ,UAAU,CAClC,CAACK,KAAD,EAAQC,GAAR,KAAgB;EACd,IAAM;IAAEC,IAAF;IAAQC,QAAR;IAAkBC,OAAlB;IAA2B,cAAcC;EAAzC,IAAgEL,KAAtE;EAAA,IAA6DM,IAA7D,iCAAsEN,KAAtE;EAEA;AACJ;AACA;;;EACI,IAAMO,OAAO,GAAGL,IAAI,IAAIC,QAAxB;;EACA,IAAMK,SAAS,GAAG,kBAAK,CAACC,cAANZ,CAAqBU,OAArBV,iBACdA,KAAK,CAACa,YAANb,CAAmBU,OAAnBV,EAAmC;IACjC,eAAe,IADkB;IAEjCc,SAAS,EAAE;EAFsB,CAAnCd,CADcA,GAKd,IALJ;;EAOA,oBACEA,oBAACC,MAAD;IACEc,OAAO,EAAC,GADV;IAEEC,YAAY,EAAET,OAAO,GAAG,MAAH,GAAY,IAFnC;IAGEH,GAAG,EAAEA,GAHP;IAIE,cAAYI;EAJd,GAKMC,IALN,GAOGE,SAPH,CADF;AAfgC,EAA7B;;AA6BP,IAAIZ,OAAJ,EAAa;EACXG,UAAU,CAACe,WAAXf,GAAyB,YAAzBA;AACD","names":["forwardRef","__DEV__","React","Button","IconButton","props","ref","icon","children","isRound","ariaLabel","rest","element","_children","isValidElement","cloneElement","focusable","padding","borderRadius","displayName"],"sources":["../../src/icon-button.tsx"],"sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype Omitted =\n  | \"leftIcon\"\n  | \"isFullWidth\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, Omitted> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : \"md\"}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\"\n}\n"]},"metadata":{},"sourceType":"module"}