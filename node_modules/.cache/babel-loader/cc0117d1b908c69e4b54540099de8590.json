{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { EASINGS } from \"./__utils\";\nvar directions = {\n  bottom: {\n    motion: {\n      y: \"100%\"\n    },\n    baseStyle: {\n      maxWidth: \"100vw\",\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  },\n  top: {\n    motion: {\n      y: \"-100%\"\n    },\n    baseStyle: {\n      maxWidth: \"100vw\",\n      top: 0,\n      left: 0,\n      right: 0\n    }\n  },\n  left: {\n    motion: {\n      x: \"-100%\"\n    },\n    baseStyle: {\n      width: \"100%\",\n      left: 0,\n      top: 0,\n      bottom: 0\n    }\n  },\n  right: {\n    motion: {\n      x: \"100%\"\n    },\n    baseStyle: {\n      width: \"100%\",\n      right: 0,\n      top: 0,\n      bottom: 0\n    }\n  }\n};\nvar variants = {\n  exit: direction => {\n    var _directions$direction;\n\n    var {\n      motion\n    } = (_directions$direction = directions[direction]) != null ? _directions$direction : {};\n    return _extends({}, motion, {\n      transition: {\n        duration: 0.15,\n        ease: EASINGS.easeInOut\n      }\n    });\n  },\n  enter: direction => {\n    var _directions$direction2;\n\n    var {\n      motion\n    } = (_directions$direction2 = directions[direction]) != null ? _directions$direction2 : {};\n    var [axis] = motion ? Object.keys(motion) : [\"x\"];\n    return {\n      [axis]: 0,\n      transition: {\n        type: \"spring\",\n        damping: 25,\n        stiffness: 180\n      }\n    };\n  }\n};\nexport var Slide = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _directions$direction3;\n\n  var {\n    direction = \"right\",\n    style,\n    unmountOnExit,\n    in: isOpen,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"direction\", \"style\", \"unmountOnExit\", \"in\", \"className\"]);\n\n  var {\n    baseStyle\n  } = (_directions$direction3 = directions[direction]) != null ? _directions$direction3 : {};\n  var shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true;\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    custom: direction\n  }, shouldExpand && /*#__PURE__*/React.createElement(motion.div, _extends({\n    ref: ref,\n    initial: \"exit\",\n    className: cx(\"chakra-slide\", className),\n    animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    exit: \"exit\",\n    custom: direction,\n    variants: variants,\n    style: _extends({\n      position: \"fixed\"\n    }, baseStyle, style)\n  }, rest)));\n});\n\nif (__DEV__) {\n  Slide.displayName = \"Slide\";\n}","map":{"version":3,"mappings":"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","names":["cx","__DEV__","AnimatePresence","motion","React","EASINGS","directions","bottom","y","baseStyle","maxWidth","left","right","top","x","width","variants","exit","direction","transition","duration","ease","easeInOut","enter","axis","Object","keys","type","damping","stiffness","Slide","forwardRef","props","ref","style","unmountOnExit","in","isOpen","className","rest","shouldExpand","custom","div","initial","animate","position","displayName"],"sources":["../../src/slide.tsx"],"sourcesContent":["import { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\nexport type SlideDirection = keyof typeof directions\n\nconst directions = {\n  bottom: {\n    motion: { y: \"100%\" },\n    baseStyle: {\n      maxWidth: \"100vw\",\n      bottom: 0,\n      left: 0,\n      right: 0,\n    },\n  },\n  top: {\n    motion: { y: \"-100%\" },\n    baseStyle: {\n      maxWidth: \"100vw\",\n      top: 0,\n      left: 0,\n      right: 0,\n    },\n  },\n  left: {\n    motion: { x: \"-100%\" },\n    baseStyle: {\n      width: \"100%\",\n      left: 0,\n      top: 0,\n      bottom: 0,\n    },\n  },\n  right: {\n    motion: { x: \"100%\" },\n    baseStyle: {\n      width: \"100%\",\n      right: 0,\n      top: 0,\n      bottom: 0,\n    },\n  },\n}\n\ntype SlideVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: SlideVariants = {\n  exit: (direction: string) => {\n    const { motion } = directions[direction] ?? {}\n    return {\n      ...motion,\n      transition: {\n        duration: 0.15,\n        ease: EASINGS.easeInOut,\n      },\n    }\n  },\n  enter: (direction: string) => {\n    const { motion } = directions[direction] ?? {}\n    const [axis] = motion ? Object.keys(motion) : [\"x\"]\n    return {\n      [axis]: 0,\n      transition: {\n        type: \"spring\",\n        damping: 25,\n        stiffness: 180,\n      },\n    }\n  },\n}\n\nexport interface SlideOptions {\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * The direction to slide from\n   * @default \"right\"\n   */\n  direction?: SlideDirection\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport interface SlideProps extends HTMLMotionProps<\"div\">, SlideOptions {}\n\nexport const Slide = React.forwardRef<HTMLDivElement, SlideProps>(\n  (props, ref) => {\n    const {\n      direction = \"right\",\n      style,\n      unmountOnExit,\n      in: isOpen,\n      className,\n      ...rest\n    } = props\n\n    const { baseStyle } = directions[direction] ?? {}\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    return (\n      <AnimatePresence custom={direction}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            initial=\"exit\"\n            className={cx(\"chakra-slide\", className)}\n            animate={isOpen || unmountOnExit ? \"enter\" : \"exit\"}\n            exit=\"exit\"\n            custom={direction}\n            variants={variants}\n            style={{\n              position: \"fixed\",\n              ...baseStyle,\n              ...style,\n            }}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  Slide.displayName = \"Slide\"\n}\n"]},"metadata":{},"sourceType":"module"}