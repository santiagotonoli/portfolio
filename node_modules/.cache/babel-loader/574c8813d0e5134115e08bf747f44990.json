{"ast":null,"code":"import React__default, { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction useOnMount(callback) {\n  useEffect(callback, []);\n}\n\nfunction useSound(url, _ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n\n  var _ref2 = _ref,\n      _ref2$volume = _ref2.volume,\n      volume = _ref2$volume === void 0 ? 1 : _ref2$volume,\n      _ref2$playbackRate = _ref2.playbackRate,\n      playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,\n      _ref2$soundEnabled = _ref2.soundEnabled,\n      soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,\n      _ref2$interrupt = _ref2.interrupt,\n      interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,\n      onload = _ref2.onload,\n      delegated = _objectWithoutPropertiesLoose(_ref2, [\"volume\", \"playbackRate\", \"soundEnabled\", \"interrupt\", \"onload\"]);\n\n  var HowlConstructor = React__default.useRef(null);\n  var isMounted = React__default.useRef(false);\n\n  var _React$useState = React__default.useState(false),\n      isPlaying = _React$useState[0],\n      setIsPlaying = _React$useState[1];\n\n  var _React$useState2 = React__default.useState(null),\n      duration = _React$useState2[0],\n      setDuration = _React$useState2[1];\n\n  var _React$useState3 = React__default.useState(null),\n      sound = _React$useState3[0],\n      setSound = _React$useState3[1];\n\n  var handleLoad = function handleLoad() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  }; // We want to lazy-load Howler, since sounds can't play on load anyway.\n\n\n  useOnMount(function () {\n    import('howler').then(function (mod) {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        var _sound = new HowlConstructor.current(_extends({\n          src: [url],\n          volume: volume,\n          rate: playbackRate,\n          onload: handleLoad\n        }, delegated));\n\n        setSound(_sound);\n      }\n    });\n    return function () {\n      isMounted.current = false;\n    };\n  }); // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n\n  React__default.useEffect(function () {\n    if (HowlConstructor.current && sound) {\n      setSound(new HowlConstructor.current(_extends({\n        src: [url],\n        volume: volume,\n        onload: handleLoad\n      }, delegated)));\n    } // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [url]); // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n\n  React__default.useEffect(function () {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    } // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [volume, playbackRate]);\n  var play = React__default.useCallback(function (options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n\n    if (!sound || !soundEnabled && !options.forceSoundEnabled) {\n      return;\n    }\n\n    if (interrupt) {\n      sound.stop();\n    }\n\n    if (options.playbackRate) {\n      sound.rate(options.playbackRate);\n    }\n\n    sound.play(options.id);\n\n    if (isMounted.current) {\n      sound.once('end', function () {\n        // If sound is not looping\n        if (!sound.playing()) {\n          setIsPlaying(false);\n        }\n      });\n    }\n\n    if (isMounted.current) {\n      setIsPlaying(true);\n    }\n  }, [sound, soundEnabled, interrupt]);\n  var stop = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n\n    sound.stop(id);\n\n    if (isMounted.current) {\n      setIsPlaying(false);\n    }\n  }, [sound]);\n  var pause = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n\n    sound.pause(id);\n\n    if (isMounted.current) {\n      setIsPlaying(false);\n    }\n  }, [sound]);\n  var returnedValue = [play, {\n    sound: sound,\n    stop: stop,\n    pause: pause,\n    isPlaying: isPlaying,\n    duration: duration\n  }];\n  return returnedValue;\n}\n\nexport default useSound;","map":{"version":3,"mappings":"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","names":["useOnMount","callback","React","useSound","url","volume","_ref2$volume","playbackRate","_ref2$playbackRate","soundEnabled","_ref2$soundEnabled","interrupt","_ref2$interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause","returnedValue"],"sources":["../src/use-on-mount.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n"]},"metadata":{},"sourceType":"module"}