{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nexport function Drawer(props) {\n  var _theme$components;\n\n  var {\n    isOpen,\n    onClose,\n    placement = \"right\",\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyleSlide = chakra(Slide);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var DrawerContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var {\n    placement\n  } = useDrawerContext();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyleSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\n\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","useStyles","useTheme","Slide","createContext","cx","__DEV__","React","Modal","ModalFocusScope","useModalContext","DrawerContextProvider","useDrawerContext","Drawer","props","isOpen","onClose","placement","children","rest","theme","drawerStyleConfig","components","_theme$components","value","styleConfig","StyleSlide","DrawerContent","ref","className","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","styles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","div","__css","direction","in","displayName","ModalBody","DrawerBody","ModalCloseButton","DrawerCloseButton","ModalFooter","DrawerFooter","ModalHeader","DrawerHeader","ModalOverlay","DrawerOverlay"],"sources":["../../src/drawer.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps extends ModalProps {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport function Drawer(props: DrawerProps) {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyleSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyleSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyleSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"]},"metadata":{},"sourceType":"module"}