{"ast":null,"code":"import { createTransform } from \"../create-transform\";\nimport { t } from \"../utils\";\nvar reverse = {\n  \"row-reverse\": {\n    space: \"--chakra-space-x-reverse\",\n    divide: \"--chakra-divide-x-reverse\"\n  },\n  \"column-reverse\": {\n    space: \"--chakra-space-y-reverse\",\n    divide: \"--chakra-divide-y-reverse\"\n  }\n};\nvar owlSelector = \"& > :not(style) ~ :not(style)\";\nexport var flexbox = {\n  alignItems: true,\n  alignContent: true,\n  justifyItems: true,\n  justifyContent: true,\n  flexWrap: true,\n  flexDirection: {\n    transform(value) {\n      var _reverse$value;\n\n      var {\n        space,\n        divide\n      } = (_reverse$value = reverse[value]) != null ? _reverse$value : {};\n      var result = {\n        flexDirection: value\n      };\n      if (space) result[space] = 1;\n      if (divide) result[divide] = 1;\n      return result;\n    }\n\n  },\n  spaceX: {\n    static: {\n      [owlSelector]: {\n        marginInlineStart: \"calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))\",\n        marginInlineEnd: \"calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))\"\n      }\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: value => value !== null ? {\n        \"--chakra-space-x\": value\n      } : null\n    })\n  },\n  spaceY: {\n    static: {\n      [owlSelector]: {\n        marginTop: \"calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))\",\n        marginBottom: \"calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))\"\n      }\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: value => value != null ? {\n        \"--chakra-space-y\": value\n      } : null\n    })\n  },\n  flex: true,\n  flexFlow: true,\n  flexGrow: true,\n  flexShrink: true,\n  flexBasis: t.sizes(\"flexBasis\"),\n  justifySelf: true,\n  alignSelf: true,\n  order: true,\n  placeItems: true,\n  placeContent: true,\n  placeSelf: true,\n  flexDir: t.prop(\"flexDirection\")\n};","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,qBAAhC;AAEA,SAAiBC,CAAjB,QAAiC,UAAjC;AAEA,IAAMC,OAAO,GAAG;EACd,eAAe;IACbC,KAAK,EAAE,0BADM;IAEbC,MAAM,EAAE;EAFK,CADD;EAKd,kBAAkB;IAChBD,KAAK,EAAE,0BADS;IAEhBC,MAAM,EAAE;EAFQ;AALJ,CAAhB;AAWA,IAAMC,WAAW,GAAG,+BAApB;AAEA,OAAO,IAAMC,OAAe,GAAG;EAC7BC,UAAU,EAAE,IADiB;EAE7BC,YAAY,EAAE,IAFe;EAG7BC,YAAY,EAAE,IAHe;EAI7BC,cAAc,EAAE,IAJa;EAK7BC,QAAQ,EAAE,IALmB;EAM7BC,aAAa,EAAE;IACbC,SAAS,CAACC,KAAD,EAAQ;MAAA;;MACf,IAAM;QAAEX,KAAF;QAASC;MAAT,sBAAoBF,OAAO,CAACY,KAAD,CAA3B,6BAAsC,EAA5C;MACA,IAAMC,MAAM,GAAG;QAAEH,aAAa,EAAEE;MAAjB,CAAf;MACA,IAAIX,KAAJ,EAAWY,MAAM,CAACZ,KAAD,CAANY,GAAgB,CAAhBA;MACX,IAAIX,MAAJ,EAAYW,MAAM,CAACX,MAAD,CAANW,GAAiB,CAAjBA;MACZ,OAAOA,MAAP;IACD;;EAPY,CANc;EAe7BC,MAAM,EAAE;IACNC,MAAM,EAAE;MACN,CAACZ,WAAD,GAAe;QACba,iBAAiB,EACf,uEAFW;QAGbC,eAAe,EACb;MAJW;IADT,CADF;IASNN,SAAS,EAAEb,eAAe,CAAC;MACzBoB,KAAK,EAAE,OADkB;MAEzBP,SAAS,EAAGC,KAAD,IACTA,KAAK,KAAK,IAAVA,GAAiB;QAAE,oBAAoBA;MAAtB,CAAjBA,GAAiD;IAH1B,CAAD;EATpB,CAfqB;EA8B7BO,MAAM,EAAE;IACNJ,MAAM,EAAE;MACN,CAACZ,WAAD,GAAe;QACbiB,SAAS,EACP,uEAFW;QAGbC,YAAY,EACV;MAJW;IADT,CADF;IASNV,SAAS,EAAEb,eAAe,CAAC;MACzBoB,KAAK,EAAE,OADkB;MAEzBP,SAAS,EAAGC,KAAD,IACTA,KAAK,IAAI,IAATA,GAAgB;QAAE,oBAAoBA;MAAtB,CAAhBA,GAAgD;IAHzB,CAAD;EATpB,CA9BqB;EA6C7BU,IAAI,EAAE,IA7CuB;EA8C7BC,QAAQ,EAAE,IA9CmB;EA+C7BC,QAAQ,EAAE,IA/CmB;EAgD7BC,UAAU,EAAE,IAhDiB;EAiD7BC,SAAS,EAAE3B,CAAC,CAAC4B,KAAF5B,CAAQ,WAARA,CAjDkB;EAkD7B6B,WAAW,EAAE,IAlDgB;EAmD7BC,SAAS,EAAE,IAnDkB;EAoD7BC,KAAK,EAAE,IApDsB;EAqD7BC,UAAU,EAAE,IArDiB;EAsD7BC,YAAY,EAAE,IAtDe;EAuD7BC,SAAS,EAAE,IAvDkB;EAwD7BC,OAAO,EAAEnC,CAAC,CAACoC,IAAFpC,CAAO,eAAPA;AAxDoB,CAAxB","names":["createTransform","t","reverse","space","divide","owlSelector","flexbox","alignItems","alignContent","justifyItems","justifyContent","flexWrap","flexDirection","transform","value","result","spaceX","static","marginInlineStart","marginInlineEnd","scale","spaceY","marginTop","marginBottom","flex","flexFlow","flexGrow","flexShrink","flexBasis","sizes","justifySelf","alignSelf","order","placeItems","placeContent","placeSelf","flexDir","prop"],"sources":["../../../src/config/flexbox.ts"],"sourcesContent":["import * as CSS from \"csstype\"\nimport { createTransform } from \"../create-transform\"\nimport { Config } from \"../prop-config\"\nimport { Length, t, Token } from \"../utils\"\n\nconst reverse = {\n  \"row-reverse\": {\n    space: \"--chakra-space-x-reverse\",\n    divide: \"--chakra-divide-x-reverse\",\n  },\n  \"column-reverse\": {\n    space: \"--chakra-space-y-reverse\",\n    divide: \"--chakra-divide-y-reverse\",\n  },\n}\n\nconst owlSelector = \"& > :not(style) ~ :not(style)\"\n\nexport const flexbox: Config = {\n  alignItems: true,\n  alignContent: true,\n  justifyItems: true,\n  justifyContent: true,\n  flexWrap: true,\n  flexDirection: {\n    transform(value) {\n      const { space, divide } = reverse[value] ?? {}\n      const result = { flexDirection: value }\n      if (space) result[space] = 1\n      if (divide) result[divide] = 1\n      return result\n    },\n  },\n  spaceX: {\n    static: {\n      [owlSelector]: {\n        marginInlineStart:\n          \"calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))\",\n        marginInlineEnd:\n          \"calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))\",\n      },\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: (value) =>\n        value !== null ? { \"--chakra-space-x\": value } : null,\n    }),\n  },\n  spaceY: {\n    static: {\n      [owlSelector]: {\n        marginTop:\n          \"calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))\",\n        marginBottom:\n          \"calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))\",\n      },\n    },\n    transform: createTransform({\n      scale: \"space\",\n      transform: (value) =>\n        value != null ? { \"--chakra-space-y\": value } : null,\n    }),\n  },\n  flex: true,\n  flexFlow: true,\n  flexGrow: true,\n  flexShrink: true,\n  flexBasis: t.sizes(\"flexBasis\"),\n  justifySelf: true,\n  alignSelf: true,\n  order: true,\n  placeItems: true,\n  placeContent: true,\n  placeSelf: true,\n  flexDir: t.prop(\"flexDirection\"),\n}\n\nexport interface FlexboxProps {\n  /**\n   * The CSS `align-items` property.\n   *\n   * It defines the `align-self` value on all direct children as a group.\n   *\n   * - In Flexbox, it controls the alignment of items on the Cross Axis.\n   * - In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/align-items)\n   */\n  alignItems?: Token<CSS.Property.AlignItems>\n  /**\n   * The CSS `align-content` property.\n   *\n   * It defines the distribution of space between and around\n   * content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/align-content)\n   */\n  alignContent?: Token<CSS.Property.AlignContent>\n  /**\n   * The CSS `justify-items` property.\n   *\n   * It defines the default `justify-self` for all items of the box,\n   * giving them all a default way of justifying each box\n   * along the appropriate axis.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/justify-items)\n   */\n  justifyItems?: Token<CSS.Property.JustifyItems>\n  /**\n   * The CSS `justify-content` property.\n   *\n   * It defines how the browser distributes space between and around content items\n   * along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/justify-content)\n   */\n  justifyContent?: Token<CSS.Property.JustifyContent>\n  /**\n   * The CSS `flex-wrap` property.\n   *\n   * It defines whether flex items are forced onto one line or\n   * can wrap onto multiple lines. If wrapping is allowed,\n   * it sets the direction that lines are stacked.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)\n   */\n  flexWrap?: Token<CSS.Property.FlexWrap>\n  /**\n   * The CSS `flex-flow` property.\n   *\n   * It is a shorthand property for `flex-direction` and `flex-wrap`.\n   * It specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-flow)\n   */\n  flexFlow?: Token<CSS.Property.FlexFlow>\n  /**\n   * The CSS `flex-basis` property.\n   *\n   * It defines the initial main size of a flex item.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-basis)\n   */\n  flexBasis?: Token<CSS.Property.FlexBasis<Length>>\n  /**\n   * The CSS `flex-direction` property.\n   *\n   * It defines how flex items are placed in the flex container\n   * defining the main axis and the direction (normal or reversed).\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-direction)\n   */\n  flexDirection?: Token<CSS.Property.FlexDirection>\n  /**\n   * The CSS `flex-direction` property.\n   *\n   * It defines how flex items are placed in the flex container\n   * defining the main axis and the direction (normal or reversed).\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-direction)\n   */\n  flexDir?: Token<CSS.Property.FlexDirection>\n  /**\n   * The CSS `flex` property.\n   *\n   * It defines how a flex item will grow or shrink\n   * to fit the space available in its flex container.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex)\n   */\n  flex?: Token<CSS.Property.Flex<Length>>\n  /**\n   * The CSS `justify-self` property.\n   *\n   * It defines the way a box is justified inside its\n   * alignment container along the appropriate axis.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-flow)\n   */\n  justifySelf?: Token<CSS.Property.JustifySelf>\n  /**\n   * The CSS `align-self` property.\n   *\n   * It works like `align-items`, but applies only to a\n   * single flexbox item, instead of all of them.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/align-self)\n   */\n  alignSelf?: Token<CSS.Property.AlignSelf>\n  /**\n   * The CSS `order` property.\n   *\n   * It defines the order to lay out an item in a flex or grid container.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/order)\n   */\n  order?: Token<CSS.Property.Order>\n  /**\n   * The CSS `flex-grow` property.\n   *\n   * It defines how much a flexbox item should grow\n   * if there's space available.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-grow)\n   */\n  flexGrow?: Token<CSS.Property.FlexGrow | (string & number)>\n  /**\n   * The CSS `flex-shrink` property.\n   *\n   * It defines how much a flexbox item should shrink\n   * if there's not enough space available.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)\n   */\n  flexShrink?: Token<CSS.Property.FlexShrink | (string & number)>\n  /**\n   * The CSS `place-items` property.\n   *\n   * It allows you to align items along both the block and\n   * inline directions at once (i.e. the align-items and justify-items properties)\n   * in a relevant layout system such as `Grid` or `Flex`.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/place-items)\n   */\n  placeItems?: Token<CSS.Property.PlaceItems>\n  /**\n   * The CSS `place-content` property.\n   *\n   * It allows you to align content along both the block and\n   * inline directions at once (i.e. the align-content and justify-content properties)\n   * in a relevant layout system such as Grid or Flexbox.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/place-content)\n   */\n  placeContent?: Token<CSS.Property.PlaceContent>\n  /**\n   * The CSS `place-self` property.\n   *\n   * It allows you to align an individual item in both the block and\n   * inline directions at once (i.e. the align-self and justify-self properties)\n   * in a relevant layout system such as Grid or Flexbox.\n   *\n   * @see [Mozilla Docs](https://developer.mozilla.org/docs/Web/CSS/place-self)\n   */\n  placeSelf?: Token<CSS.Property.PlaceSelf>\n  /**\n   * Controls the horizontal space between elements\n   */\n  // spaceX?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Controls the vertical space between elements\n   */\n  // spaceY?: Token<CSS.Property.Margin | number, \"space\">\n}\n"]},"metadata":{},"sourceType":"module"}