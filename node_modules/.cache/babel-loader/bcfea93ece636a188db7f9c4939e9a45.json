{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/docs/form/textarea\n */\n\nexport var Textarea = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    className,\n    rows\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\", \"rows\"]);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAA6BA,cAA7B,QAAmD,yBAAnD;AACA,SACEC,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAMEC,cANF,QAQO,mBARP;AASA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,OAAnB,QAAkC,kBAAlC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAgCA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,QAAQ,gBAAGP,UAAU,CAA4B,CAACQ,KAAD,EAAQC,GAAR,KAAgB;EAC5E,IAAMC,MAAM,GAAGR,cAAc,CAAC,UAAD,EAAaM,KAAb,CAA7B;;EACA,wBAAqCP,gBAAgB,CAACO,KAAD,CAArD;EAAA,IAAM;IAAEG,SAAF;IAAaC;EAAb,IAANC;EAAA,IAA4BC,IAA5B;;EAEA,IAAMC,aAAa,GAAGjB,cAAc,CAAsBgB,IAAtB,CAApC;EAEA,IAAME,OAAO,GAAG,CACd,GADc,EAEd,MAFc,EAGd,QAHc,EAId,WAJc,CAAhB;EAOA,IAAMC,cAAc,GAAGL,IAAI,GAAGR,IAAI,CAACM,MAAD,EAASM,OAAT,CAAP,GAA2BN,MAAtD;EAEA,oBACEJ,oBAACP,MAAD,CAAQmB,QAAR;IACET,GAAG,EAAEA,GADP;IAEEG,IAAI,EAAEA;EAFR,GAGMG,aAHN;IAIEJ,SAAS,EAAER,EAAE,CAAC,iBAAD,EAAoBQ,SAApB,CAJf;IAKEQ,KAAK,EAAEF;EALT,GADF;AAfgC,EAA3B;;AA0BP,IAAIZ,OAAJ,EAAa;EACXE,QAAQ,CAACa,WAATb,GAAuB,UAAvBA;AACD","names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","__DEV__","React","Textarea","props","ref","styles","className","rows","_omitThemingProps","rest","textareaProps","omitted","textareaStyles","textarea","__css","displayName"],"sources":["../../src/textarea.tsx"],"sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the textarea element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/docs/form/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  const omitted = [\n    \"h\",\n    \"minH\",\n    \"height\",\n    \"minHeight\",\n  ] as (keyof SystemStyleObject)[]\n\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\"\n}\n"]},"metadata":{},"sourceType":"module"}