{"ast":null,"code":"import * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useCallbackRef } from \"./use-callback-ref\";\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\n\nexport function useEventListener(event, handler, env, options) {\n  if (env === void 0) {\n    env = isBrowser ? document : null;\n  }\n\n  var fn = useCallbackRef(handler);\n  React.useEffect(() => {\n    if (!env) return undefined;\n\n    var listener = event => {\n      fn(event);\n    };\n\n    env.addEventListener(event, listener, options);\n    return () => {\n      env.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, fn]);\n  return () => {\n    var _env;\n\n    (_env = env) == null ? void 0 : _env.removeEventListener(event, fn, options);\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;EAAA,IAFAD,GAEA;IAFAA,GAEA,GAFqCL,SAAS,GAAGO,QAAH,GAAc,IAA5DF;EAEA;;EACA,IAAMG,EAAE,GAAGP,cAAc,CAACG,OAAD,CAAzB;EAEAL,KAAK,CAACU,SAANV,CAAgB,MAAM;IACpB,IAAI,CAACM,GAAL,EAAU,OAAOK,SAAP;;IAEV,IAAMC,QAAQ,GAAIR,KAAD,IAAgB;MAC/BK,EAAE,CAACL,KAAD,CAAFK;IADF;;IAIAH,GAAG,CAACO,gBAAJP,CAAqBF,KAArBE,EAA4BM,QAA5BN,EAAsCC,OAAtCD;IACA,OAAO,MAAM;MACXA,GAAG,CAACQ,mBAAJR,CAAwBF,KAAxBE,EAA+BM,QAA/BN,EAAyCC,OAAzCD;IADF;EARF,GAWG,CAACF,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBE,EAAtB,CAXHT;EAaA,OAAO,MAAM;IAAA;;IACX,gBAAG,IAAH,iBAAKc,mBAAL,CAAyBV,KAAzB,EAAgCK,EAAhC,EAAoCF,OAApC;EADF;AAGD","names":["React","isBrowser","useCallbackRef","useEventListener","event","handler","env","options","document","fn","useEffect","undefined","listener","addEventListener","removeEventListener"],"sources":["../../src/use-event-listener.ts"],"sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler: (event: DocumentEventMap[K]) => void,\n  env: Document | HTMLElement | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const fn = useCallbackRef(handler) as any\n\n  React.useEffect(() => {\n    if (!env) return undefined\n\n    const listener = (event: any) => {\n      fn(event)\n    }\n\n    env.addEventListener(event, listener, options)\n    return () => {\n      env.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, fn])\n\n  return () => {\n    env?.removeEventListener(event, fn, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}