{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar fallbackIcon = {\n  path: /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    fill: \"none\",\n    d: \"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    strokeLinecap: \"round\",\n    d: \"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    fill: \"none\",\n    strokeMiterlimit: \"10\",\n    cx: \"12\",\n    cy: \"12\",\n    r: \"11.25\"\n  })),\n  viewBox: \"0 0 24 24\"\n};\nexport var Icon = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    as: element,\n    viewBox,\n    color = \"currentColor\",\n    focusable = false,\n    children,\n    className,\n    __css\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"viewBox\", \"color\", \"focusable\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-icon\", className);\n\n  var styles = _extends({\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color\n  }, __css);\n\n  var shared = {\n    ref,\n    focusable,\n    className: _className,\n    __css: styles\n  };\n\n  var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n\n\n  if (element && typeof element !== \"string\") {\n    return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n      as: element\n    }, shared, rest));\n  }\n\n  var _path = children != null ? children : fallbackIcon.path;\n\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    verticalAlign: \"middle\",\n    viewBox: _viewBox\n  }, shared, rest), _path);\n});\n\nif (__DEV__) {\n  Icon.displayName = \"Icon\";\n}\n\nexport default Icon;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAGEC,UAHF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,YAAY,GAAG;EACnBC,IAAI,eACFF;IAAGG,MAAM,EAAC,cAAV;IAAyBC,WAAW,EAAC;EAArC,gBACEJ;IACEK,aAAa,EAAC,OADhB;IAEEC,IAAI,EAAC,MAFP;IAGEC,CAAC,EAAC;EAHJ,EADF,eAMEP;IACEM,IAAI,EAAC,cADP;IAEED,aAAa,EAAC,OAFhB;IAGEE,CAAC,EAAC;EAHJ,EANF,eAWEP;IAAQM,IAAI,EAAC,MAAb;IAAoBE,gBAAgB,EAAC,IAArC;IAA0CV,EAAE,EAAC,IAA7C;IAAkDW,EAAE,EAAC,IAArD;IAA0DC,CAAC,EAAC;EAA5D,EAXF,CAFiB;EAgBnBC,OAAO,EAAE;AAhBU,CAArB;AAuBA,OAAO,IAAMC,IAAI,gBAAGf,UAAU,CAAmB,CAACgB,KAAD,EAAQC,GAAR,KAAgB;EAC/D,IAAM;IACJC,EAAE,EAAEC,OADA;IAEJL,OAFI;IAGJM,KAAK,GAAG,cAHJ;IAIJC,SAAS,GAAG,KAJR;IAKJC,QALI;IAMJC,SANI;IAOJC;EAPI,IASFR,KATJ;EAAA,IAQKS,IARL,iCASIT,KATJ;;EAWA,IAAMU,UAAU,GAAGzB,EAAE,CAAC,aAAD,EAAgBsB,SAAhB,CAArB;;EAEA,IAAMI,MAAyB;IAC7BC,CAAC,EAAE,KAD0B;IAE7BC,CAAC,EAAE,KAF0B;IAG7BC,OAAO,EAAE,cAHoB;IAI7BC,UAAU,EAAE,KAJiB;IAK7BC,UAAU,EAAE,CALiB;IAM7BZ;EAN6B,GAO1BI,KAP0B,CAA/B;;EAUA,IAAMS,MAAW,GAAG;IAClBhB,GADkB;IAElBI,SAFkB;IAGlBE,SAAS,EAAEG,UAHO;IAIlBF,KAAK,EAAEG;EAJW,CAApB;;EAOA,IAAMO,QAAQ,GAAGpB,OAAH,QAAGA,aAAWV,YAAY,CAACU,OAAzC;EAEA;AACF;AACA;AACA;;;EACE,IAAIK,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;IAC1C,oBAAOhB,oBAACJ,MAAD,CAAQoC,GAAR;MAAYjB,EAAE,EAAEC;IAAhB,GAA6Bc,MAA7B,EAAyCR,IAAzC,EAAP;EACD;;EAED,IAAMW,KAAK,GAAId,QAAJ,QAAIA,cAAYlB,YAAY,CAACC,IAAxC;;EAEA,oBACEF,oBAACJ,MAAD,CAAQoC,GAAR;IAAYE,aAAa,EAAC,QAA1B;IAAmCvB,OAAO,EAAEoB;EAA5C,GAA0DD,MAA1D,EAAsER,IAAtE,GACGW,KADH,CADF;AA3C4B,EAAvB;;AAkDP,IAAIlC,OAAJ,EAAa;EACXa,IAAI,CAACuB,WAALvB,GAAmB,MAAnBA;AACD;;AAED,eAAeA,IAAf","names":["chakra","forwardRef","cx","__DEV__","React","fallbackIcon","path","stroke","strokeWidth","strokeLinecap","fill","d","strokeMiterlimit","cy","r","viewBox","Icon","props","ref","as","element","color","focusable","children","className","__css","rest","_className","styles","w","h","display","lineHeight","flexShrink","shared","_viewBox","svg","_path","verticalAlign","displayName"],"sources":["../../src/icon.tsx"],"sourcesContent":["import {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst fallbackIcon = {\n  path: (\n    <g stroke=\"currentColor\" strokeWidth=\"1.5\">\n      <path\n        strokeLinecap=\"round\"\n        fill=\"none\"\n        d=\"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n      />\n      <path\n        fill=\"currentColor\"\n        strokeLinecap=\"round\"\n        d=\"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n      />\n      <circle fill=\"none\" strokeMiterlimit=\"10\" cx=\"12\" cy=\"12\" r=\"11.25\" />\n    </g>\n  ),\n  viewBox: \"0 0 24 24\",\n}\n\nexport interface IconProps\n  extends Omit<React.SVGAttributes<SVGElement>, keyof ChakraProps>,\n    ChakraProps {}\n\nexport const Icon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const {\n    as: element,\n    viewBox,\n    color = \"currentColor\",\n    focusable = false,\n    children,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-icon\", className)\n\n  const styles: SystemStyleObject = {\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color,\n    ...__css,\n  }\n\n  const shared: any = {\n    ref,\n    focusable,\n    className: _className,\n    __css: styles,\n  }\n\n  const _viewBox = viewBox ?? fallbackIcon.viewBox\n\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n  if (element && typeof element !== \"string\") {\n    return <chakra.svg as={element} {...shared} {...rest} />\n  }\n\n  const _path = (children ?? fallbackIcon.path) as React.ReactNode\n\n  return (\n    <chakra.svg verticalAlign=\"middle\" viewBox={_viewBox} {...shared} {...rest}>\n      {_path}\n    </chakra.svg>\n  )\n})\n\nif (__DEV__) {\n  Icon.displayName = \"Icon\"\n}\n\nexport default Icon\n"]},"metadata":{},"sourceType":"module"}