{"ast":null,"code":"import { isNumber } from \"@chakra-ui/utils\";\nexport default function createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort((a, b) => Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1).map((_ref, index, arr) => {\n    var [breakpoint, minWidth] = _ref; // given a following breakpoint\n\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth,\n      maxWidth,\n      breakpoint,\n      query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = (value, modifier) => {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, match => \"\" + (parseFloat(match) + modifier));\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}","map":{"version":3,"mappings":"AAAA,SAAeA,QAAf,QAA+C,kBAA/C;AAEA,eAAe,SAASC,kBAAT,CAA4BC,WAA5B,EAA6D;EAC1E,OACEC,MAAM,CAACC,OAAPD,CAAeD,WAAfC,EACE;EACA;EAFFA,CAGGE,IAHHF,CAGQ,CAACG,CAAD,EAAIC,CAAJ,KACJC,MAAM,CAACC,QAAPD,CAAgBF,CAAC,CAAC,CAAD,CAAjBE,EAAsB,EAAtBA,IAA4BA,MAAM,CAACC,QAAPD,CAAgBD,CAAC,CAAC,CAAD,CAAjBC,EAAsB,EAAtBA,CAA5BA,GAAwD,CAAxDA,GAA4D,CAAC,CAJjEL,EAMGO,GANHP,CAMO,OAAyBQ,KAAzB,EAAgCC,GAAhC,KAAwC;IAAA,IAAvC,CAACC,UAAD,EAAaC,QAAb,IAAuCC,MAC3C;;IACA,IAAMC,IAAI,GAAGJ,GAAG,CAACD,KAAK,GAAG,CAAT,CAAhB,CAF2C,CAG3C;;IACA,IAAMM,QAAQ,GAAGD,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAaE,SAAlC;IACA,IAAMC,KAAK,GAAGC,sBAAsB,CAACN,QAAD,EAAWG,QAAX,CAApC;IAEA,OAAO;MACLH,QADK;MAELG,QAFK;MAGLJ,UAHK;MAILM;IAJK,CAAP;EAbJ,EADF;AAsBD;AAED;AACA;AACA;AACA;;AACA,SAASC,sBAAT,CAAgCN,QAAhC,EAAkDG,QAAlD,EAAqE;EACnE,IAAMI,WAAW,GAAGZ,QAAQ,CAACK,QAAD,EAAW,EAAX,CAARL,IAA0B,CAA9C;;EAEA,IAAI,CAACY,WAAD,IAAgB,CAACJ,QAArB,EAA+B;IAC7B,OAAO,EAAP;EACD;;EAED,IAAIE,KAAK,oBAAkBG,aAAa,CAACR,QAAD,CAA/B,MAAT;;EAEA,IAAI,CAACG,QAAL,EAAe;IACb,OAAOE,KAAP;EACD;;EAED,IAAIA,KAAJ,EAAW;IACTA,KAAK,IAAI,OAATA;EACD;;EAEDA,KAAK,qBAAmBG,aAAa,CAACC,QAAQ,CAACN,QAAD,CAAT,CAAhC,MAALE;EAEA,OAAOA,KAAP;AACD;;AASD,IAAMK,gBAAgB,GAAG,mBAAzB;;AAEA,IAAMC,oBAAoB,GAAG,CAC3BC,KAD2B,EAE3BC,QAF2B,KAGhB;EACX,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC7B,aAAUA,KAAK,GAAGC,QAAlB;EACD;;EAED,OAAOD,KAAK,CAACE,OAANF,CACLF,gBADKE,EAEJG,KAAD,UAAcC,UAAU,CAACD,KAAD,CAAVC,GAAoBH,QAAlC,CAFKD,CAAP;AARF;AAcA;AACA;AACA;AACA;AACA;;;AACA,SAASH,QAAT,CAAkBG,KAAlB,EAAiC;EAC/B,OAAOD,oBAAoB,CAACC,KAAD,EAAQA,KAAK,CAACK,QAANL,CAAe,IAAfA,IAAuB,CAAC,CAAxBA,GAA4B,CAAC,IAArC,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAASJ,aAAT,CAAuBI,KAAvB,EAA8C;EAC5C,OAAO1B,QAAQ,CAAC0B,KAAD,CAAR1B,GAAqB0B,KAArB,UAAiCA,KAAxC;AACD","names":["isNumber","createMediaQueries","breakpoints","Object","entries","sort","a","b","Number","parseInt","map","index","arr","breakpoint","minWidth","_ref","next","maxWidth","undefined","query","createMediaQueryString","hasMinWidth","toMediaString","subtract","measurementRegex","calculateMeasurement","value","modifier","replace","match","parseFloat","endsWith"],"sources":["../../src/create-media-query.ts"],"sourcesContent":["import { Dict, isNumber, StringOrNumber } from \"@chakra-ui/utils\"\n\nexport default function createMediaQueries(breakpoints: Dict): MediaQuery[] {\n  return (\n    Object.entries(breakpoints)\n      // sort css units in ascending order to ensure media queries are generated\n      // in the correct order and reference to each other correctly aswell\n      .sort((a, b) =>\n        Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1,\n      )\n      .map(([breakpoint, minWidth], index, arr) => {\n        // given a following breakpoint\n        const next = arr[index + 1]\n        // this breakpoint must end prior the threshold of the next\n        const maxWidth = next ? next[1] : undefined\n        const query = createMediaQueryString(minWidth, maxWidth)\n\n        return {\n          minWidth,\n          maxWidth,\n          breakpoint,\n          query,\n        }\n      })\n  )\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n"]},"metadata":{},"sourceType":"module"}