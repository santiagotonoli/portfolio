{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEditable } from \"./use-editable\";\nvar [EditableProvider, useEditableContext] = createContext({\n  name: \"EditableContext\",\n  errorMessage: \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\"\n});\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n */\n\nexport var Editable = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Editable\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useEditable = useEditable(ownProps),\n      {\n    htmlProps\n  } = _useEditable,\n      context = _objectWithoutPropertiesLoose(_useEditable, [\"htmlProps\"]);\n\n  var {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  } = context;\n\n  var _className = cx(\"chakra-editable\", props.className);\n\n  var children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  });\n  return /*#__PURE__*/React.createElement(EditableProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: _className\n  }), children)));\n});\n\nif (__DEV__) {\n  Editable.displayName = \"Editable\";\n}\n\nvar commonStyles = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\"\n};\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\n\nexport var EditablePreview = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getPreviewProps\n  } = useEditableContext();\n  var styles = useStyles();\n  var previewProps = getPreviewProps(props, ref);\n\n  var _className = cx(\"chakra-editable__preview\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, previewProps, {\n    __css: _extends({\n      cursor: \"text\",\n      display: \"inline-block\"\n    }, commonStyles, styles.preview),\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  EditablePreview.displayName = \"EditablePreview\";\n}\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\n\n\nexport var EditableInput = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInputProps\n  } = useEditableContext();\n  var styles = useStyles();\n  var inputProps = getInputProps(props, ref);\n\n  var _className = cx(\"chakra-editable__input\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, inputProps, {\n    __css: _extends({\n      outline: 0\n    }, commonStyles, styles.input),\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  EditableInput.displayName = \"EditableInput\";\n}\n/**\n * React hook use to gain access to the editable state and actions.\n */\n\n\nexport function useEditableState() {\n  var {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  } = useEditableContext();\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  };\n}\n/**\n * React hook use to create controls for the editable component\n */\n\nexport function useEditableControls() {\n  var {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  } = useEditableContext();\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  };\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","cx","runIfFn","__DEV__","React","useEditable","EditableProvider","useEditableContext","name","errorMessage","Editable","props","ref","styles","ownProps","htmlProps","_useEditable","context","isEditing","onSubmit","onCancel","onEdit","_className","className","children","value","div","displayName","commonStyles","fontSize","fontWeight","textAlign","bg","EditablePreview","getPreviewProps","previewProps","span","__css","cursor","display","preview","EditableInput","getInputProps","inputProps","input","outline","useEditableState","isDisabled","useEditableControls","getEditButtonProps","getCancelButtonProps","getSubmitButtonProps"],"sources":["../../src/editable.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype EditableContext = Omit<UseEditableReturn, \"htmlProps\">\n\nconst [EditableProvider, useEditableContext] = createContext<EditableContext>({\n  name: \"EditableContext\",\n  errorMessage:\n    \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\",\n})\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    BaseEditableProps,\n    ThemingProps<\"Editable\"> {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n */\nexport const Editable = forwardRef<EditableProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...(htmlProps as HTMLChakraProps<\"div\">)}\n          className={_className}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </EditableProvider>\n  )\n})\n\nif (__DEV__) {\n  Editable.displayName = \"Editable\"\n}\n\nconst commonStyles: SystemStyleObject = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n}\n\nexport interface EditablePreviewProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = forwardRef<EditablePreviewProps, \"span\">(\n  (props, ref) => {\n    const { getPreviewProps } = useEditableContext()\n    const styles = useStyles()\n\n    const previewProps = getPreviewProps(props, ref) as HTMLChakraProps<\"span\">\n    const _className = cx(\"chakra-editable__preview\", props.className)\n\n    return (\n      <chakra.span\n        {...previewProps}\n        __css={{\n          cursor: \"text\",\n          display: \"inline-block\",\n          ...commonStyles,\n          ...styles.preview,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditablePreview.displayName = \"EditablePreview\"\n}\n\nexport interface EditableInputProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\nexport const EditableInput = forwardRef<EditableInputProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useEditableContext()\n    const styles = useStyles()\n\n    const inputProps = getInputProps(props, ref) as HTMLChakraProps<\"input\">\n    const _className = cx(\"chakra-editable__input\", props.className)\n\n    return (\n      <chakra.input\n        {...inputProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.input,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditableInput.displayName = \"EditableInput\"\n}\n\n/**\n * React hook use to gain access to the editable state and actions.\n */\nexport function useEditableState() {\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  }\n}\n\n/**\n * React hook use to create controls for the editable component\n */\nexport function useEditableControls(): Pick<\n  EditableContext,\n  | \"isEditing\"\n  | \"getEditButtonProps\"\n  | \"getCancelButtonProps\"\n  | \"getSubmitButtonProps\"\n> {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}