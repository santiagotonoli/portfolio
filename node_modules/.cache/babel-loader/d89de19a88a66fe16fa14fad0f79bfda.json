{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useSlider } from \"./use-slider\";\nvar [SliderProvider, useSliderContext] = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\"\n});\nexport { SliderProvider, useSliderContext };\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\n\nexport var Slider = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var realProps = omitThemingProps(props);\n\n  var _useSlider = useSlider(realProps),\n      {\n    getInputProps,\n    getRootProps\n  } = _useSlider,\n      context = _objectWithoutPropertiesLoose(_useSlider, [\"getInputProps\", \"getRootProps\"]);\n\n  var rootProps = getRootProps();\n  var inputProps = getInputProps({}, ref);\n\n  var rootStyles = _extends({\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\"\n  }, styles.container);\n\n  return /*#__PURE__*/React.createElement(SliderProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, rootProps, {\n    className: \"chakra-slider\",\n    __css: rootStyles\n  }), props.children, /*#__PURE__*/React.createElement(\"input\", inputProps))));\n});\nSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\";\n}\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\n\n\nexport var SliderThumb = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getThumbProps\n  } = useSliderContext();\n  var styles = useStyles();\n\n  var thumbStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    outline: 0\n  }, styles.thumb);\n\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: thumbStyles\n  }));\n});\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\";\n}\n\nexport var SliderTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getTrackProps\n  } = useSliderContext();\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    overflow: \"hidden\"\n  }, styles.track);\n\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: trackStyles\n  }));\n});\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\";\n}\n\nexport var SliderFilledTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInnerTrackProps\n  } = useSliderContext();\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    width: \"inherit\",\n    height: \"inherit\"\n  }, styles.filledTrack);\n\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: trackStyles\n  }));\n});\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\";\n}\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/docs/components/slider\n */\n\n\nexport var SliderMark = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getMarkerProps\n  } = useSliderContext();\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","cx","__DEV__","React","useSlider","SliderProvider","useSliderContext","name","errorMessage","Slider","props","ref","styles","realProps","getInputProps","getRootProps","_useSlider","context","rootProps","inputProps","rootStyles","display","position","cursor","container","value","div","className","__css","children","defaultProps","orientation","displayName","SliderThumb","getThumbProps","thumbStyles","alignItems","justifyContent","outline","thumb","thumbProps","SliderTrack","getTrackProps","trackStyles","overflow","track","trackProps","SliderFilledTrack","getInnerTrackProps","width","height","filledTrack","SliderMark","getMarkerProps","markProps"],"sources":["../../src/slider.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSlider, UseSliderProps, UseSliderReturn } from \"./use-slider\"\n\ninterface SliderContext\n  extends Omit<UseSliderReturn, \"getInputProps\" | \"getRootProps\"> {}\n\nconst [SliderProvider, useSliderContext] = createContext<SliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\",\n})\n\nexport { SliderProvider, useSliderContext }\n\ntype Omitted = \"size\" | \"defaultValue\" | \"onChange\"\nexport interface SliderProps\n  extends UseSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, Omitted> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const Slider = forwardRef<SliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const realProps = omitThemingProps(props)\n\n  const { getInputProps, getRootProps, ...context } = useSlider(realProps)\n\n  const rootProps = getRootProps()\n  const inputProps = getInputProps({}, ref)\n\n  const rootStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\",\n    ...styles.container,\n  }\n\n  return (\n    <SliderProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div {...rootProps} className=\"chakra-slider\" __css={rootStyles}>\n          {props.children}\n          <input {...inputProps} />\n        </chakra.div>\n      </StylesProvider>\n    </SliderProvider>\n  )\n})\n\nSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\"\n}\n\nexport interface SliderThumbProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const SliderThumb = forwardRef<SliderThumbProps, \"div\">((props, ref) => {\n  const { getThumbProps } = useSliderContext()\n\n  const styles = useStyles()\n\n  const thumbStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    outline: 0,\n    ...styles.thumb,\n  }\n\n  const thumbProps = getThumbProps(props, ref)\n\n  return (\n    <chakra.div\n      {...thumbProps}\n      className={cx(\"chakra-slider__thumb\", props.className)}\n      __css={thumbStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\"\n}\n\nexport interface SliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderTrack = forwardRef<SliderTrackProps, \"div\">((props, ref) => {\n  const { getTrackProps } = useSliderContext()\n\n  const styles = useStyles()\n  const trackStyles = {\n    overflow: \"hidden\",\n    ...styles.track,\n  }\n\n  const trackProps = getTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className={cx(\"chakra-slider__track\", props.className)}\n      __css={trackStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\"\n}\n\nexport interface SliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderFilledTrack = forwardRef<SliderInnerTrackProps, \"div\">(\n  (props, ref) => {\n    const { getInnerTrackProps } = useSliderContext()\n\n    const styles = useStyles()\n    const trackStyles = {\n      width: \"inherit\",\n      height: \"inherit\",\n      ...styles.filledTrack,\n    }\n\n    const trackProps = getInnerTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className=\"chakra-slider__filled-track\"\n        __css={trackStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\"\n}\n\nexport interface SliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/docs/components/slider\n */\nexport const SliderMark = forwardRef<SliderMarkProps, \"div\">((props, ref) => {\n  const { getMarkerProps } = useSliderContext()\n  const markProps = getMarkerProps(props, ref)\n  return (\n    <chakra.div\n      {...markProps}\n      className={cx(\"chakra-slider__marker\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\"\n}\n"]},"metadata":{},"sourceType":"module"}