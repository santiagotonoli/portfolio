{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var InputGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children,\n    className\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(child => {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingLeft = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingRight = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderRightRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderLeftRadius = 0;\n    }\n  });\n  var clones = validChildren.map(child => {\n    var _child$props, _child$props2, _ref, _ref2;\n\n    var {\n      pl,\n      paddingLeft,\n      pr,\n      paddingRight\n    } = child.props;\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n\n    var theming = {\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    };\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, _extends({}, theming, {\n      paddingLeft: (_ref = pl != null ? pl : paddingLeft) != null ? _ref : groupStyles == null ? void 0 : groupStyles.paddingLeft,\n      paddingRight: (_ref2 = pr != null ? pr : paddingRight) != null ? _ref2 : groupStyles == null ? void 0 : groupStyles.paddingRight,\n      borderLeftRadius: groupStyles == null ? void 0 : groupStyles.borderLeftRadius,\n      borderRightRadius: groupStyles == null ? void 0 : groupStyles.borderRightRadius\n    }));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}","map":{"version":3,"mappings":"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","names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","cx","getValidChildren","__DEV__","React","InputGroup","props","ref","styles","children","className","_omitThemingProps","rest","_className","groupStyles","validChildren","input","field","forEach","child","type","id","paddingLeft","height","h","paddingRight","borderRightRadius","borderLeftRadius","clones","map","pl","pr","theming","size","variant","cloneElement","div","__css","width","display","position","value","displayName"],"sources":["../../src/input-group.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingLeft = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingRight = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderRightRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderLeftRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    const { pl, paddingLeft, pr, paddingRight } = child.props\n\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(child, {\n          ...theming,\n          paddingLeft: pl ?? paddingLeft ?? groupStyles?.paddingLeft,\n          paddingRight: pr ?? paddingRight ?? groupStyles?.paddingRight,\n          borderLeftRadius: groupStyles?.borderLeftRadius,\n          borderRightRadius: groupStyles?.borderRightRadius,\n        })\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}