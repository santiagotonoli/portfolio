{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { useBoolean, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, mergeRefs, minSafeInteger, normalizeEventKey, pick } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\nvar sanitize = value => value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    name\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\"]);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value !== counter.value;\n\n    if (notInSync) {\n      counter.update(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(event => {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = event => {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var _getAriaValueText = () => {\n    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  };\n\n  var ariaValueText = _getAriaValueText();\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n\n  var validateAndClamp = React.useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onBlur = React.useCallback(() => {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", event => {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current);\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var controlProps = useFormControl(props);\n  var inputProps = pick(controlProps, [\"id\", \"disabled\", \"readOnly\", \"required\", \"aria-invalid\", \"aria-required\", \"aria-readonly\", \"aria-describedby\", \"onFocus\", \"onBlur\"]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern\n    }, props, inputProps, {\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": inputProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(inputProps[\"aria-invalid\"] || counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(inputProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(inputProps.onBlur, onBlur)\n    });\n  }, [name, inputProps, counter.value, counter.valueAsNumber, counter.isOutOfRange, inputMode, pattern, min, max, ariaValueText, onChange, onKeyDown, setFocused.on, onBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}","map":{"version":3,"mappings":"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","names":["useCounter","useFormControl","useBoolean","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","mergeRefs","minSafeInteger","normalizeEventKey","pick","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","getAriaValueText","pattern","inputMode","allowMouseWheel","name","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","useRef","current","notInSync","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","_getAriaValueText","text","defaultText","toString","undefined","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","controlProps","inputProps","getInputProps","type","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","onFocus","on"],"sources":["../../src/use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  useBoolean,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  pick,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    name,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value !== counter.value\n    if (notInSync) {\n      counter.update(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const controlProps = useFormControl<HTMLInputElement>(props)\n  const inputProps = pick(controlProps, [\n    \"id\",\n    \"disabled\",\n    \"readOnly\",\n    \"required\",\n    \"aria-invalid\",\n    \"aria-required\",\n    \"aria-readonly\",\n    \"aria-describedby\",\n    \"onFocus\",\n    \"onBlur\",\n  ])\n\n  const getInputProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      ...props,\n      ...inputProps,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": inputProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(\n        inputProps[\"aria-invalid\"] || counter.isOutOfRange,\n      ),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(inputProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(inputProps.onBlur, onBlur),\n    }),\n    [\n      name,\n      inputProps,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      inputMode,\n      pattern,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n      onBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}