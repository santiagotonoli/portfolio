{"ast":null,"code":"import { useContext, useRef, useMemo } from 'react';\nimport { __assign } from 'tslib';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.js';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useOnChange } from './use-on-change.js';\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\n\nfunction useSpring(source, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var isStatic = useContext(MotionConfigContext).isStatic;\n  var activeSpringAnimation = useRef(null);\n  var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n  useMemo(function () {\n    return value.attach(function (v, set) {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n\n      if (activeSpringAnimation.current) {\n        activeSpringAnimation.current.stop();\n      }\n\n      activeSpringAnimation.current = animate(__assign(__assign({\n        from: value.get(),\n        to: v,\n        velocity: value.getVelocity()\n      }, config), {\n        onUpdate: set\n      }));\n      return value.get();\n    });\n  }, Object.values(config));\n  useOnChange(source, function (v) {\n    return value.set(parseFloat(v));\n  });\n  return value;\n}\n\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useMemo","__assign","MotionConfigContext","animate","isMotionValue","useMotionValue","useOnChange","useSpring","source","config","isStatic","activeSpringAnimation","value","get","attach","v","set","current","stop","from","to","velocity","getVelocity","onUpdate","Object","values","parseFloat"],"sources":["/Users/santiagotonoli/Desktop/portfolio/React-TypeScript-Portfolio/node_modules/framer-motion/dist/es/value/use-spring.js"],"sourcesContent":["import { useContext, useRef, useMemo } from 'react';\nimport { __assign } from 'tslib';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.js';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useOnChange } from './use-on-change.js';\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config) {\n    if (config === void 0) { config = {}; }\n    var isStatic = useContext(MotionConfigContext).isStatic;\n    var activeSpringAnimation = useRef(null);\n    var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    useMemo(function () {\n        return value.attach(function (v, set) {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            if (activeSpringAnimation.current) {\n                activeSpringAnimation.current.stop();\n            }\n            activeSpringAnimation.current = animate(__assign(__assign({ from: value.get(), to: v, velocity: value.getVelocity() }, config), { onUpdate: set }));\n            return value.get();\n        });\n    }, Object.values(config));\n    useOnChange(source, function (v) { return value.set(parseFloat(v)); });\n    return value;\n}\n\nexport { useSpring };\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmC;EAC/B,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAG,EAAT;EAAc;;EACvC,IAAIC,QAAQ,GAAGZ,UAAU,CAACI,mBAAD,CAAV,CAAgCQ,QAA/C;EACA,IAAIC,qBAAqB,GAAGZ,MAAM,CAAC,IAAD,CAAlC;EACA,IAAIa,KAAK,GAAGP,cAAc,CAACD,aAAa,CAACI,MAAD,CAAb,GAAwBA,MAAM,CAACK,GAAP,EAAxB,GAAuCL,MAAxC,CAA1B;EACAR,OAAO,CAAC,YAAY;IAChB,OAAOY,KAAK,CAACE,MAAN,CAAa,UAAUC,CAAV,EAAaC,GAAb,EAAkB;MAClC;AACZ;AACA;AACA;MACY,IAAIN,QAAJ,EACI,OAAOM,GAAG,CAACD,CAAD,CAAV;;MACJ,IAAIJ,qBAAqB,CAACM,OAA1B,EAAmC;QAC/BN,qBAAqB,CAACM,OAAtB,CAA8BC,IAA9B;MACH;;MACDP,qBAAqB,CAACM,OAAtB,GAAgCd,OAAO,CAACF,QAAQ,CAACA,QAAQ,CAAC;QAAEkB,IAAI,EAAEP,KAAK,CAACC,GAAN,EAAR;QAAqBO,EAAE,EAAEL,CAAzB;QAA4BM,QAAQ,EAAET,KAAK,CAACU,WAAN;MAAtC,CAAD,EAA8Db,MAA9D,CAAT,EAAgF;QAAEc,QAAQ,EAAEP;MAAZ,CAAhF,CAAT,CAAvC;MACA,OAAOJ,KAAK,CAACC,GAAN,EAAP;IACH,CAZM,CAAP;EAaH,CAdM,EAcJW,MAAM,CAACC,MAAP,CAAchB,MAAd,CAdI,CAAP;EAeAH,WAAW,CAACE,MAAD,EAAS,UAAUO,CAAV,EAAa;IAAE,OAAOH,KAAK,CAACI,GAAN,CAAUU,UAAU,CAACX,CAAD,CAApB,CAAP;EAAkC,CAA1D,CAAX;EACA,OAAOH,KAAP;AACH;;AAED,SAASL,SAAT"},"metadata":{},"sourceType":"module"}