{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { isUndefined, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getProgressProps, rotate, spin } from \"./progress.utils\";\n\nvar Circle = props => /*#__PURE__*/React.createElement(chakra.circle, _extends({\n  cx: 50,\n  cy: 50,\n  r: 42,\n  fill: \"transparent\"\n}, props));\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}\n\nvar Shape = props => {\n  var {\n    size,\n    isIndeterminate\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"isIndeterminate\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? rotate + \" 2s linear infinite\" : undefined\n    }\n  }, rest));\n};\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\";\n}\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/docs/feedback/progress\n * @todo add theming support for circular progress\n */\n\n\nexport var CircularProgress = props => {\n  var _progress$percent;\n\n  var {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"]);\n\n  var progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate\n  });\n  var determinant = isIndeterminate ? undefined : ((_progress$percent = progress.percent) != null ? _progress$percent : 0) * 2.64;\n  var strokeDasharray = isUndefined(determinant) ? undefined : determinant + \" \" + (264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: spin + \" 1.5s linear infinite\"\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray,\n    transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-progress\"\n  }, progress.bind, rest, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(Shape, {\n    size: size,\n    isIndeterminate: isIndeterminate\n  }, /*#__PURE__*/React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /*#__PURE__*/React.createElement(Circle, _extends({\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : undefined\n  }, indicatorProps))), children);\n};\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\";\n}\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\n\n\nexport var CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\";\n}","map":{"version":3,"mappings":"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","names":["chakra","isUndefined","__DEV__","React","getProgressProps","rotate","spin","Circle","props","circle","cx","cy","r","fill","displayName","Shape","size","isIndeterminate","rest","svg","viewBox","__css","width","height","animation","undefined","CircularProgress","max","min","valueText","getValueText","value","capIsRound","children","thickness","color","trackColor","progress","determinant","percent","strokeDasharray","indicatorProps","css","strokeDashoffset","transition","rootStyles","display","position","verticalAlign","fontSize","div","className","bind","stroke","strokeWidth","strokeLinecap","CircularProgressLabel","baseStyle","top","left","textAlign","transform"],"sources":["../../src/circular-progress.tsx"],"sourcesContent":["import { chakra, SystemStyleObject, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { isUndefined, StringOrNumber, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { getProgressProps, rotate, spin } from \"./progress.utils\"\n\ninterface CircleProps extends HTMLChakraProps<\"circle\"> {}\n\nconst Circle: React.FC<CircleProps> = (props) => (\n  <chakra.circle cx={50} cy={50} r={42} fill=\"transparent\" {...props} />\n)\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n\ninterface ShapeProps extends HTMLChakraProps<\"svg\"> {\n  size?: StringOrNumber\n  isIndeterminate?: boolean\n}\n\nconst Shape: React.FC<ShapeProps> = (props) => {\n  const { size, isIndeterminate, ...rest } = props\n  return (\n    <chakra.svg\n      viewBox=\"0 0 100 100\"\n      __css={{\n        width: size,\n        height: size,\n        animation: isIndeterminate ? `${rotate} 2s linear infinite` : undefined,\n      }}\n      {...rest}\n    />\n  )\n}\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\"\n}\n\ninterface CircularProgressOptions {\n  /**\n   * The size of the circular progress in CSS units\n   */\n  size?: StringOrNumber\n  /**\n   * Maximum value defining 100% progress made (must be higher than 'min')\n   */\n  max?: number\n  /**\n   * Minimum value defining 'no progress' (must be lower than 'max')\n   */\n  min?: number\n  /**\n   * This defines the stroke width of the svg circle.\n   */\n  thickness?: StringOrNumber\n  /**\n   * Current progress (must be between min/max)\n   */\n  value?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   */\n  capIsRound?: boolean\n  /**\n   * The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar.\n   */\n  children?: React.ReactNode\n  /**\n   * The color name of the progress track. Use a color key in the theme object\n   */\n  trackColor?: string\n  /**\n   * The color of the progress indicator. Use a color key in the theme object\n   */\n  color?: string\n  /**\n   * The desired valueText to use in place of the value\n   */\n  valueText?: string\n  /**\n   * A function that returns the desired valueText to use in place of the value\n   */\n  getValueText?(value: number, percent: number): string\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface CircularProgressProps\n  extends Omit<HTMLChakraProps<\"div\">, \"color\">,\n    CircularProgressOptions {}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/docs/feedback/progress\n * @todo add theming support for circular progress\n */\nexport const CircularProgress: React.FC<CircularProgressProps> = (props) => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props\n\n  const progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate,\n  })\n\n  const determinant = isIndeterminate\n    ? undefined\n    : (progress.percent ?? 0) * 2.64\n\n  const strokeDasharray = isUndefined(determinant)\n    ? undefined\n    : `${determinant} ${264 - determinant}`\n\n  const indicatorProps = isIndeterminate\n    ? {\n        css: { animation: `${spin} 1.5s linear infinite` },\n      }\n    : {\n        strokeDashoffset: 66,\n        strokeDasharray,\n        transition: `stroke-dasharray 0.6s ease 0s, stroke 0.6s ease`,\n      }\n\n  const rootStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size,\n  }\n\n  return (\n    <chakra.div\n      className=\"chakra-progress\"\n      {...progress.bind}\n      {...rest}\n      __css={rootStyles}\n    >\n      <Shape size={size} isIndeterminate={isIndeterminate}>\n        <Circle\n          stroke={trackColor}\n          strokeWidth={thickness}\n          className=\"chakra-progress__track\"\n        />\n        <Circle\n          stroke={color}\n          strokeWidth={thickness}\n          className=\"chakra-progress__indicator\"\n          strokeLinecap={capIsRound ? \"round\" : undefined}\n          {...indicatorProps}\n        />\n      </Shape>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\"\n}\n\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\nexport const CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n  },\n})\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\"\n}\n\nexport interface CircularProgressLabelProps extends HTMLChakraProps<\"div\"> {}\n"]},"metadata":{},"sourceType":"module"}