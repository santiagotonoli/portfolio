{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n */\n\nexport function useClipboard(text, optionsOrTimeout) {\n  if (optionsOrTimeout === void 0) {\n    optionsOrTimeout = {};\n  }\n\n  var [hasCopied, setHasCopied] = useState(false);\n\n  var _ref = typeof optionsOrTimeout === \"number\" ? {\n    timeout: optionsOrTimeout\n  } : optionsOrTimeout,\n      {\n    timeout = 1500\n  } = _ref,\n      copyOptions = _objectWithoutPropertiesLoose(_ref, [\"timeout\"]);\n\n  var onCopy = useCallback(() => {\n    var didCopy = copy(text, copyOptions);\n    setHasCopied(didCopy);\n  }, [text, copyOptions]);\n  useEffect(() => {\n    var timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: text,\n    onCopy,\n    hasCopied\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CACLC,IADK,EAELC,gBAFK,EAGL;EAAA,IADAA,gBACA;IADAA,gBACA,GADiD,EAAjDA;EACA;;EACA,IAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;;EAEA,WACE,OAAOM,gBAAP,KAA4B,QAA5B,GACI;IAAEG,OAAO,EAAEH;EAAX,CADJ,GAEIA,gBAHN;EAAA,IAAM;IAAEG,OAAO,GAAG;EAAZ,IAANC;EAAA,IAA2BC,WAA3B;;EAKA,IAAMC,MAAM,GAAGX,WAAW,CAAC,MAAM;IAC/B,IAAMY,OAAO,GAAGV,IAAI,CAACE,IAAD,EAAOM,WAAP,CAApB;IACAH,YAAY,CAACK,OAAD,CAAZL;EAFwB,GAGvB,CAACH,IAAD,EAAOM,WAAP,CAHuB,CAA1B;EAKAT,SAAS,CAAC,MAAM;IACd,IAAIY,SAAwB,GAAG,IAA/B;;IAEA,IAAIP,SAAJ,EAAe;MACbO,SAAS,GAAGC,MAAM,CAACC,UAAPD,CAAkB,MAAM;QAClCP,YAAY,CAAC,KAAD,CAAZA;MADU,GAETC,OAFSM,CAAZD;IAGD;;IAED,OAAO,MAAM;MACX,IAAIA,SAAJ,EAAe;QACbC,MAAM,CAACE,YAAPF,CAAoBD,SAApBC;MACD;IAHH;EATO,GAcN,CAACN,OAAD,EAAUF,SAAV,CAdM,CAATL;EAgBA,OAAO;IAAEgB,KAAK,EAAEb,IAAT;IAAeO,MAAf;IAAuBL;EAAvB,CAAP;AACD","names":["useState","useCallback","useEffect","copy","useClipboard","text","optionsOrTimeout","hasCopied","setHasCopied","timeout","_ref","copyOptions","onCopy","didCopy","timeoutId","window","setTimeout","clearTimeout","value"],"sources":["../../src/use-clipboard.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n */\nexport function useClipboard(\n  text: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === \"number\"\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(text, copyOptions)\n    setHasCopied(didCopy)\n  }, [text, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return { value: text, onCopy, hasCopied }\n}\n"]},"metadata":{},"sourceType":"module"}