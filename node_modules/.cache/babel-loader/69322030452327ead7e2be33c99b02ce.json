{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { generateStripe, getColor, mode } from \"@chakra-ui/theme-tools\";\nvar parts = [\"track\", \"filledTrack\", \"panel\"];\n\nfunction filledStyle(props) {\n  var {\n    colorScheme: c,\n    theme: t,\n    isIndeterminate,\n    hasStripe\n  } = props;\n  var stripeStyle = mode(generateStripe(), generateStripe(\"1rem\", \"rgba(0,0,0,0.1)\"))(props);\n  var bgColor = mode(c + \".500\", c + \".200\")(props);\n  var gradient = \"linear-gradient(\\n    to right,\\n    transparent 0%,\\n    \" + getColor(t, bgColor) + \" 50%,\\n    transparent 100%\\n  )\";\n  var addStripe = !isIndeterminate && hasStripe;\n  return _extends({}, addStripe && stripeStyle, isIndeterminate ? {\n    bgImage: gradient\n  } : {\n    bgColor\n  });\n}\n\nvar baseStyleLabel = {\n  lineHeight: \"1\",\n  fontSize: \"0.25em\",\n  fontWeight: \"bold\",\n  color: \"white\"\n};\n\nfunction baseStyleTrack(props) {\n  return {\n    bg: mode(\"gray.100\", \"whiteAlpha.300\")(props)\n  };\n}\n\nfunction baseStyleFilledTrack(props) {\n  return _extends({\n    transition: \"all 0.3s\"\n  }, filledStyle(props));\n}\n\nvar baseStyle = props => ({\n  label: baseStyleLabel,\n  filledTrack: baseStyleFilledTrack(props),\n  track: baseStyleTrack(props)\n});\n\nvar sizes = {\n  xs: {\n    track: {\n      h: \"0.25rem\"\n    }\n  },\n  sm: {\n    track: {\n      h: \"0.5rem\"\n    }\n  },\n  md: {\n    track: {\n      h: \"0.75rem\"\n    }\n  },\n  lg: {\n    track: {\n      h: \"1rem\"\n    }\n  }\n};\nvar defaultProps = {\n  size: \"md\",\n  colorScheme: \"blue\"\n};\nexport default {\n  parts,\n  sizes,\n  baseStyle,\n  defaultProps\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,QAAzB,EAAmCC,IAAnC,QAA+C,wBAA/C;AAIA,IAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,aAAV,EAAyB,OAAzB,CAAd;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAAkC;EAChC,IAAM;IAAEC,WAAW,EAAEC,CAAf;IAAkBC,KAAK,EAAEC,CAAzB;IAA4BC,eAA5B;IAA6CC;EAA7C,IAA2DN,KAAjE;EAEA,IAAMO,WAAW,GAAGV,IAAI,CACtBF,cAAc,EADQ,EAEtBA,cAAc,CAAC,MAAD,EAAS,iBAAT,CAFQ,CAAJE,CAGlBG,KAHkBH,CAApB;EAKA,IAAMW,OAAO,GAAGX,IAAI,CAAIK,CAAJ,WAAgBA,CAAhB,UAAJL,CAA6BG,KAA7BH,CAAhB;EAEA,IAAMY,QAAQ,kEAGVb,QAAQ,CAACQ,CAAD,EAAII,OAAJ,CAHE,qCAAd;EAOA,IAAME,SAAS,GAAG,CAACL,eAAD,IAAoBC,SAAtC;EAEA,oBACMI,SAAS,IAAIH,WADnB,EAEMF,eAAe,GAAG;IAAEM,OAAO,EAAEF;EAAX,CAAH,GAA2B;IAAED;EAAF,CAFhD;AAID;;AAED,IAAMI,cAAc,GAAG;EACrBC,UAAU,EAAE,GADS;EAErBC,QAAQ,EAAE,QAFW;EAGrBC,UAAU,EAAE,MAHS;EAIrBC,KAAK,EAAE;AAJc,CAAvB;;AAOA,SAASC,cAAT,CAAwBjB,KAAxB,EAAqC;EACnC,OAAO;IACLkB,EAAE,EAAErB,IAAI,8BAAJA,CAAmCG,KAAnCH;EADC,CAAP;AAGD;;AAED,SAASsB,oBAAT,CAA8BnB,KAA9B,EAA2C;EACzC;IACEoB,UAAU,EAAE;EADd,GAEKrB,WAAW,CAACC,KAAD,CAFhB;AAID;;AAED,IAAMqB,SAAS,GAAIrB,KAAD,KAAkB;EAClCsB,KAAK,EAAEV,cAD2B;EAElCW,WAAW,EAAEJ,oBAAoB,CAACnB,KAAD,CAFC;EAGlCwB,KAAK,EAAEP,cAAc,CAACjB,KAAD;AAHa,CAAlB,CAAlB;;AAMA,IAAMyB,KAAK,GAAG;EACZC,EAAE,EAAE;IACFF,KAAK,EAAE;MAAEG,CAAC,EAAE;IAAL;EADL,CADQ;EAIZC,EAAE,EAAE;IACFJ,KAAK,EAAE;MAAEG,CAAC,EAAE;IAAL;EADL,CAJQ;EAOZE,EAAE,EAAE;IACFL,KAAK,EAAE;MAAEG,CAAC,EAAE;IAAL;EADL,CAPQ;EAUZG,EAAE,EAAE;IACFN,KAAK,EAAE;MAAEG,CAAC,EAAE;IAAL;EADL;AAVQ,CAAd;AAeA,IAAMI,YAAY,GAAG;EACnBC,IAAI,EAAE,IADa;EAEnB/B,WAAW,EAAE;AAFM,CAArB;AAKA,eAAe;EACbH,KADa;EAEb2B,KAFa;EAGbJ,SAHa;EAIbU;AAJa,CAAf","names":["generateStripe","getColor","mode","parts","filledStyle","props","colorScheme","c","theme","t","isIndeterminate","hasStripe","stripeStyle","bgColor","gradient","addStripe","bgImage","baseStyleLabel","lineHeight","fontSize","fontWeight","color","baseStyleTrack","bg","baseStyleFilledTrack","transition","baseStyle","label","filledTrack","track","sizes","xs","h","sm","md","lg","defaultProps","size"],"sources":["../../../src/components/progress.ts"],"sourcesContent":["import { generateStripe, getColor, mode } from \"@chakra-ui/theme-tools\"\n\ntype Dict = Record<string, any>\n\nconst parts = [\"track\", \"filledTrack\", \"panel\"]\n\nfunction filledStyle(props: Dict) {\n  const { colorScheme: c, theme: t, isIndeterminate, hasStripe } = props\n\n  const stripeStyle = mode(\n    generateStripe(),\n    generateStripe(\"1rem\", \"rgba(0,0,0,0.1)\"),\n  )(props)\n\n  const bgColor = mode(`${c}.500`, `${c}.200`)(props)\n\n  const gradient = `linear-gradient(\n    to right,\n    transparent 0%,\n    ${getColor(t, bgColor)} 50%,\n    transparent 100%\n  )`\n\n  const addStripe = !isIndeterminate && hasStripe\n\n  return {\n    ...(addStripe && stripeStyle),\n    ...(isIndeterminate ? { bgImage: gradient } : { bgColor }),\n  }\n}\n\nconst baseStyleLabel = {\n  lineHeight: \"1\",\n  fontSize: \"0.25em\",\n  fontWeight: \"bold\",\n  color: \"white\",\n}\n\nfunction baseStyleTrack(props: Dict) {\n  return {\n    bg: mode(`gray.100`, `whiteAlpha.300`)(props),\n  }\n}\n\nfunction baseStyleFilledTrack(props: Dict) {\n  return {\n    transition: \"all 0.3s\",\n    ...filledStyle(props),\n  }\n}\n\nconst baseStyle = (props: Dict) => ({\n  label: baseStyleLabel,\n  filledTrack: baseStyleFilledTrack(props),\n  track: baseStyleTrack(props),\n})\n\nconst sizes = {\n  xs: {\n    track: { h: \"0.25rem\" },\n  },\n  sm: {\n    track: { h: \"0.5rem\" },\n  },\n  md: {\n    track: { h: \"0.75rem\" },\n  },\n  lg: {\n    track: { h: \"1rem\" },\n  },\n}\n\nconst defaultProps = {\n  size: \"md\",\n  colorScheme: \"blue\",\n}\n\nexport default {\n  parts,\n  sizes,\n  baseStyle,\n  defaultProps,\n}\n"]},"metadata":{},"sourceType":"module"}