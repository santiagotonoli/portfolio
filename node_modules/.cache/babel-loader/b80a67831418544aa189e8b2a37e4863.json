{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * React component to render inline code snippets.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/code\n */\n\nexport var Code = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyleConfig(\"Code\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.code, _extends({\n    ref: ref,\n    className: cx(\"chakra-code\", props.className)\n  }, rest, {\n    __css: _extends({\n      display: \"inline-block\"\n    }, styles)\n  }));\n});\n\nif (__DEV__) {\n  Code.displayName = \"Code\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAKEC,cALF,QAOO,mBAPP;AAQA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,IAAI,gBAAGN,UAAU,CAAoB,CAACO,KAAD,EAAQC,GAAR,KAAgB;EAChE,IAAMC,MAAM,GAAGP,cAAc,CAAC,MAAD,EAASK,KAAT,CAA7B;;EACA,wBAA+BN,gBAAgB,CAACM,KAAD,CAA/C;EAAA,IAAsBG,IAAtB;;EAEA,oBACEL,oBAACN,MAAD,CAAQY,IAAR;IACEH,GAAG,EAAEA,GADP;IAEEI,SAAS,EAAET,EAAE,CAAC,aAAD,EAAgBI,KAAK,CAACK,SAAtB;EAFf,GAGMF,IAHN;IAIEG,KAAK;MACHC,OAAO,EAAE;IADN,GAEAL,MAFA;EAJP,GADF;AAJ4B,EAAvB;;AAiBP,IAAIL,OAAJ,EAAa;EACXE,IAAI,CAACS,WAALT,GAAmB,MAAnBA;AACD","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","__DEV__","React","Code","props","ref","styles","rest","code","className","__css","display","displayName"],"sources":["../../src/code.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface CodeProps\n  extends HTMLChakraProps<\"code\">,\n    ThemingProps<\"Code\"> {}\n\n/**\n * React component to render inline code snippets.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/code\n */\nexport const Code = forwardRef<CodeProps, \"code\">((props, ref) => {\n  const styles = useStyleConfig(\"Code\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.code\n      ref={ref}\n      className={cx(\"chakra-code\", props.className)}\n      {...rest}\n      __css={{\n        display: \"inline-block\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  Code.displayName = \"Code\"\n}\n"]},"metadata":{},"sourceType":"module"}