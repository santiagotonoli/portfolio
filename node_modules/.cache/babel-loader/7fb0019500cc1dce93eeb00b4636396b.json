{"ast":null,"code":"import { useTimeout, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { isFunction, __DEV__ } from \"@chakra-ui/utils\";\nimport ReachAlert from \"@reach/alert\";\nimport { motion, useIsPresent } from \"framer-motion\";\nimport * as React from \"react\";\nimport { getToastStyle } from \"./toast.utils\";\n/**\n * @todo After Gerrit refactors this implementation,\n * allow users to change the toast transition direction from\n * a `ToastProvider` component.\n *\n * Here's an API example:\n *\n * ```jsx\n * <ToastProvider\n *   motion={customVariants}\n *   component={CustomToastComponent}\n *   autoCloseTimeout={3000}\n *   toastSpacing={32} // this will control the `margin` value applied\n * >\n * </ToastProvider>\n * ```\n */\n\nvar toastMotionVariants = {\n  initial: props => {\n    var {\n      position\n    } = props;\n    var dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\";\n    var factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1;\n    if (position === \"bottom\") factor = 1;\n    return {\n      opacity: 0,\n      [dir]: factor * 24\n    };\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1]\n    }\n  }\n};\nexport var Toast = props => {\n  var {\n    id,\n    message,\n    onCloseComplete,\n    onRequestRemove,\n    requestClose = false,\n    position = \"bottom\",\n    duration = 5000\n  } = props;\n  var [delay, setDelay] = React.useState(duration);\n  var isPresent = useIsPresent();\n  useUpdateEffect(() => {\n    if (!isPresent) {\n      onCloseComplete == null ? void 0 : onCloseComplete();\n    }\n  }, [isPresent]);\n  useUpdateEffect(() => {\n    setDelay(duration);\n  }, [duration]);\n\n  var onMouseEnter = () => setDelay(null);\n\n  var onMouseLeave = () => setDelay(duration);\n\n  var close = () => {\n    if (isPresent) onRequestRemove();\n  };\n\n  React.useEffect(() => {\n    if (isPresent && requestClose) {\n      onRequestRemove();\n    }\n  }, [isPresent, requestClose, onRequestRemove]);\n  useTimeout(close, delay);\n  var style = React.useMemo(() => getToastStyle(position), [position]);\n  return /*#__PURE__*/React.createElement(motion.li, {\n    layout: true,\n    className: \"chakra-toast\",\n    variants: toastMotionVariants,\n    initial: \"initial\",\n    animate: \"animate\",\n    exit: \"exit\",\n    onHoverStart: onMouseEnter,\n    onHoverEnd: onMouseLeave,\n    custom: {\n      position\n    },\n    style: style\n  }, /*#__PURE__*/React.createElement(ReachAlert, {\n    className: \"chakra-toast__inner\",\n    style: {\n      pointerEvents: \"auto\",\n      maxWidth: 560,\n      minWidth: 300,\n      margin: \"0.5rem\"\n    }\n  }, isFunction(message) ? message({\n    id,\n    onClose: close\n  }) : message));\n};\n\nif (__DEV__) {\n  Toast.displayName = \"Toast\";\n}","map":{"version":3,"mappings":"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","names":["useTimeout","useUpdateEffect","isFunction","__DEV__","ReachAlert","motion","useIsPresent","React","getToastStyle","toastMotionVariants","initial","props","position","dir","includes","factor","opacity","animate","y","x","scale","transition","duration","ease","exit","Toast","id","message","onCloseComplete","onRequestRemove","requestClose","delay","setDelay","useState","isPresent","onMouseEnter","onMouseLeave","close","useEffect","style","useMemo","li","layout","className","variants","onHoverStart","onHoverEnd","custom","pointerEvents","maxWidth","minWidth","margin","onClose","displayName"],"sources":["../../src/toast.tsx"],"sourcesContent":["import { useTimeout, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport { isFunction, __DEV__ } from \"@chakra-ui/utils\"\nimport ReachAlert from \"@reach/alert\"\nimport { motion, useIsPresent, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { ToastOptions } from \"./toast.types\"\nimport { getToastStyle } from \"./toast.utils\"\n\n/**\n * @todo After Gerrit refactors this implementation,\n * allow users to change the toast transition direction from\n * a `ToastProvider` component.\n *\n * Here's an API example:\n *\n * ```jsx\n * <ToastProvider\n *   motion={customVariants}\n *   component={CustomToastComponent}\n *   autoCloseTimeout={3000}\n *   toastSpacing={32} // this will control the `margin` value applied\n * >\n * </ToastProvider>\n * ```\n */\nconst toastMotionVariants: Variants = {\n  initial: (props) => {\n    const { position } = props\n\n    const dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\"\n\n    let factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1\n    if (position === \"bottom\") factor = 1\n\n    return {\n      opacity: 0,\n      [dir]: factor * 24,\n    }\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n}\n\nexport interface ToastProps extends ToastOptions {}\n\nexport const Toast: React.FC<ToastProps> = (props) => {\n  const {\n    id,\n    message,\n    onCloseComplete,\n    onRequestRemove,\n    requestClose = false,\n    position = \"bottom\",\n    duration = 5000,\n  } = props\n\n  const [delay, setDelay] = React.useState(duration)\n\n  const isPresent = useIsPresent()\n\n  useUpdateEffect(() => {\n    if (!isPresent) {\n      onCloseComplete?.()\n    }\n  }, [isPresent])\n\n  useUpdateEffect(() => {\n    setDelay(duration)\n  }, [duration])\n\n  const onMouseEnter = () => setDelay(null)\n  const onMouseLeave = () => setDelay(duration)\n\n  const close = () => {\n    if (isPresent) onRequestRemove()\n  }\n\n  React.useEffect(() => {\n    if (isPresent && requestClose) {\n      onRequestRemove()\n    }\n  }, [isPresent, requestClose, onRequestRemove])\n\n  useTimeout(close, delay)\n\n  const style = React.useMemo(() => getToastStyle(position), [position])\n\n  return (\n    <motion.li\n      layout\n      className=\"chakra-toast\"\n      variants={toastMotionVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      onHoverStart={onMouseEnter}\n      onHoverEnd={onMouseLeave}\n      custom={{ position }}\n      style={style}\n    >\n      <ReachAlert\n        className=\"chakra-toast__inner\"\n        style={{\n          pointerEvents: \"auto\",\n          maxWidth: 560,\n          minWidth: 300,\n          margin: \"0.5rem\",\n        }}\n      >\n        {isFunction(message) ? message({ id, onClose: close }) : message}\n      </ReachAlert>\n    </motion.li>\n  )\n}\n\nif (__DEV__) {\n  Toast.displayName = \"Toast\"\n}\n"]},"metadata":{},"sourceType":"module"}