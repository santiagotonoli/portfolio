{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useButtonGroup } from \"./button-group\";\nexport var Button = /*#__PURE__*/forwardRef((props, ref) => {\n  var _styles$_focus;\n\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"className\", \"as\"]);\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n\n\n  var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n    zIndex: 1\n  });\n\n  var buttonStyles = _extends({\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\"\n  }, styles, !!group && {\n    _focus\n  });\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: ref,\n    as: as,\n    type: as ? undefined : type,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), leftIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), isLoading && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    __css: {\n      fontSize: \"1em\",\n      lineHeight: \"normal\"\n    },\n    spacing: iconSpacing,\n    label: loadingText\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, children) : children, rightIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n});\n\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\n\nvar ButtonIcon = props => {\n  var {\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var _children = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n\n  var _className = cx(\"chakra-button__icon\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, rest, {\n    className: _className\n  }), _children);\n};\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\";\n}\n\nvar ButtonSpinner = props => {\n  var {\n    label,\n    spacing,\n    children = /*#__PURE__*/React.createElement(Spinner, {\n      color: \"currentColor\",\n      width: \"1em\",\n      height: \"1em\"\n    }),\n    className,\n    __css\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"label\", \"spacing\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-button__spinner\", className);\n\n  var spinnerStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0\n  }, __css);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}","map":{"version":3,"mappings":"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","names":["Spinner","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","mergeWith","__DEV__","React","useButtonGroup","Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","className","as","_omitThemingProps","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","button","disabled","undefined","__css","ButtonIcon","marginEnd","ButtonSpinner","fontSize","lineHeight","spacing","label","span","opacity","marginStart","displayName","_children","isValidElement","cloneElement","focusable","_className","color","height","spinnerStyles","div"],"sources":["../../src/button.tsx"],"sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span {...rest} className={_className}>\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"]},"metadata":{},"sourceType":"module"}