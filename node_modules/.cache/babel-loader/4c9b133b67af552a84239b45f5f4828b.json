{"ast":null,"code":"import { forwardRef, createElement } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\r\n * VisuallyHidden\r\n *\r\n * Provides text for screen readers that is visually hidden.\r\n * It is the logical opposite of the `aria-hidden` attribute.\r\n */\n\n\nvar VisuallyHidden = /*#__PURE__*/forwardRef(function VisuallyHidden(_ref, ref) {\n  var _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"span\" : _ref$as,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"style\"]);\n\n  return createElement(Comp, Object.assign({\n    ref: ref,\n    style: _extends({\n      border: 0,\n      clip: \"rect(0 0 0 0)\",\n      height: \"1px\",\n      margin: \"-1px\",\n      overflow: \"hidden\",\n      padding: 0,\n      position: \"absolute\",\n      width: \"1px\",\n      // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n      whiteSpace: \"nowrap\",\n      wordWrap: \"normal\"\n    }, style)\n  }, props));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  VisuallyHidden.displayName = \"VisuallyHidden\";\n  VisuallyHidden.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node\n  };\n}\n\nexport default VisuallyHidden;\nexport { VisuallyHidden };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;;;;;IAMMA,cAAc,gBAAGC,WAA2B,SAASD,cAAT,OAEhDE,GAFgD;qBAC9CC;MAAIC,4BAAO,MAAPA,GAAOC;wBAAQC;MAAAA,gCAAQ,EAARA,GAAQC;MAAOC;;EAGpC,OACEP,cAACG,IAAD;IACEF,GAAG,EAAEA,GADP;IAEEI,KAAK;MACHG,MAAM,EAAE,CADL;MAEHC,IAAI,EAAE,eAFH;MAGHC,MAAM,EAAE,KAHL;MAIHC,MAAM,EAAE,MAJL;MAKHC,QAAQ,EAAE,QALP;MAMHC,OAAO,EAAE,CANN;MAOHC,QAAQ,EAAE,UAPP;MAQHC,KAAK,EAAE,KARJ;MAUH;MACAC,UAAU,EAAE,QAXT;MAYHC,QAAQ,EAAE;IAZP,GAaAZ,KAbA;EAFP,GAiBME,KAjBN,EADF;AAJqB;;AAqCvB,2CAAa;EACXR,cAAc,CAACmB,WAAfnB,GAA6B,gBAA7BA;EACAA,cAAc,CAACoB,SAAfpB,GAA2B;IACzBG,EAAE,EAAEkB,SAAS,CAACC,GADW;IAEzBC,QAAQ,EAAEF,SAAS,CAACG;EAFK,CAA3BxB;AAID","names":["VisuallyHidden","React","ref","as","Comp","_ref$as","style","_ref$style","props","border","clip","height","margin","overflow","padding","position","width","whiteSpace","wordWrap","displayName","propTypes","PropTypes","any","children","node"],"sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/visually-hidden!\n *\n * Provides text for screen readers that is visually hidden.\n * It is the logical opposite of the `aria-hidden` attribute.\n *\n * @see https://snook.ca/archives/html_and_css/hiding-content-for-accessibility\n * @see https://a11yproject.com/posts/how-to-hide-content/\n * @see Docs     https://reach.tech/visually-hidden\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/visually-hidden\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * VisuallyHidden\n *\n * Provides text for screen readers that is visually hidden.\n * It is the logical opposite of the `aria-hidden` attribute.\n */\nconst VisuallyHidden = React.forwardRef<any, any>(function VisuallyHidden(\n  { as: Comp = \"span\", style = {}, ...props },\n  ref\n) {\n  return (\n    <Comp\n      ref={ref}\n      style={{\n        border: 0,\n        clip: \"rect(0 0 0 0)\",\n        height: \"1px\",\n        margin: \"-1px\",\n        overflow: \"hidden\",\n        padding: 0,\n        position: \"absolute\",\n        width: \"1px\",\n\n        // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n        whiteSpace: \"nowrap\",\n        wordWrap: \"normal\",\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}) as ForwardRefExoticComponentWithAs<\"span\", VisuallyHiddenProps>;\n\n/**\n * @see Docs https://reach.tech/visually-hidden#visuallyhidden-props\n */\ntype VisuallyHiddenProps = {\n  /**\n   * @see Docs https://reach.tech/visually-hidden#visuallyhidden-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  VisuallyHidden.displayName = \"VisuallyHidden\";\n  VisuallyHidden.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// TODO: These all come from @reach/utils but we don't want to bundle that here\n// just for the types. Need to split that up a bit better.\n\ntype As<BaseProps = any> = React.ElementType<BaseProps>;\n\ntype PropsWithAs<ComponentType extends As, ComponentProps> = ComponentProps &\n  Omit<\n    React.ComponentPropsWithRef<ComponentType>,\n    \"as\" | keyof ComponentProps\n  > & {\n    as?: ComponentType;\n  };\n\ninterface ExoticComponentWithAs<ComponentType extends As, ComponentProps> {\n  /**\n   * **NOTE**: Exotic components are not callable.\n   * Inherited from React.ExoticComponent with modifications to support `as`\n   */\n  <TT extends As>(\n    props: PropsWithAs<TT, ComponentProps>\n  ): React.ReactElement | null;\n  (\n    props: PropsWithAs<ComponentType, ComponentProps>\n  ): React.ReactElement | null;\n\n  /**\n   * Inherited from React.ExoticComponent\n   */\n  readonly $$typeof: symbol;\n}\n\ninterface NamedExoticComponentWithAs<ComponentType extends As, ComponentProps>\n  extends ExoticComponentWithAs<ComponentType, ComponentProps> {\n  /**\n   * Inherited from React.NamedExoticComponent\n   */\n  displayName?: string;\n}\n\ninterface ForwardRefExoticComponentWithAs<\n  ComponentType extends As,\n  ComponentProps\n> extends NamedExoticComponentWithAs<ComponentType, ComponentProps> {\n  /**\n   * Inherited from React.ForwardRefExoticComponent\n   * Will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n   * but can be given its own specific name\n   */\n  defaultProps?: Partial<PropsWithAs<ComponentType, ComponentProps>>;\n  propTypes?: React.WeakValidationMap<\n    PropsWithAs<ComponentType, ComponentProps>\n  >;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { VisuallyHiddenProps };\nexport { VisuallyHidden };\nexport default VisuallyHidden;\n"]},"metadata":{},"sourceType":"module"}