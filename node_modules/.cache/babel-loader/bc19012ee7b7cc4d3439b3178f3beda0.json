{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useBoolean, useDisclosure, useFocusOnPointerDown, useFocusOnHide, useFocusOnShow, useIds } from \"@chakra-ui/hooks\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\";\nimport { callAllHandlers, contains, getOwnerDocument, getRelatedTarget, isBrowser, mergeRefs, px } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    flip,\n    gutter,\n    id,\n    arrowSize,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowShadowColor: arrowShadowColorProp,\n    modifiers,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy\n  } = props;\n  var {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n  var [hasHeader, setHasHeader] = useBoolean();\n  var [hasBody, setHasBody] = useBoolean();\n  var [triggerId, popoverId, headerId, bodyId] = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\");\n  var fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\");\n  var shadowColor = arrowShadowColorProp != null ? arrowShadowColorProp : fallbackShadowColor;\n  var arrowShadowColor = useToken(\"colors\", shadowColor, arrowShadowColorProp);\n  var popper = usePopper({\n    placement: placementProp,\n    flip,\n    gutter,\n    modifiers\n  });\n  useFocusOnPointerDown({\n    doc: isBrowser ? getOwnerDocument(triggerRef.current) : null,\n    elements: [triggerRef]\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  var getPopoverProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var popoverProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      }),\n      ref: mergeRefs(popoverRef, _ref),\n      children: !isLazy || isOpen ? props.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props.onBlur, event => {\n        var relatedTarget = getRelatedTarget(event);\n        var targetIsPopover = contains(popoverRef.current, relatedTarget);\n        var targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        var isValidBlur = !targetIsPopover && !targetIsTrigger;\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [isLazy, isOpen, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, closeDelay, closeOnBlur]);\n  var getPopoverPositionerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(popper.popperRef, _ref),\n      style: _extends({}, props.style, {\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        visibility: isOpen ? \"visible\" : \"hidden\"\n      })\n    });\n  }, [arrowShadowColor, arrowSize, isOpen, popper.popperRef]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(triggerRef, _ref, popper.referenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      /**\n       * Any content that shows on pointer hover should also show on keyboard focus.\n       * Consider focus and blur to be the `hover` for keyboard users.\n       *\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\n       * Any content that shows on hover or focus must be dismissible.\n       * This case pressing `Escape` will dismiss the popover\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, popper.referenceRef, onToggle, onOpen, onClose, openDelay, closeDelay]);\n  useEffect(() => () => {\n    if (openTimeout.current) clearTimeout(openTimeout.current);\n    if (closeTimeout.current) clearTimeout(closeTimeout.current);\n  }, []);\n\n  var onTransitionEnd = () => {\n    var _popoverRef$current;\n\n    (_popoverRef$current = popoverRef.current) == null ? void 0 : _popoverRef$current.dispatchEvent(new Event(\"transitionend\"));\n  };\n\n  return {\n    forceUpdate: popper.forceUpdate,\n    isOpen,\n    onClose,\n    headerId,\n    hasHeader,\n    setHasHeader,\n    bodyId,\n    hasBody,\n    setHasBody,\n    onTransitionEnd,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps\n  };\n}","map":{"version":3,"mappings":"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","names":["useBoolean","useDisclosure","useFocusOnPointerDown","useFocusOnHide","useFocusOnShow","useIds","popperCSSVars","usePopper","useColorModeValue","useToken","callAllHandlers","contains","getOwnerDocument","getRelatedTarget","isBrowser","mergeRefs","px","useCallback","useEffect","useRef","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","placement","placementProp","flip","gutter","id","arrowSize","returnFocusOnClose","autoFocus","arrowShadowColor","arrowShadowColorProp","modifiers","trigger","openDelay","closeDelay","isLazy","isOpen","onClose","onOpen","onToggle","triggerRef","popoverRef","isHoveringRef","hasHeader","setHasHeader","hasBody","setHasBody","triggerId","popoverId","headerId","bodyId","fallbackShadowColor","shadowColor","popper","doc","current","elements","focusRef","visible","shouldFocus","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","ref","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","targetIsPopover","targetIsTrigger","isValidBlur","undefined","onMouseEnter","onMouseLeave","setTimeout","getPopoverPositionerProps","popperRef","var","visibility","openTimeout","closeTimeout","getTriggerProps","triggerProps","referenceRef","onClick","onFocus","window","clearTimeout","onTransitionEnd","dispatchEvent","Event","forceUpdate"],"sources":["../../src/use-popover.ts"],"sourcesContent":["import {\n  useBoolean,\n  useDisclosure,\n  useFocusOnPointerDown,\n  useFocusOnHide,\n  useFocusOnShow,\n  useIds,\n} from \"@chakra-ui/hooks\"\nimport {\n  Placement,\n  popperCSSVars,\n  usePopper,\n  UsePopperProps,\n} from \"@chakra-ui/popper\"\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\"\nimport {\n  callAllHandlers,\n  contains,\n  FocusableElement,\n  getOwnerDocument,\n  getRelatedTarget,\n  HTMLProps,\n  isBrowser,\n  mergeRefs,\n  PropGetter,\n  px,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * The gap (in pixels) to apply between the popover and the target.\n   * Used by `popper.js`\n   */\n  gutter?: number\n  /**\n   * The placement of the popover\n   */\n  placement?: Placement\n  /**\n   * The flip of the popover\n   */\n  flip?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The Popper.js modifiers to use.\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n}\n\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    flip,\n    gutter,\n    id,\n    arrowSize,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowShadowColor: arrowShadowColorProp,\n    modifiers,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const [hasHeader, setHasHeader] = useBoolean()\n  const [hasBody, setHasBody] = useBoolean()\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\")\n  const shadowColor = arrowShadowColorProp ?? fallbackShadowColor\n  const arrowShadowColor = useToken(\"colors\", shadowColor, arrowShadowColorProp)\n\n  const popper = usePopper({\n    placement: placementProp,\n    flip,\n    gutter,\n    modifiers,\n  })\n\n  useFocusOnPointerDown({\n    doc: isBrowser ? getOwnerDocument(triggerRef.current) : null,\n    elements: [triggerRef],\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: !isLazy || isOpen ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      isLazy,\n      isOpen,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      closeDelay,\n      closeOnBlur,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => ({\n      ...props,\n      ref: mergeRefs(popper.popperRef, _ref),\n      style: {\n        ...props.style,\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        visibility: isOpen ? \"visible\" : \"hidden\",\n      },\n    }),\n    [arrowShadowColor, arrowSize, isOpen, popper.popperRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, popper.referenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      popper.referenceRef,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(\n    () => () => {\n      if (openTimeout.current) clearTimeout(openTimeout.current)\n      if (closeTimeout.current) clearTimeout(closeTimeout.current)\n    },\n    [],\n  )\n\n  const onTransitionEnd = () => {\n    popoverRef.current?.dispatchEvent(new Event(\"transitionend\"))\n  }\n\n  return {\n    forceUpdate: popper.forceUpdate,\n    isOpen,\n    onClose,\n    headerId,\n    hasHeader,\n    setHasHeader,\n    bodyId,\n    hasBody,\n    setHasBody,\n    onTransitionEnd,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"]},"metadata":{},"sourceType":"module"}