{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { EASINGS } from \"./__utils\";\nvar transitions = {\n  enter: {\n    duration: 0.2,\n    ease: EASINGS.easeOut\n  },\n  exit: {\n    duration: 0.1,\n    ease: EASINGS.easeIn\n  }\n};\nvar variants = {\n  initial: props => ({\n    opacity: 0,\n    x: props.offsetX,\n    y: props.offsetY,\n    transition: transitions.exit\n  }),\n  exit: props => _extends({\n    opacity: 0,\n    transition: transitions.exit\n  }, props.reverse && {\n    x: props.offsetX,\n    y: props.offsetY\n  }, !props.reverse && {\n    transitionEnd: {\n      x: props.offsetX,\n      y: props.offsetY\n    }\n  }),\n  enter: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n    transition: transitions.enter\n  }\n};\nexport var slideFadeConfig = {\n  initial: \"initial\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants\n};\nexport var SlideFade = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    unmountOnExit,\n    in: isOpen,\n    reverse = true,\n    className,\n    offsetX = 0,\n    offsetY = 8\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"unmountOnExit\", \"in\", \"reverse\", \"className\", \"offsetX\", \"offsetY\"]);\n\n  var shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true;\n  var custom = {\n    offsetX,\n    offsetY,\n    reverse\n  };\n  var motionProps = mergeWith(slideFadeConfig, {\n    custom,\n    animate: isOpen || unmountOnExit ? \"enter\" : \"exit\"\n  });\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    custom: custom\n  }, shouldExpand && /*#__PURE__*/React.createElement(motion.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-offset-slide\", className)\n  }, motionProps, rest)));\n});\n\nif (__DEV__) {\n  SlideFade.displayName = \"SlideFade\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,EAAT,EAAaC,SAAb,EAAwBC,OAAxB,QAAuC,kBAAvC;AACA,SAASC,eAAT,EAA2CC,MAA3C,QAAyD,eAAzD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwC,WAAxC;AAIA,IAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE;IACLC,QAAQ,EAAE,GADL;IAELC,IAAI,EAAEJ,OAAO,CAACK;EAFT,CADW;EAKlBC,IAAI,EAAE;IACJH,QAAQ,EAAE,GADN;IAEJC,IAAI,EAAEJ,OAAO,CAACO;EAFV;AALY,CAApB;AAWA,IAAMC,QAA0B,GAAG;EACjCC,OAAO,EAAGC,KAAD,KAAY;IACnBC,OAAO,EAAE,CADU;IAEnBC,CAAC,EAAEF,KAAK,CAACG,OAFU;IAGnBC,CAAC,EAAEJ,KAAK,CAACK,OAHU;IAInBC,UAAU,EAAEf,WAAW,CAACK;EAJL,CAAZ,CADwB;EAOjCA,IAAI,EAAGI,KAAD;IACJC,OAAO,EAAE,CADL;IAEJK,UAAU,EAAEf,WAAW,CAACK;EAFpB,GAGAI,KAAK,CAACO,OAANP,IAAiB;IACnBE,CAAC,EAAEF,KAAK,CAACG,OADU;IAEnBC,CAAC,EAAEJ,KAAK,CAACK;EAFU,CAHjB,EAOA,CAACL,KAAK,CAACO,OAAP,IAAkB;IACpBC,aAAa,EAAE;MACbN,CAAC,EAAEF,KAAK,CAACG,OADI;MAEbC,CAAC,EAAEJ,KAAK,CAACK;IAFI;EADK,CAPlB,CAP2B;EAqBjCb,KAAK,EAAE;IACLS,OAAO,EAAE,CADJ;IAELC,CAAC,EAAE,CAFE;IAGLE,CAAC,EAAE,CAHE;IAILE,UAAU,EAAEf,WAAW,CAACC;EAJnB;AArB0B,CAAnC;AA6BA,OAAO,IAAMiB,eAAuC,GAAG;EACrDV,OAAO,EAAE,SAD4C;EAErDW,OAAO,EAAE,OAF4C;EAGrDd,IAAI,EAAE,MAH+C;EAIrDE;AAJqD,CAAhD;AAkCP,OAAO,IAAMa,SAAS,gBAAGtB,KAAK,CAACuB,UAANvB,CACvB,CAACW,KAAD,EAAQa,GAAR,KAAgB;EACd,IAAM;IACJC,aADI;IAEJC,EAAE,EAAEC,MAFA;IAGJT,OAAO,GAAG,IAHN;IAIJU,SAJI;IAKJd,OAAO,GAAG,CALN;IAMJE,OAAO,GAAG;EANN,IAQFL,KARJ;EAAA,IAOKkB,IAPL,iCAQIlB,KARJ;;EAUA,IAAMmB,YAAY,GAAGL,aAAa,GAAGE,MAAM,IAAIF,aAAb,GAA6B,IAA/D;EAEA,IAAMM,MAAM,GAAG;IAAEjB,OAAF;IAAWE,OAAX;IAAoBE;EAApB,CAAf;EACA,IAAMc,WAAW,GAAGpC,SAAS,CAACwB,eAAD,EAAkB;IAC7CW,MAD6C;IAE7CV,OAAO,EAAEM,MAAM,IAAIF,aAAVE,GAA0B,OAA1BA,GAAoC;EAFA,CAAlB,CAA7B;EAKA,oBACE3B,oBAACF,eAAD;IAAiBiC,MAAM,EAAEA;EAAzB,GACGD,YAAY,iBACX9B,oBAACD,MAAD,CAAQkC,GAAR;IACET,GAAG,EAAEA,GADP;IAEEI,SAAS,EAAEjC,EAAE,CAAC,qBAAD,EAAwBiC,SAAxB;EAFf,GAGMI,WAHN,EAIMH,IAJN,EAFJ,CADF;AApBqB,EAAlB;;AAmCP,IAAIhC,OAAJ,EAAa;EACXyB,SAAS,CAACY,WAAVZ,GAAwB,WAAxBA;AACD","names":["cx","mergeWith","__DEV__","AnimatePresence","motion","React","EASINGS","transitions","enter","duration","ease","easeOut","exit","easeIn","variants","initial","props","opacity","x","offsetX","y","offsetY","transition","reverse","transitionEnd","slideFadeConfig","animate","SlideFade","forwardRef","ref","unmountOnExit","in","isOpen","className","rest","shouldExpand","custom","motionProps","div","displayName"],"sources":["../../src/slide-fade.tsx"],"sourcesContent":["import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype SlideFadeVariant = MotionVariants<\"initial\" | \"enter\" | \"exit\">\n\nconst transitions = {\n  enter: {\n    duration: 0.2,\n    ease: EASINGS.easeOut,\n  },\n  exit: {\n    duration: 0.1,\n    ease: EASINGS.easeIn,\n  },\n}\n\nconst variants: SlideFadeVariant = {\n  initial: (props) => ({\n    opacity: 0,\n    x: props.offsetX,\n    y: props.offsetY,\n    transition: transitions.exit,\n  }),\n  exit: (props) => ({\n    opacity: 0,\n    transition: transitions.exit,\n    ...(props.reverse && {\n      x: props.offsetX,\n      y: props.offsetY,\n    }),\n    ...(!props.reverse && {\n      transitionEnd: {\n        x: props.offsetX,\n        y: props.offsetY,\n      },\n    }),\n  }),\n  enter: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n    transition: transitions.enter,\n  },\n}\n\nexport const slideFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"initial\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface SlideFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The offset on the horizontal or `x` axis\n   * @default 0\n   */\n  offsetX?: string | number\n  /**\n   * The offset on the vertical or `y` axis\n   * @default 8\n   */\n  offsetY?: string | number\n  /**\n   * If `true`, the element will be transitioned back to the offset when it leaves.\n   * Otherwise, it'll only fade out\n   * @default true\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will animate in\n   */\n  in?: boolean\n}\n\nexport const SlideFade = React.forwardRef<HTMLDivElement, SlideFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      className,\n      offsetX = 0,\n      offsetY = 8,\n      ...rest\n    } = props\n\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    const custom = { offsetX, offsetY, reverse }\n    const motionProps = mergeWith(slideFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  SlideFade.displayName = \"SlideFade\"\n}\n"]},"metadata":{},"sourceType":"module"}